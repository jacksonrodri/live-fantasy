[{"/home/sulaiman/Desktop/workspace/PowerplayGames/src/index.js":"1","/home/sulaiman/Desktop/workspace/PowerplayGames/src/App.js":"2","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reportWebVitals.js":"3","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/ScrollToTop.js":"4","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SponserAContestPage/SponserAContestPage.js":"5","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerCenter.js":"6","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPlaySponsorsPage/PowerPlaySponsorsPage.js":"7","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/HomePage/HomePage.js":"8","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SelectTeams/SelectTeams.js":"9","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoPreGame/BingoPreGame.js":"10","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerBetLive/PowerBetLive.js":"11","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/CardGame/index.js":"12","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/LivePowerPlay.js":"13","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/Scrollbar.js":"14","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/InteractiveContests.js":"15","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Phone.js":"16","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Document.js":"17","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trophy.js":"18","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Search.js":"19","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trash.js":"20","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Munch.js":"21","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CheckIcon.js":"22","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header/Header.js":"23","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Footer/Footer.js":"24","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header2/Header2.js":"25","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Contest/Contest.js":"26","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ContestRules/ContestRules.js":"27","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/LiveGame/LiveGame.js":"28","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Reload.js":"29","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards.js":"30","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Billards.js":"31","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CasinoChips.js":"32","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium.js":"33","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerPlayGridRow.js":"34","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ball.js":"35","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/BasketBall.js":"36","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Hockeys.js":"37","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall.js":"38","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calender.js":"39","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock.js":"40","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Crown.js":"41","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/LeftArrow.js":"42","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Card/index.js":"43","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/GameCard/index.js":"44","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeader/index.js":"45","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Alert/index.js":"46","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Sidebar/index.js":"47","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Progress/index.js":"48","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Info.js":"49","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shuffle.js":"50","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Arrow.js":"51","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowDown.js":"52","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Tick.js":"53","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowUp.js":"54","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeaderCard/index.js":"55","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/SidebarButton/index.js":"56","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Time.js":"57","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPicks/index.js":"58","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerpickCard/index.js":"59","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/ChaseACard/index.js":"60","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/shared.js":"61","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown/index.js":"62","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock2.js":"63","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calendar2.js":"64","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium2.js":"65","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Pinnacle.js":"66","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Cell/index.js":"67","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellHigh.js":"68","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellMedium.js":"69","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellLow.js":"70","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellVeryLow.js":"71","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/index.js":"72","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Button/index.js":"73","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AngleIcon.js":"74","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Input/Input.js":"75","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Eye.js":"76","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/NoPick.js":"77","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/GetUserInfoPage/GetUserInfoPage.js":"78","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Select/Select.js":"79","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/CheckBox/CheckBox.js":"80","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/constants.js":"81","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Replace.js":"82","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PlusAndMinus.js":"83","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Plus.js":"84","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Minus.js":"85","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/Games.js":"86","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeIconNumbers.js":"87","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeJack.js":"88","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeAce.js":"89","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeKing.js":"90","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeQueen.js":"91","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerUpPage/PowerUpPage.js":"92","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/TimerClock/TimerClock.js":"93","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/FAQ/index.js":"94","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Privacy/index.js":"95","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TrustAndSafety/index.js":"96","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountSecurity/index.js":"97","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TermsOfUse/index.js":"98","/home/sulaiman/Desktop/workspace/PowerplayGames/src/global/constants.js":"99","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/NoPick/index.js":"100","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/Hearts.js":"101","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartsIcons.js":"102","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/Spades.js":"103","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartJack.js":"104","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartKing.js":"105","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartQueen.js":"106","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartAce.js":"107","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/Diamonds.js":"108","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondIcons.js":"109","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondJack.js":"110","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondKing.js":"111","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondQueen.js":"112","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondAce.js":"113","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/Clubs.js":"114","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubIcons.js":"115","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubJack.js":"116","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubKing.js":"117","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubQueen.js":"118","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubAce.js":"119","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/index.js":"120","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ReverseTimer/ReverseTimer.js":"121","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGameBall/BingoGameBall.js":"122","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoInProgressGame/BingoInProgressGame.js":"123","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPlays/PowerPlays.js":"124","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame/BingoGame.js":"125","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame2/BingoGame2.js":"126","/home/sulaiman/Desktop/workspace/PowerplayGames/src/store.js":"127","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducer.js":"128","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/index.js":"129","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/cardGameReducer/index.js":"130","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/cardGameAction.js":"131","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Login/index.js":"132","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Input/index.js":"133","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/RoyalGame/index.js":"134","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerRoyalsGameReducer/index.js":"135","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerRoyalsActions.js":"136","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPoker/index.js":"137","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerPokerActions.js":"138","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerPokerReducer/index.js":"139","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/HomePageContentHeader/index.js":"140","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/LandingPage/index.js":"141","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballTicket.js":"142","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shape.js":"143","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballCup.js":"144","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/MegaPhone.js":"145","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Modal/index.js":"146","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountPage/index.js":"147","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/AccountInfoComponent/index.js":"148","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/index.js":"149","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ticket.js":"150","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Money.js":"151","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/ListItem.js":"152","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ResultsInfoComponent/index.js":"153","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/index.js":"154","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/ResultCard.js":"155","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/server_connection.js":"156","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/environment.js":"157","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/authReducer/index.js":"158","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/authActions.js":"159","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ProtectedRoute/index.js":"160","/home/sulaiman/Desktop/workspace/PowerplayGames/src/Root.js":"161","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/landingPageReducer/index.js":"162","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/landingPageActions.js":"163","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/http.js":"164","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenter.js":"165","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/InteractiveContests.js":"166","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/PowerPlayGridRow.js":"167","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PIcon.js":"168","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenterTable.js":"169","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Lineprogress.js":"170","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PointsIcon.js":"171","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenterTableRow.js":"172","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Scoreboard.js":"173","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall2.js":"174","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown2/index.js":"175","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/urls.js":"176","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Checkbox/index.js":"177","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Select/index.js":"178"},{"size":602,"mtime":1612017303993,"results":"179","hashOfConfig":"180"},{"size":3580,"mtime":1612882374190,"results":"181","hashOfConfig":"180"},{"size":362,"mtime":1609871632203,"results":"182","hashOfConfig":"180"},{"size":288,"mtime":1609871632219,"results":"183","hashOfConfig":"180"},{"size":2131,"mtime":1609871632203,"results":"184","hashOfConfig":"180"},{"size":1999,"mtime":1612350133778,"results":"185","hashOfConfig":"180"},{"size":9873,"mtime":1609871632199,"results":"186","hashOfConfig":"180"},{"size":8942,"mtime":1612883592228,"results":"187","hashOfConfig":"180"},{"size":12705,"mtime":1610130428459,"results":"188","hashOfConfig":"180"},{"size":3977,"mtime":1609964161766,"results":"189","hashOfConfig":"180"},{"size":17752,"mtime":1609871632199,"results":"190","hashOfConfig":"180"},{"size":25401,"mtime":1611165300414,"results":"191","hashOfConfig":"180"},{"size":7812,"mtime":1611580070045,"results":"192","hashOfConfig":"180"},{"size":989,"mtime":1609871632219,"results":"193","hashOfConfig":"180"},{"size":9311,"mtime":1610130428459,"results":"194","hashOfConfig":"180"},{"size":1899,"mtime":1609871632195,"results":"195","hashOfConfig":"180"},{"size":1763,"mtime":1609871632195,"results":"196","hashOfConfig":"180"},{"size":1774,"mtime":1609871632195,"results":"197","hashOfConfig":"180"},{"size":784,"mtime":1609871632195,"results":"198","hashOfConfig":"180"},{"size":1035,"mtime":1609871632195,"results":"199","hashOfConfig":"180"},{"size":3363,"mtime":1609871632195,"results":"200","hashOfConfig":"180"},{"size":1054,"mtime":1609871632191,"results":"201","hashOfConfig":"180"},{"size":3078,"mtime":1612349563498,"results":"202","hashOfConfig":"180"},{"size":2017,"mtime":1611728958115,"results":"203","hashOfConfig":"180"},{"size":1026,"mtime":1609871632151,"results":"204","hashOfConfig":"180"},{"size":6463,"mtime":1609871632147,"results":"205","hashOfConfig":"180"},{"size":1770,"mtime":1609871632147,"results":"206","hashOfConfig":"180"},{"size":3644,"mtime":1609871632151,"results":"207","hashOfConfig":"180"},{"size":976,"mtime":1609871632195,"results":"208","hashOfConfig":"180"},{"size":13867,"mtime":1609871632179,"results":"209","hashOfConfig":"180"},{"size":1701,"mtime":1609871632179,"results":"210","hashOfConfig":"180"},{"size":6083,"mtime":1609871632191,"results":"211","hashOfConfig":"180"},{"size":2233,"mtime":1609871632195,"results":"212","hashOfConfig":"180"},{"size":3264,"mtime":1609871632199,"results":"213","hashOfConfig":"180"},{"size":8069,"mtime":1612615493539,"results":"214","hashOfConfig":"180"},{"size":1500,"mtime":1609871632179,"results":"215","hashOfConfig":"180"},{"size":2003,"mtime":1609871632195,"results":"216","hashOfConfig":"180"},{"size":1988,"mtime":1612793820526,"results":"217","hashOfConfig":"180"},{"size":2249,"mtime":1609871632179,"results":"218","hashOfConfig":"180"},{"size":975,"mtime":1609871632191,"results":"219","hashOfConfig":"180"},{"size":2442,"mtime":1609871632195,"results":"220","hashOfConfig":"180"},{"size":1018,"mtime":1609871632195,"results":"221","hashOfConfig":"180"},{"size":358,"mtime":1609871632147,"results":"222","hashOfConfig":"180"},{"size":6845,"mtime":1610904589977,"results":"223","hashOfConfig":"180"},{"size":1148,"mtime":1610469067232,"results":"224","hashOfConfig":"180"},{"size":449,"mtime":1610130479904,"results":"225","hashOfConfig":"180"},{"size":385,"mtime":1609871632167,"results":"226","hashOfConfig":"180"},{"size":2722,"mtime":1609871632155,"results":"227","hashOfConfig":"180"},{"size":946,"mtime":1612797077058,"results":"228","hashOfConfig":"180"},{"size":1496,"mtime":1608897280860,"results":"229","hashOfConfig":"180"},{"size":841,"mtime":1608891255247,"results":"230","hashOfConfig":"180"},{"size":674,"mtime":1609528813866,"results":"231","hashOfConfig":"180"},{"size":908,"mtime":1609871632195,"results":"232","hashOfConfig":"180"},{"size":670,"mtime":1609528813866,"results":"233","hashOfConfig":"180"},{"size":1533,"mtime":1610469067232,"results":"234","hashOfConfig":"180"},{"size":917,"mtime":1609871632167,"results":"235","hashOfConfig":"180"},{"size":2363,"mtime":1609871632195,"results":"236","hashOfConfig":"180"},{"size":12966,"mtime":1609871632199,"results":"237","hashOfConfig":"180"},{"size":463,"mtime":1609871632155,"results":"238","hashOfConfig":"180"},{"size":9105,"mtime":1610469067236,"results":"239","hashOfConfig":"180"},{"size":3896,"mtime":1613062327963,"results":"240","hashOfConfig":"180"},{"size":2041,"mtime":1609964195139,"results":"241","hashOfConfig":"180"},{"size":1439,"mtime":1609871632195,"results":"242","hashOfConfig":"180"},{"size":2735,"mtime":1609871632179,"results":"243","hashOfConfig":"180"},{"size":2924,"mtime":1609871632195,"results":"244","hashOfConfig":"180"},{"size":2329,"mtime":1609871632195,"results":"245","hashOfConfig":"180"},{"size":1496,"mtime":1609871632147,"results":"246","hashOfConfig":"180"},{"size":2699,"mtime":1609871632191,"results":"247","hashOfConfig":"180"},{"size":3125,"mtime":1609871632191,"results":"248","hashOfConfig":"180"},{"size":2912,"mtime":1609871632191,"results":"249","hashOfConfig":"180"},{"size":2433,"mtime":1609871632191,"results":"250","hashOfConfig":"180"},{"size":6794,"mtime":1609871632155,"results":"251","hashOfConfig":"180"},{"size":1367,"mtime":1613139815680,"results":"252","hashOfConfig":"180"},{"size":675,"mtime":1609871632179,"results":"253","hashOfConfig":"180"},{"size":952,"mtime":1612262819279,"results":"254","hashOfConfig":"180"},{"size":1010,"mtime":1609871632195,"results":"255","hashOfConfig":"180"},{"size":776,"mtime":1609871632195,"results":"256","hashOfConfig":"180"},{"size":6160,"mtime":1609871632199,"results":"257","hashOfConfig":"180"},{"size":416,"mtime":1609871632219,"results":"258","hashOfConfig":"180"},{"size":426,"mtime":1609871632219,"results":"259","hashOfConfig":"180"},{"size":1291,"mtime":1613138597690,"results":"260","hashOfConfig":"180"},{"size":2394,"mtime":1609871632195,"results":"261","hashOfConfig":"180"},{"size":1285,"mtime":1609871632195,"results":"262","hashOfConfig":"180"},{"size":1191,"mtime":1609871632195,"results":"263","hashOfConfig":"180"},{"size":876,"mtime":1609871632195,"results":"264","hashOfConfig":"180"},{"size":1793,"mtime":1609871632155,"results":"265","hashOfConfig":"180"},{"size":36404,"mtime":1609871632191,"results":"266","hashOfConfig":"180"},{"size":100076,"mtime":1609871632191,"results":"267","hashOfConfig":"180"},{"size":41211,"mtime":1609871632187,"results":"268","hashOfConfig":"180"},{"size":91068,"mtime":1609871632191,"results":"269","hashOfConfig":"180"},{"size":118781,"mtime":1609871632191,"results":"270","hashOfConfig":"180"},{"size":5410,"mtime":1612887657574,"results":"271","hashOfConfig":"180"},{"size":685,"mtime":1609871632175,"results":"272","hashOfConfig":"180"},{"size":1550,"mtime":1609871632199,"results":"273","hashOfConfig":"180"},{"size":1537,"mtime":1609871632203,"results":"274","hashOfConfig":"180"},{"size":1568,"mtime":1609871632203,"results":"275","hashOfConfig":"180"},{"size":1570,"mtime":1609871632195,"results":"276","hashOfConfig":"180"},{"size":1556,"mtime":1609871632203,"results":"277","hashOfConfig":"180"},{"size":49,"mtime":1609871632179,"results":"278","hashOfConfig":"180"},{"size":517,"mtime":1609871632151,"results":"279","hashOfConfig":"180"},{"size":2546,"mtime":1609871632187,"results":"280","hashOfConfig":"180"},{"size":18436,"mtime":1609871632187,"results":"281","hashOfConfig":"180"},{"size":2556,"mtime":1609871632191,"results":"282","hashOfConfig":"180"},{"size":124201,"mtime":1609871632187,"results":"283","hashOfConfig":"180"},{"size":95518,"mtime":1609871632187,"results":"284","hashOfConfig":"180"},{"size":106845,"mtime":1609871632187,"results":"285","hashOfConfig":"180"},{"size":1466,"mtime":1609871632183,"results":"286","hashOfConfig":"180"},{"size":2585,"mtime":1609871632183,"results":"287","hashOfConfig":"180"},{"size":12085,"mtime":1610290651049,"results":"288","hashOfConfig":"180"},{"size":85000,"mtime":1609871632183,"results":"289","hashOfConfig":"180"},{"size":55469,"mtime":1609871632183,"results":"290","hashOfConfig":"180"},{"size":102173,"mtime":1609871632183,"results":"291","hashOfConfig":"180"},{"size":1112,"mtime":1609871632183,"results":"292","hashOfConfig":"180"},{"size":2511,"mtime":1609871632183,"results":"293","hashOfConfig":"180"},{"size":49571,"mtime":1609871632179,"results":"294","hashOfConfig":"180"},{"size":103481,"mtime":1609871632179,"results":"295","hashOfConfig":"180"},{"size":103648,"mtime":1609871632179,"results":"296","hashOfConfig":"180"},{"size":99788,"mtime":1609871632183,"results":"297","hashOfConfig":"180"},{"size":2638,"mtime":1609871632179,"results":"298","hashOfConfig":"180"},{"size":1449,"mtime":1610290651049,"results":"299","hashOfConfig":"180"},{"size":1489,"mtime":1609871632163,"results":"300","hashOfConfig":"180"},{"size":1110,"mtime":1609964161750,"results":"301","hashOfConfig":"180"},{"size":3954,"mtime":1609964161766,"results":"302","hashOfConfig":"180"},{"size":3204,"mtime":1609871653252,"results":"303","hashOfConfig":"180"},{"size":1722,"mtime":1609871653252,"results":"304","hashOfConfig":"180"},{"size":1953,"mtime":1609964161710,"results":"305","hashOfConfig":"180"},{"size":342,"mtime":1612877757577,"results":"306","hashOfConfig":"180"},{"size":156,"mtime":1609871659436,"results":"307","hashOfConfig":"180"},{"size":443,"mtime":1612205154044,"results":"308","hashOfConfig":"180"},{"size":873,"mtime":1610290651053,"results":"309","hashOfConfig":"180"},{"size":549,"mtime":1609865705924,"results":"310","hashOfConfig":"180"},{"size":4688,"mtime":1613053402846,"results":"311","hashOfConfig":"180"},{"size":1716,"mtime":1613049644065,"results":"312","hashOfConfig":"180"},{"size":21946,"mtime":1612883570208,"results":"313","hashOfConfig":"180"},{"size":933,"mtime":1610457354281,"results":"314","hashOfConfig":"180"},{"size":656,"mtime":1610372082062,"results":"315","hashOfConfig":"180"},{"size":22805,"mtime":1611247507597,"results":"316","hashOfConfig":"180"},{"size":661,"mtime":1610993404516,"results":"317","hashOfConfig":"180"},{"size":934,"mtime":1611073163415,"results":"318","hashOfConfig":"180"},{"size":2621,"mtime":1613145091068,"results":"319","hashOfConfig":"180"},{"size":8626,"mtime":1613145237362,"results":"320","hashOfConfig":"180"},{"size":3834,"mtime":1613145061924,"results":"321","hashOfConfig":"180"},{"size":5159,"mtime":1613144995235,"results":"322","hashOfConfig":"180"},{"size":3672,"mtime":1613145007299,"results":"323","hashOfConfig":"180"},{"size":2826,"mtime":1613145020743,"results":"324","hashOfConfig":"180"},{"size":620,"mtime":1613057648314,"results":"325","hashOfConfig":"180"},{"size":2356,"mtime":1613137458960,"results":"326","hashOfConfig":"180"},{"size":1463,"mtime":1613137512680,"results":"327","hashOfConfig":"180"},{"size":11225,"mtime":1613140646938,"results":"328","hashOfConfig":"180"},{"size":3294,"mtime":1612965711207,"results":"329","hashOfConfig":"180"},{"size":3324,"mtime":1612965774519,"results":"330","hashOfConfig":"180"},{"size":746,"mtime":1611740000736,"results":"331","hashOfConfig":"180"},{"size":899,"mtime":1613141217170,"results":"332","hashOfConfig":"180"},{"size":1536,"mtime":1613141250955,"results":"333","hashOfConfig":"180"},{"size":3027,"mtime":1613142527183,"results":"334","hashOfConfig":"180"},{"size":225,"mtime":1613144921458,"results":"335","hashOfConfig":"180"},{"size":154,"mtime":1612193522658,"results":"336","hashOfConfig":"180"},{"size":812,"mtime":1612880212535,"results":"337","hashOfConfig":"180"},{"size":1182,"mtime":1612881218438,"results":"338","hashOfConfig":"180"},{"size":862,"mtime":1612972205704,"results":"339","hashOfConfig":"180"},{"size":281,"mtime":1612017292029,"results":"340","hashOfConfig":"180"},{"size":714,"mtime":1612205132863,"results":"341","hashOfConfig":"180"},{"size":350,"mtime":1612204979345,"results":"342","hashOfConfig":"180"},{"size":745,"mtime":1612272066983,"results":"343","hashOfConfig":"180"},{"size":4588,"mtime":1612802575208,"results":"344","hashOfConfig":"180"},{"size":9311,"mtime":1612350093531,"results":"345","hashOfConfig":"180"},{"size":3264,"mtime":1612350093547,"results":"346","hashOfConfig":"180"},{"size":2213,"mtime":1612353533786,"results":"347","hashOfConfig":"180"},{"size":9312,"mtime":1612875493811,"results":"348","hashOfConfig":"180"},{"size":655,"mtime":1612450681862,"results":"349","hashOfConfig":"180"},{"size":3376,"mtime":1612546607721,"results":"350","hashOfConfig":"180"},{"size":6507,"mtime":1612801929873,"results":"351","hashOfConfig":"180"},{"size":11402,"mtime":1612617866383,"results":"352","hashOfConfig":"180"},{"size":8334,"mtime":1612794021892,"results":"353","hashOfConfig":"180"},{"size":1832,"mtime":1612804853233,"results":"354","hashOfConfig":"180"},{"size":107,"mtime":1612878790673,"results":"355","hashOfConfig":"180"},{"size":696,"mtime":1613054181098,"results":"356","hashOfConfig":"180"},{"size":1010,"mtime":1613061281267,"results":"357","hashOfConfig":"180"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},"1mum3mx",{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"360"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"360"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"411"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"360"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"360"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"464"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"467"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"360"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"360"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"360"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"360"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"360"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"360"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"360"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"360"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"360"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"360"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"360"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"360"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"360"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"360"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"360"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"360"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"360"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"360"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"360"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"360"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"360"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"360"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"360"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"730"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"360"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"360"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"360"},"/home/sulaiman/Desktop/workspace/PowerplayGames/src/index.js",[],["749","750"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/App.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reportWebVitals.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/ScrollToTop.js",["751","752"],"import React, { useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom'\n\nconst ScrollToTop = props => {\n    const location = useLocation();\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [location])\n    return null;\n}\n\nexport default ScrollToTop;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SponserAContestPage/SponserAContestPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerCenter.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPlaySponsorsPage/PowerPlaySponsorsPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/HomePage/HomePage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SelectTeams/SelectTeams.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoPreGame/BingoPreGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerBetLive/PowerBetLive.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/CardGame/index.js",["753","754","755","756","757","758","759"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {GetAceCardIndex, hasMaxAceCards, redirectTo} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport { IsAceCard, getRandomCard } from '../../utility/shared'\nimport { setCardState, resetCardState, cardGameInventory } from '../../actions/cardGameAction'\nimport classes from './cardGamePage.module.scss'\n\nconst TOTAL_ROUNDS = 5;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = []\nconst aceCardsArr = []\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction CardGame(props) {\n    const [cardsState, setCardsState] = useState({})\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n\n    const dispatch = useDispatch();\n    const { collectedAceCards = [],\n        inventory = {}\n    } = useSelector(state => state.cardGame)\n\n    const { replace = 0, replaceAll = 0, powerMatch = 0, increaseOrDecrease = 0 } = inventory || {}\n    \n    useEffect(() => { \n        dispatch(resetCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n        gameCompleted(timeOut);\n        \n        return function clearnup() {\n            return clearInterval(timeOut)\n        }\n    }, [currentCard, currentRound])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if(!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            timeOut = setInterval(() => {\n                gameCompleted(timeOut)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if(!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n                    if(currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                gameCompleted(timeOut)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                            resetList(aceCardsArr)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetList = (list = []) => {\n        while (list?.length > 0) {\n            list.pop()\n        }\n    }\n\n    const resetGameState = () => {\n        resetList(cardsArr)\n        resetList(aceCardsArr)\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState({})\n        setCurrentCard(_currentCard)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setIsReplaceAllState(false)\n        dispatch(setCardState([]))\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n\n        let isCardAceCompleted = updateAceCard(card)\n        if (isCardAceCompleted) {\n            //recursive call\n            return updateCardState()\n        }\n        cardsArr.push(card)\n\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n    }\n\n    const updateAceCard = (card) => {\n        if (IsAceCard(card)) {\n            const _collectedAceCards = collectedAceCards;\n            if (_collectedAceCards?.length && _collectedAceCards?.length > 0) {\n                const _aceCardInfo = _collectedAceCards?.filter(_card => _card.suit === card.suit)[0]\n                if (_aceCardInfo) {\n                    const { suit = 0, aceCards = 0 } = _aceCardInfo || {}\n                    let _aceCards = aceCards\n                    if (_aceCards === CONSTANTS.MAX_ACE_PER_CARD) {\n                        //ace cards for current suit is completed\n                        //select random card\n                        updateCardState()\n                        return true;\n                    } else {\n                        _aceCards += 1;\n                    }\n\n                    const _aceCard = {\n                        suit: suit,\n                        aceCards: _aceCards,\n                    }\n                    let cardIndex = _collectedAceCards?.indexOf(_aceCardInfo)\n                    aceCardsArr[cardIndex] = _aceCard\n                    dispatch(setCardState(aceCardsArr))   \n                } else {\n                    const _aceCard = {\n                        suit: card.suit,\n                        aceCards: 1\n                    }\n    \n                    aceCardsArr.push(_aceCard)\n                    dispatch(setCardState(aceCardsArr))\n                }\n            } else {\n                //no ace card is available in state\n                //store new ace cards to state\n                const _aceCard = {\n                    suit: card.suit,\n                    aceCards: 1\n                }\n\n                aceCardsArr.push(_aceCard)\n                dispatch(setCardState(aceCardsArr))\n            }\n        }\n\n        return false\n    }\n\n    const updateCards = (index, card) => {\n        cardsArr[index] = card\n        let isAceCompleted = updateAceCard(card)\n        if (!isAceCompleted) {\n            setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n        }\n    }\n\n    const gameCompleted = (timeOut = setInterval(null, 0)) => {\n        if (getAceCards() >= CONSTANTS.MAX_ACE_CARDS) {\n            return clearTimeout(timeOut)\n        }\n    }\n\n    const _redirectTo = (path = '/') => {\n        redirectTo(props, {path})\n    }\n\n    const getAceCards = () => {\n        let totalAces = 0;\n        if (collectedAceCards.length) {\n            totalAces = collectedAceCards?.reduce((c1, c2) => {\n                return c1 + (c2['aceCards'] || 0)\n            }, 0)\n        }\n\n        return totalAces;\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL:\n                _inventory.replaceAll = inventoryValue\n                break;\n        }\n\n        dispatch(cardGameInventory(_inventory))\n    }\n\n    \n    const onReplaceAll = () => {\n        let _replaceAll = replaceAll\n        \n        if (_replaceAll <= 0) return\n\n        _replaceAll -= 1\n        updateInventory(_replaceAll, CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (cardIndex, card) => {\n        const { suit = 0, rank = 0 } = card || {}\n        let _rank = rank\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\n            return;\n        }\n\n        if (_rank !== GetAceCardIndex()) {\n            _rank += 1;\n        }\n        \n        const _card = {\n            suit: suit,\n            rank: _rank,\n        }\n\n        let _increase = increaseOrDecrease;\n        _increase -= 1;\n\n        //update the cards array in parent component\n        updateCards(cardIndex, _card)\n        updateInventory(_increase, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onReplace = (cardIndex, card) => {\n        const { rank = 0 } = card || {}\n        if (replace <= 0 || cardsState?.activeCard !== card)\n        return;\n\n        let _replace = replace;\n        _replace -= 1;\n\n        let newCard = getRandomCard();\n        if (newCard?.rank === rank) {\n            newCard = getRandomCard();\n        }\n        updateCards(cardIndex, newCard)\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n    }\n\n    const onPowerMatch = (cardIndex, card) => {\n        const { suit = 0 } = card || {}\n        if (powerMatch <= 0 || getMaxAceCardsForCardSuit(card) || cardsState?.activeCard !== card) return\n\n        let _powerMatch = powerMatch;\n        _powerMatch -= 1;\n\n        const _aceCard = {\n            suit: suit,\n            rank: GetAceCardIndex(),\n        }\n\n        updateCards(cardIndex, _aceCard)\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\n    }\n\n    const onDecrease = (cardIndex, card) => {\n        const { suit = 0, rank = 0 } = card || {}\n        let _rank = rank\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\n            return;\n        }\n\n        if (_rank > 0) {\n            _rank -= 1;\n        } else {\n            _rank = GetAceCardIndex()\n        }\n        \n        const _card = {\n            suit: suit,\n            rank: _rank,\n        }\n\n        let _decrease = increaseOrDecrease;\n        _decrease -= 1;\n\n        //update the cards array in parent component\n        updateCards(cardIndex, _card)\n        updateInventory(_decrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const getMaxAceCardsForCardSuit = (card) => {\n        const { suit = 0 } = card || {}\n        const aceCard = collectedAceCards?.filter(_card => _card?.suit === suit)[0];\n        const { aceCards = 0 } = aceCard || {}\n        if (aceCards && hasMaxAceCards(aceCards)) {\n            return true\n        }\n\n        return false\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Chase The Ace\"/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Chase the Ace!</span> Your goal is to obtain 5 Aces in order to advance\n                                to the next round! Find the Ace of Spades and win! User your <span>Powers</span> wisely!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>Hand <span>{currentRound}</span> of { TOTAL_ROUNDS }</p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={classes.__card_game_content_cards}>\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[0]?.rank] === \"A\"}\n                                    card={cardsState?.collectedCards?.[0]}\n                                    isSelected={cardsState?.collectedCards?.[0] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.collectedCards?.[0]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(0, cardsState?.collectedCards?.[0])}\n                                    onDecrease={() => onDecrease(0, cardsState?.collectedCards?.[0])}\n                                    onPowerMatch={() => onPowerMatch(0, cardsState?.collectedCards?.[0])}\n                                    onReplace={() => onReplace(0, cardsState?.collectedCards?.[0])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[1]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[1]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[1] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[1]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(1, cardsState?.collectedCards?.[1])}\n                                    onDecrease={() => onDecrease(1, cardsState?.collectedCards?.[1])}\n                                    onPowerMatch={() => onPowerMatch(1, cardsState?.collectedCards?.[1])}\n                                    onReplace={() => onReplace(1, cardsState?.collectedCards?.[1])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[2]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[2]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[2] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[2]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(2, cardsState?.collectedCards?.[2])}\n                                    onDecrease={() => onDecrease(2, cardsState?.collectedCards?.[2])}\n                                    onPowerMatch={() => onPowerMatch(2, cardsState?.collectedCards?.[2])}\n                                    onReplace={() => onReplace(2, cardsState?.collectedCards?.[2])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[3]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[3]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[3] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[3]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(3, cardsState?.collectedCards?.[3])}\n                                    onDecrease={() => onDecrease(3, cardsState?.collectedCards?.[3])}\n                                    onPowerMatch={() => onPowerMatch(3, cardsState?.collectedCards?.[3])}\n                                    onReplace={() => onReplace(3, cardsState?.collectedCards?.[3])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[4]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[4]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[4] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.activeCard) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(4, cardsState?.collectedCards?.[4])}\n                                    onDecrease={() => onDecrease(4, cardsState?.collectedCards?.[4])}\n                                    onPowerMatch={() => onPowerMatch(4, cardsState?.collectedCards?.[4])}\n                                    onReplace={() => onReplace(4, cardsState?.collectedCards?.[4])}\n                                />\n                            </div>\n                            {/* <button className={`${classes.__reload_btn} ${showResetTimer && classes.active}`} onClick={onReplaceAll}\n                                disabled={!showResetTimer}\n                            >\n                                {\n                                    showResetTimer &&\n                                    <span style={{ position: 'absolute', top: '-15px', left: '50%', color: '#fff', transform: 'translateX(-50%)' }}>{ resetBtnCountDown }</span>\n\n                                }\n                                <Reload size={48} className={classes.__reload_svg_icon}/>\n                            </button> */}\n                        </Card>\n                    </div>\n\n                    <div className={classes.__card_game_content_footer}>\n                        {\n                            currentCard === 0 && time > 0 &&\n                                <>\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n                        {\n                            getAceCards() >= CONSTANTS.MAX_ACE_CARDS ?\n                                <>\n                                    <Alert success renderMsg={() => (<p>Congratulations on <strong>{ getAceCards() || 0 }</strong> Aces!</p>)} />\n                                    <button className={`__btn ${classes.__card_game_footer_btn}`}\n                                        onClick={() => _redirectTo('/chase-a-card')}>\n                                        Chase The Ace!\n                                    </button>\n                                </>\n                                :\n                                currentRound === TOTAL_ROUNDS && time <= 0 && cardsArr.length >= CONSTANTS.MAX_ACE_CARDS\n                                    ?\n                                    <Alert danger renderMsg={() => (<p>Sorry, you did not get 5 Aces. The next draw will be tomorrow at 8:00PM</p>)} />\n                                    :\n                                    <Alert primary renderMsg={() => (<p>Round { currentRound } in Progress: Aces = <strong>{getAceCards() || 0}</strong></p>)} />\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                        <div className={classes.__sidebar_header_balance}>\n                            <span>My Balance</span>\n                            <span className={classes.__sidebar_balance_text}>$0.00</span>\n                        </div>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        {/* <SidebarButton\n                            success={replaceAll > 0 ? true : false}\n                            primary={replaceAll <= 0 ? true : false}\n                            title=\"Replace All\"\n                            toolText={`${replaceAll} left`}\n                            icon={<div\n                                className={classes.__sidebar_reload_btn}>\n                                <Reload bgColor={\"#0ff\"} style={{height: 'auto'}}/>\n                            </div>}\n                        /> */}\n\n                        <SidebarButton\n                            success={powerMatch > 0 ? true : false}\n                            primary={powerMatch <= 0 ? true : false}\n                            title=\"Power Match\"\n                            toolText={`${powerMatch} left`}\n                            icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\n                        />\n\n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Move\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n\n                        {/* <SidebarButton\n                            primary\n                            title=\"Decrease\"\n                            toolText=\"$.25\"\n                            icon={<ArrowDown style={{height: 'auto'}}/>}\n                        /> */}\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nCardGame.propTypes = {}\n\nexport default withRouter(CardGame)\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/LivePowerPlay.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/Scrollbar.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/InteractiveContests.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Phone.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Document.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trophy.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Search.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trash.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Munch.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CheckIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header/Header.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Footer/Footer.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header2/Header2.js",[],["760","761"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Contest/Contest.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ContestRules/ContestRules.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/LiveGame/LiveGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Reload.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Billards.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CasinoChips.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerPlayGridRow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ball.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/BasketBall.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Hockeys.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calender.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Crown.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/LeftArrow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Card/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/GameCard/index.js",["762","763","764","765","766"],"import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\n\nimport Replace from '../../icons/Replace'\nimport Plus from '../../icons/Plus'\nimport Minus from '../../icons/Minus'\nimport boltIcon from '../../assets/bolt.png'\nimport Tick from '../../icons/Tick'\nimport Cards from '../../icons/Cards/index'\nimport classes from \"./gameCard.module.scss\"\n\nfunction GameCard(props) {\n\n    const [showPopup, setPopupState] = useState(false)\n    const [hasReplaced, setHasReplacedState] = useState(false)\n\n    const {\n        isSelected = false,\n        showCardPopup = false,\n        isCompleted = false,\n        image = '',\n        styles = {},\n        card = {},\n        inventory: { replace = 0, powerMatch = 0, increaseOrDecrease = 0 } = {},\n        activeCard = {},\n        time = 0,\n        width = 0,\n        height = 0,\n        hoverShadow = false,\n        showPowerMatchPower = false,\n        showReplacePower = false,\n        showIncrementOrDecrementPower = false,\n        onClick = () => { },\n        onIncrease = () => { },\n        onDecrease = () => { },\n        onPowerMatch = () => { },\n        onReplace = () => { }\n    } = props || {}\n\n    useEffect(() => {\n        if (time <= 0) {\n            setHasReplacedState(false)\n            setPopupState(false)\n        }\n    }, [time])\n\n    const _onReplace = () => { \n        setHasReplacedState(true)\n    }\n\n    return (\n        <div className={`${classes.__game_card_wrapper} ${hoverShadow && classes.shadow}`} style={styles} {...props}>\n            {\n                //if rank === 12 => \"A\"\n                isCompleted &&\n                <Tick style={{\n                    height: \"auto\",\n                    position: \"absolute\",\n                    alignSelf: \"center\",\n                    transform: `translate(25%, -25%)`\n                }}/>\n            }\n            {\n                isSelected\n                    ?\n                    <div className={classes.__game_card_selected} onClick={() => {\n                        if (showCardPopup) {\n                            setPopupState(!showPopup)\n                        }\n                        onClick()\n                    }} onBlur={() => {\n                        setPopupState(false)\n                        }}>\n                        {\n                            image ?\n                                <div className={classes.__game_card_selected}>\n                                    <img src={image} style={{width: '100%', height: '100%'}}/>\n                                </div>\n                                :\n                                <Cards card={card} width={width || 130} height={height || 195} />\n                        }\n                    </div>\n                    :\n                    <div className={classes.__game_card_container}>\n                        <span>?</span>\n                    </div>\n            }\n            {\n                showPopup && activeCard === card && time > 0 &&\n                <div className={classes.__game_card_popup_container}>\n                    <div className={classes.__game_card_popup}>\n                        {\n                            isCompleted ?\n                                <span>No action required</span>\n                                :\n                                <>\n                                    {\n                                        showReplacePower || showPowerMatchPower || showIncrementOrDecrementPower\n                                            ?\n                                            <>\n                                                {\n                                                    showReplacePower && !hasReplaced &&\n                                                    <button className={classes.__btn__} onClick={() => {\n                                                        onReplace()\n                                                        _onReplace()\n                                                    }}>\n                                                        <Replace style={{height: 'auto'}} size={39}/>\n                                                    </button>\n                                                }    \n\n                                                {\n                                                    showPowerMatchPower &&\n                                                    <button className={classes.__btn__} onClick={onPowerMatch}>\n                                                        <img src={boltIcon} width={40} height={40}/>\n                                                    </button>\n                                                }\n\n                                                {\n                                                    showIncrementOrDecrementPower &&\n                                                    <>\n                                                        <button className={classes.__btn__}>\n                                                            <Plus style={{height: 'auto'}} size={39} onClick={onIncrease}/>\n                                                        </button>\n\n                                                        <button className={classes.__btn__}>\n                                                            <Minus style={{height: 'auto'}} size={39} onClick={onDecrease}/>\n                                                        </button>\n                                                    </>\n                                                }\n                                            </>\n                                            :\n                                            <span>All your Powers have been used</span>\n                                    }\n                                </>\n                        }\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nGameCard.propTypes = {\n    isSelected: PropTypes.bool,\n    showCardPopup: PropTypes.bool,\n    isCompleted: PropTypes.bool,\n    image: PropTypes.string,\n    styles: PropTypes.object,\n    onClick: PropTypes.func,\n    card: PropTypes.object,\n    inventory: PropTypes.object,\n    activeCard: PropTypes.object,\n    showPowerMatchPower: PropTypes.bool,\n    showReplacePower: PropTypes.bool,\n    showIncrementOrDecrementPower: PropTypes.bool,\n    time: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    hoverShadow: PropTypes.bool,\n    onIncrease: PropTypes.func,\n    onDecrease: PropTypes.func,\n    onPowerMatch: PropTypes.func,\n    onReplace: PropTypes.func\n}\n\nexport default GameCard\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeader/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Alert/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Sidebar/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Progress/index.js",["767"],"import React, { useEffect, useState, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\nimport classes from './progressBar.module.scss';\n\nconst ProgressBar = props => {\n    const [offset, setOffset] = useState(0);\n    const circleRef = useRef(null);\n    const {\n        size = 0,\n        progress = 0,\n        maxProgress = 0,\n        strokeWidth = 0,\n        circleOneStroke = 0,\n        circleTwoStroke = 0,\n    } = props || {};\n\n    const center = size / 2;\n    const radius = size / 2 - strokeWidth / 2;\n    const circumference = 2 * Math.PI * radius;\n\n    useEffect(() => {\n        const progressOffset = ((maxProgress - progress) / maxProgress) * circumference;\n        setOffset(progressOffset);\n        circleRef.current.style = 'transition: stroke-dashoffset 850ms ease-in-out;';\n    }, [setOffset, circumference, progress, offset]);\n\n    return (\n        <>\n            <svg\n                className={classes.__svg}\n                width={size}\n                height={size}\n            >\n                <circle\n                    className={classes.__svg_circle_bg}\n                    stroke={circleOneStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                />\n                <defs>\n                    <linearGradient id=\"gradient\" x1={0} y1={0} x2={0} y2={maxProgress}>\n                        <stop offset={0} stopColor=\"#e3610a\" />\n                        <stop offset={maxProgress} stopColor={circleTwoStroke} />\n                    </linearGradient>\n                </defs>\n                <circle\n                    className={classes.__svg_circle}\n                    ref={circleRef}\n                    stroke=\"url(#gradient)\"\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                    strokeDasharray={circumference}\n                    strokeDashoffset={offset}\n                    transform={`rotate(-90 ${center} ${center})`}\n                />\n                <text x={center} y={center} className={classes.__svg_circle_text}>\n                            {progress}\n                    </text>\n                    <text className={classes.__svg_circle_text_2} x={center} y={center + 20}>\n                            Sec\n                    </text>\n            </svg>\n        </>\n    )\n}\n\nProgressBar.propTypes = {\n    size: PropTypes.number.isRequired,\n    progress: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    circleOneStroke: PropTypes.string.isRequired,\n    circleTwoStroke: PropTypes.string.isRequired\n}\n\nexport default ProgressBar;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Info.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shuffle.js",[],["768","769"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Arrow.js",[],["770","771"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowDown.js",[],["772","773"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Tick.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowUp.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeaderCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/SidebarButton/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Time.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPicks/index.js",["774","775","776","777","778","779"],"import React, { useState } from 'react'\nimport { useMediaQuery } from 'react-responsive'\n\nimport Headers from '../../components/Header/Header'\nimport Sidebar from '../../components/Sidebar'\nimport Footer from '../../components/Footer/Footer'\nimport PowerPickCard from '../../components/PowerpickCard'\nimport ButtonDropdown from '../../components/ButtonDropdown'\nimport classes from './index.module.scss'\nimport PowerPickInfoCard from '../../components/PowerPickInfoCard'\nimport PlayerImage from '../../assets/player.png'\nimport Button from '../../components/Button'\nimport AngleIcon from '../../icons/AngleIcon'\nimport Cell from '../../components/Cell'\n\nconst listItems = [\n    { title: 'Football', value: 'football' },\n    { title: 'Basketball', value: 'basketball' }\n]\n\nfunction PowerPicksPage() {\n    const [selected, setSelected] = useState('')\n    const isTableOrMobile = useMediaQuery({query: '(max-width: 1224px)'})\n    return (\n        <>\n            <Headers />\n            <div className={classes.wrapper}>\n                <div className={classes.page_left}>\n                    <div className={classes.header}>\n                        <div className={classes.header_top}>\n                            <h1><span className={classes.h1_orange}>Power</span><span>Picks</span></h1>\n                            <p>Power up your sports bets with our proven winning system!</p>\n                        </div>\n\n                        <div className={classes.header_bottom}>\n                            {\n                                !isTableOrMobile ?\n                                    <>\n                                        <PowerPickCard shadow>\n                                            <p>Spread</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n\n                                        <PowerPickCard shadow>\n                                            <p>Winner</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n\n                                        <PowerPickCard shadow>\n                                            <p>Over/Under</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n                                    </>\n                                    :\n                                    <div className={classes.header_bottom_mobile}>\n                                    <PowerPickCard shadow styles={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', fontSize: '16px'}}>\n                                        <div>\n                                            <p>Spread</p>\n                                            <span>54%</span>\n                                        </div>\n\n                                        <div>\n                                            <p>Winner</p>\n                                            <span>54%</span>\n                                        </div>\n\n                                        <div>\n                                            <p>Over/Under</p>\n                                            <span>54%</span>\n                                        </div>\n                                        </PowerPickCard>\n                                    </div>    \n                            }\n                        </div>\n                    </div>\n\n                    <div className={classes.content_left}>\n                        <div className={classes.content_header}>\n                            <div className={classes.content_header_left}>\n                                <p>Show Decimal Odds</p>\n                                {\n                                    isTableOrMobile &&\n                                        <p>Confidence Levels</p>\n                                }\n                            </div>\n\n                            <div className={classes.content_header_right}>\n                                <ButtonDropdown elements={listItems} selected={listItems[0]} onChange={(e) => {\n                                    setSelected(e?.target?.value)\n                                    }} isActive styles={{margin: '0 5px'}} />\n                                \n                                <Button title=\"NHL\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"NBA\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"NFL\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"MLB\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n                            </div>\n                        </div>\n                    \n                        <div className={classes.content_body}>\n                            {\n                                !isTableOrMobile ?\n                                    <PowerPickCard styles={{width: '100%'}}>\n                                        <PowerPickInfoCard\n                                            showHeader\n                                            game1={{\n                                                isCell: true,\n                                                cellTitle: \"Bengals +3.5\",\n                                                highCell: true,\n                                             }}\n                                            game2={{\n                                                isCell: true,\n                                                cellTitle: \"Saints to Win\",\n                                                mediumCell: true,\n                                            }}\n                                            game3={{\n                                                isCell: true,\n                                                cellTitle: \"U 45.5\",\n                                                veryLowCell: true,\n                                            }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                    </PowerPickCard>\n                                    :\n                                    <>\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isCell: true,\n                                                cellTitle: \"Bengals +3.5\",\n                                                highCell: true,\n                                            }}\n                                            game2={{\n                                                isCell: true,\n                                                cellTitle: \"Saints to Win\",\n                                                mediumCell: true,\n                                            }}\n                                            game3={{\n                                                isCell: true,\n                                                cellTitle: \"U 45.5\",\n                                                veryLowCell: true,\n                                            }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                    </>\n                            }\n                        </div>\n                        <div className={classes.content_body_footer}>\n                            <strong>Log in to reveal <span>More Picks!</span> </strong>\n                            <Button title=\"Log in\" icon={null} block style={{width: isTableOrMobile ? '80%' : '30%', height: '52px'}} />\n\n                            {\n                                !isTableOrMobile &&\n                                <div className={classes.content_body_footer_bottom}>\n                                    <AngleIcon style={{height: 'auto', position: 'absolute', bottom: '10px', left: '20px', zIndex: '-1'}} />\n                                    <img src={PlayerImage} width={316} height={330} />\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                {\n                    !isTableOrMobile &&\n                        <div className={classes.page_sidebar}>\n                        <Sidebar styles={{width: '18%'}}>\n                            <div className={classes.sidebar}>\n                                <h2>Confidence Level</h2>\n                                <Cell high text=\"HIGH\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell medium text=\"MEDIUM\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell low text=\"LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell veryLow text=\"VERY LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                            </div>\n                        </Sidebar>\n                        </div>\n                }\n            </div>\n            <Footer isBlack />\n        </>\n    )\n}\n\nexport default PowerPicksPage\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerpickCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/ChaseACard/index.js",["780","781"],"import React, {useState, useEffect} from 'react'\n\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport CardsSvg from '../../icons/Cards'\nimport CardBack from '../../assets/card_back.png'\nimport ProgressBar from '../../components/Progress'\nimport { CONSTANTS } from '../../utility/constants'\nimport Alert from '../../components/Alert'\nimport classes from './cardGamePage.module.scss'\nimport { redirectTo } from '../../utility/shared'\n\n// const MAX_TIMER = 5;\n\nfunction ChaseACard(props) {\n    // const [timer, setTimer] = useState(MAX_TIMER)\n    const [cards, setCards] = useState([])\n    const [hasWon, setHasWonState] = useState(false)\n    const [hasCardSelected, setHasCardSelected] = useState(false)\n    const [spadeCardIndex, setSpadeCardIndex] = useState(null)\n\n    useEffect(() => {\n        resetAllState()\n        generateCards()\n    }, [])\n\n    // useEffect(() => {\n    //     let timeOut = null\n    //     if (timer > 0 && hasCardSelected) {\n    //     let _timer = timer\n    //         timeOut = setInterval(() => { \n    //             _timer -= 1\n    //             setTimer(_timer)\n    //         }, 1000)\n    //     } else {\n    //         clearInterval(timeOut)\n    //     }\n\n    //     return () => {\n    //         return clearInterval(timeOut)\n    //     }\n    //  }, [timer, hasCardSelected])\n\n    function resetAllState() {\n        // setTimer(MAX_TIMER)\n        setCards([])\n        setSpadeCardIndex(null)\n        setHasCardSelected(false)\n        setHasWonState(false)\n    }\n\n    function onCardClick (card, index) {\n        if(hasWon || hasCardSelected) return\n\n        const { isSelected = false, card: { suit, rank } = {} } = card || {}\n        \n        let _isSelected = isSelected\n        _isSelected = true;\n        card.isSelected = _isSelected\n\n        const _selectedCards = [...cards]\n        _selectedCards[index] = card\n\n        setHasCardSelected(true)\n        setCards(_selectedCards)\n\n        if (suit === CONSTANTS.CARD_SUITS.SPADE && CONSTANTS.CARD_RANKS[rank] === \"A\") {\n            return setHasWonState(true)\n        }\n     }\n\n    function generateCards() {\n        const _cards = []\n        for (let suit = 1; suit <= 4; suit++) {\n            for (let rank = 0; rank < 13; rank++) {\n                const _card = {}\n                _card.card = card(suit, rank)\n                _card.isSelected = false\n                _cards.push(_card)\n            }\n        }\n\n        shuffleCards(_cards)\n        let spadeOfAceIndex = _cards.findIndex(_card => _card?.card?.suit === CONSTANTS.CARD_SUITS.SPADE && _card?.card?.rank === 12)\n        setSpadeCardIndex(spadeOfAceIndex)\n        setCards(_cards)\n    }\n\n    function shuffleCards(cards = []) {\n        for (let i = cards.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [cards[i], cards[j]] = [cards[j], cards[i]]\n        }\n    }\n\n    function onRevealCard() {\n        if(hasWon) return\n\n        let spadeOfAce = cards[spadeCardIndex]\n        const revealCard = {\n            card: spadeOfAce?.card,\n            isSelected: true\n        }\n\n        const _cards = [...cards]\n        _cards[spadeCardIndex] = revealCard\n        setCards(_cards)\n    }\n\n    function card(suit, rank) {\n        return {\n            suit,\n            rank\n        }\n    }\n\n    return (\n        <>\n            <Header />\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Chase The Ace\" />\n                    <div className={classes._card_game_content_top}>\n                            <CardsSvg style={{display: 'flex', height: 'auto'}} />\n                        <p className={classes.__card_game_card_counter}>Chase The Ace Round</p>\n                        <p className={classes.__card_game_info}> Select one card and if it's the Ace of Spades, you win $2000 CAD! </p>\n                    </div>\n\n                    <div className={`${classes.__card_game_content_body}`}>\n                        {\n                            hasCardSelected &&\n                            <div className={`${classes.__card_game_content_game_end} ${hasWon ? classes.__card_game_content_game_end_success : classes.__card_game_content_game_end_failed}`}\n                                onClick={onRevealCard}\n                            >\n                                    <Alert danger={!hasWon} success={hasWon} renderMsg={() => (\n                                        <p style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                                            {hasWon ? `Congratulations! You are a winner!` : `Sorry, you did not find the Ace of Spade. Try again tomorrow at 8:00PM ET.`}\n                                        </p>)\n                                }   />\n                                </div>\n                        }\n                        <Card>\n                            <p>\n                                Ace of Spade Located At Number: {spadeCardIndex + 1}\n                                <br /> Note: For testing purpose only\n                            </p>\n                            {\n                                // hasCardSelected &&\n                                // <div className={`${classes.__card_game_timer_wrapper} ${classes.dashed_repeating_gradient}`}>\n                                //     <ProgressBar\n                                //         progress={timer}\n                                //         maxProgress={5}\n                                //         size={62}\n                                //         strokeWidth={4}\n                                //         circleOneStroke='grey'\n                                //         circleTwoStroke='#fff'\n                                //     />\n                                //     <p>\n                                //         Want another chance? \n                                //     </p>\n                                //     <button className={`${'__btn __style-3 __large-btn'} ${classes.__card_game_card_top_btn}`}>\n                                //         <span>$5.00</span> Activate Pick +\n                                //     </button>\n                                //     <strong>\n                                //         Activate for Free\n                                //     </strong>\n                                // </div>\n                            }\n                            <div className={classes.__card_game_content_cards}>\n                                {\n                                    cards.map(\n                                        (card, index) => {\n                                            const { card: selectedCard = {}, isSelected: isCardSelected = false } = card || {}\n                                            return (\n                                                <GameCard\n                                                    key={card + index.toString()}\n                                                    isSelected\n                                                    card={selectedCard}\n                                                    image={!isCardSelected ? CardBack : null}\n                                                    onClick={() => onCardClick(card, index)}\n                                                    styles={{\n                                                        width: '76px',\n                                                        height: '104px',\n                                                        margin: '5px 3.5px'\n                                                    }}\n                                                    width={76}\n                                                    height={104}\n                                                    hoverShadow={!isCardSelected}\n                                                />\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            {\n                                hasCardSelected && !hasWon &&\n                                <div className={classes.card_footer}>\n                                    <button className={`${'__btn'}`} onClick={() => {\n                                        return redirectTo(props, {\n                                            path: '/card-game'\n                                        })\n                                    }}>\n                                        Try again\n                                    </button>\n                                </div>\n                            }\n                        </Card>\n                    </div>                \n                </div>  \n            </div>\n            <Footer isBlack />\n        </>\n    )\n}\n\nexport default ChaseACard\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/shared.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown/index.js",["782"],"import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport classes from './index.module.scss'\n\nfunction ButtonDropdown(props) {\n    const [isVisible, setVisibleState] = useState(false)\n    const [_selected, setSelected] = useState({})\n    const { elements = [], selected = {}, onChange = () => { }, isActive = false, styles = {} } = props || {}\n\n    useEffect(() => {\n        if(!selected && elements.length)\n            onSelectListItem(elements[0])\n        else \n            onSelectListItem(selected)\n    }, [selected])\n\n    const toggleList = () => {\n        setVisibleState(!isVisible)\n    }\n\n    const onSelectListItem = (item) => {\n        setSelected(item)\n        setVisibleState(false)\n    }\n\n\n    return (\n        <div className={`${classes.select_container_1} ${isActive && classes.selected}`} style={styles}>\n            <div className={classes.select_header}>\n                <button onClick={toggleList}>\n                    <span>NCCA</span> <br /> {_selected?.title}\n                </button>\n            </div>\n\n        {\n            isVisible &&\n                <div className={classes.select_body}>\n                    {\n                        elements.length && elements.map((itm, index) => <button\n                            key={itm.title + index.toString()}\n                            className={`${index !== elements.length - 1 && classes.divider} ${index === 0 && classes.borderRadiusTop} \n                            ${index === elements.length - 1 && classes.borderRadiusBottom}`} onClick={() => {\n                                onSelectListItem(itm)\n                                onChange(itm)\n                            }}>\n                            {itm.title}</button>)\n                    }\n                </div>\n\n        }\n        </div>\n    )\n}\n\nButtonDropdown.propTypes = {\n    elements: PropTypes.array,\n    selected: PropTypes.object,\n    isActive: PropTypes.bool,\n    onChange: PropTypes.func,\n    styles: PropTypes.object\n}\n\nexport default ButtonDropdown\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calendar2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Pinnacle.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Cell/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellHigh.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellMedium.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellLow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellVeryLow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Button/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AngleIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Input/Input.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Eye.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/NoPick.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/GetUserInfoPage/GetUserInfoPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Select/Select.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/CheckBox/CheckBox.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/constants.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Replace.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PlusAndMinus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Plus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Minus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/Games.js",["783","784"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useMediaQuery } from 'react-responsive'\nimport { useHistory } from 'react-router-dom'\n\nimport NoPick from '../NoPick'\nimport Cell from '../Cell'\nimport Button from '../Button'\nimport NoPickIcon from '../../icons/NoPick'\nimport { redirectTo } from '../../utility/shared'\nimport { Redirect } from 'react-router-dom'\n\nfunction Games(props) {\n    const {\n        isNoPick = false,\n        cellTitle = '',\n        isPowerUp = false,\n        isCell = false,\n        mediumCell = false,\n        highCell = false,\n        lowCell = false,\n        veryLowCell = false,\n        onPowerUp = () => { }\n    } = props || {}\n    const isTableOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\n    const history = useHistory()\n    return (\n        <>\n            {\n                isNoPick &&\n                    <NoPick icon={<NoPickIcon style={{height: 'auto'}} size={isTableOrMobile && 33} />} />\n            }\n            \n            {\n                isCell &&\n                    <Cell high={highCell} medium={mediumCell} low={lowCell} veryLow={veryLowCell} text={cellTitle} size={isTableOrMobile && 33} />\n            }\n\n            {\n                isPowerUp &&\n                <Button title=\"POWER UP!\" onClick={() => {\n                    onPowerUp()\n                    history.push(\"/power-up\")\n                }} styles={{ width: '100px', fontSize: '13px' }} />\n            }\n        </>\n    )\n}\n\nGames.propTypes = {\n    isNoPick: PropTypes.bool,\n    isCell: PropTypes.bool,\n    isPowerUp: PropTypes.bool,\n    cellTitle: PropTypes.string,\n    mediumCell: PropTypes.bool,\n    highCell: PropTypes.bool,\n    lowCell: PropTypes.bool,\n    veryLowCell: PropTypes.bool,\n    onPowerUp: PropTypes.func\n}\n\nexport default Games","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeIconNumbers.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerUpPage/PowerUpPage.js",["785","786","787"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty, isEqual } from 'lodash';\n\nimport Header from '../../components/Header/Header';\nimport Footer from '../../components/Footer/Footer';\nimport './PowerUpPage.scss';\nimport Input from '../../ui/Input/Input';\nimport Alert from '../../components/Alert';\nimport { redirectTo } from '../../utility/shared';\nimport http from '../../config/http';\nimport { URLS } from '../../config/urls';\n\nconst INITIAL_STATE = { username: '', email: '', password: '', cPassword: '', isLoading: false, isSuccess: false, isFailed: false, errorMsg: '', message: '' }\n\nconst PowerUpPage = props => {\n    const [user, setUser] = useState(INITIAL_STATE);\n\n    useEffect(() => { \n        \n        if (user.isSuccess) {\n            redirectTo(props, {path: 'login'})\n        }\n\n    }, [user]);\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        const { username = '', email = '', password = '', cPassword = '' } = user || {}\n        setUser({ ...user, isLoading: true });\n        \n\n        if (isEmpty(username) || isEmpty(email) || isEmpty(password) || isEmpty(cPassword)) {\n            return setUser({...user, isFailed: true, errorMsg: 'All fields are required'})\n        }\n\n        if (!isEqual(password, cPassword)) {\n            return setUser({...user, isFailed: true, errorMsg: 'Password did not match'})\n        }\n\n        const data = {\n            // type: 'register',\n            // user: {\n                username,\n                email,\n                password\n            // }\n        }\n\n        const response = await http.post(URLS.AUTH.REGISTER, data);\n        if (response.data.status === false) {\n            return setUser({ ...user, isLoading: false, isFailed: true, errorMsg: response.data.message });\n        }\n\n        setUser({...user, isLoading: false, isSuccess: true, errorMsg: response.data.message})\n        // props.history.push('/user-profile-info')\n    }\n\n    return (\n        <div className='__PowerUpPage'>\n            <Header isStick={true} />\n            <div className='__background-section'>\n                <div className='__background-color'>\n                    <div className='__center __mt-7 __sign-in-container'>\n                        <div className='__inline-block'>\n                            <div className='__viewport-title __ml-1 __mb-1 __mr-1 __primary __m-a __h3 __bold __p-s __h4-on-small'>Get ready to Power-up!</div>\n                            <div className='__viewport-subtitle __h6 __mediam-on-small'>Let’s start your new experience our ground-breaking live-play <br className='__hide-on-small' /> games where you have the Power to control your destiny!</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='__sign-in-section __form-section'>\n                <div className='__form-wrapper __sign-in-container'>\n                    <form className='__sign-in-form __container' action={null} onSubmit={onSubmit}>\n                        {\n                            !user?.isFailed && !isEmpty(user.errorMsg) &&\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} danger />\n                        }\n                        {\n                            user.isFailed && !isEmpty(user.errorMsg) &&\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} danger />\n                        }\n\n                        {\n                            user.isSuccess && !isEmpty(user.errorMsg) &&\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} success />\n                        }\n                        \n                        <Input type='text' title='Username' id='username' value={user.username} onChange={(e) => {\n                            setUser({ ...user, username: e?.target?.value })\n                        }} />\n                        <Input type='email' title='E-mail' id='email' value={user.email} onChange={(e) => {\n                            setUser({ ...user, email: e?.target?.value })\n                        }} />\n                        <Input type='password' title='Create-a-password' id='password' value={user.password} onChange={(e) => {\n                            setUser({ ...user, password: e?.target?.value })\n                        }} />\n                        <Input type='password' title='Confirm your password' id='confirmpassword' value={user.cPassword} onChange={(e) => { setUser({ ...user, cPassword: e?.target?.value }) }} />\n                        <button className='__btn __h4 __submit-btn __uppercase __block __h5-on-small' disabled={user.isLoading}>\n                            {\n                                user.isLoading\n                                    ?\n                                    'Loading...'\n                                    :\n                                    'Next'\n                            }\n                        </button>\n                    </form>\n                    <div className='__center __mt-4 __already-have-an-account'>Already have an account? <Link to='/login' className='__login-link'>Log in!</Link></div>\n                </div>\n            </div>\n            <Footer isBlack={true} />\n        </div>\n    )\n}\n\nexport default PowerUpPage;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/TimerClock/TimerClock.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/FAQ/index.js",["788"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from \"../../components/Header/Header\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Footer from \"../../components/Footer/Footer\";\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass FAQ extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=3\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          result = result.records;\n          this.setState({\n            content: result[2].content,\n          });\n        },\n        (error) => {\n          this.setState({\n            hasError: true,\n            error: error,\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>FAQ</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(FAQ);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Privacy/index.js",["789"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\n\nclass ResponsibleGaming extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=2\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[1].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n       <Header />\n\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>Privacy Policy</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div className=\"_faq_cont\"\n                dangerouslySetInnerHTML={{ __html: this.state.content }} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ResponsibleGaming);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TrustAndSafety/index.js",["790"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass TrustAndSafety extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=4\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[3].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>TRUST AND SAFETY</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TrustAndSafety);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountSecurity/index.js",["791"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass AccountSecurity extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=5\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[4].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>ACCOUNT SECURITY</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurity);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TermsOfUse/index.js",["792"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass TermsOfUse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=1\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[0].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>Terms Of Use</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TermsOfUse);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/global/constants.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/NoPick/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/Hearts.js",["793"],"import React from 'react';\n\nimport { HeartsIcons } from './HeartsIcons'\nimport HeartJack from './HeartJack'\nimport HeartKing from './HeartKing';\nimport HeartQueen from './HeartQueen';\nimport HeartAce from './HeartAce';\n\nconst Hearts = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return HeartsIcons.twos()\n            \n            case \"3\":\n                return HeartsIcons.threes()\n            \n            case \"4\":\n                return HeartsIcons.fours()\n            \n            case \"5\":\n                return HeartsIcons.fives()\n            \n            case \"6\":\n                return HeartsIcons.sixs()\n            \n            case \"7\":\n                return HeartsIcons.sevens()\n            \n            case \"8\":\n                return HeartsIcons.eights()\n            \n            case \"9\":\n                return HeartsIcons.nines()\n            \n            case \"10\":\n                return HeartsIcons.tens()\n            \n            case \"J\":\n                return <HeartJack />\n            \n            case \"K\":\n                return <HeartKing />\n            \n            case \"A\":\n                return <HeartAce />\n            \n            case \"Q\":\n                return <HeartQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"15\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-90\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Hearts;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartsIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/Spades.js",["794"],"import React from 'react';\n\nimport { SpadeNumbers } from './SpadeIconNumbers'\nimport SpadeKing from './SpadeKing';\nimport SpadeJack from './SpadeJack';\nimport SpadeQueen from './SpadeQueen';\nimport SpadeAce from './SpadeAce';\n\nconst Spades = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return SpadeNumbers.twos()\n            \n            case \"3\":\n                return SpadeNumbers.threes()\n            \n            case \"4\":\n                return SpadeNumbers.fours()\n            \n            case \"5\":\n                return SpadeNumbers.fives()\n            \n            case \"6\":\n                return SpadeNumbers.sixs()\n            \n            case \"7\":\n                return SpadeNumbers.sevens()\n            \n            case \"8\":\n                return SpadeNumbers.eights()\n            \n            case \"9\":\n                return SpadeNumbers.nines()\n            \n            case \"10\":\n                return SpadeNumbers.tens()\n            \n            case \"J\":\n                return <SpadeJack />\n            \n            case \"K\":\n                return <SpadeKing />\n            \n            case \"A\":\n                return <SpadeAce />\n            \n            case \"Q\":\n                return <SpadeQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Spades;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/Diamonds.js",["795"],"import React from 'react';\nimport DiamondAce from './DiamondAce';\n\nimport { DiamondIcons } from './DiamondIcons'\nimport DiamondJack from './DiamondJack';\nimport DiamondKing from './DiamondKing'\nimport DiamondQueen from './DiamondQueen';\n\nconst Diamonds = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return DiamondIcons.twos()\n            \n            case \"3\":\n                return DiamondIcons.threes()\n            \n            case \"4\":\n                return DiamondIcons.fours()\n            \n            case \"5\":\n                return DiamondIcons.fives()\n            \n            case \"6\":\n                return DiamondIcons.sixs()\n            \n            case \"7\":\n                return DiamondIcons.sevens()\n            \n            case \"8\":\n                return DiamondIcons.eights()\n            \n            case \"9\":\n                return DiamondIcons.nines()\n            \n            case \"10\":\n                return DiamondIcons.tens()\n            \n            case \"J\":\n                return <DiamondJack />\n            \n            case \"K\":\n                return <DiamondKing />\n            \n            case \"A\":\n                return <DiamondAce />\n            \n            case \"Q\":\n                return <DiamondQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Diamonds;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/Clubs.js",["796"],"import React from 'react';\nimport ClubAce from './ClubAce';\n\nimport { ClubIcons } from './ClubIcons'\nimport ClubJack from './ClubJack';\nimport ClubKing from './ClubKing';\nimport ClubQueen from './ClubQueen';\n\nconst Clubs = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return ClubIcons.twos()\n            \n            case \"3\":\n                return ClubIcons.threes()\n            \n            case \"4\":\n                return ClubIcons.fours()\n            \n            case \"5\":\n                return ClubIcons.fives()\n            \n            case \"6\":\n                return ClubIcons.sixs()\n            \n            case \"7\":\n                return ClubIcons.sevens()\n            \n            case \"8\":\n                return ClubIcons.eights()\n            \n            case \"9\":\n                return ClubIcons.nines()\n            \n            case \"10\":\n                return ClubIcons.tens()\n            \n            case \"J\":\n                return <ClubJack />\n            \n            case \"K\":\n                return <ClubKing />\n            \n            case \"A\":\n                return <ClubAce />\n            \n            case \"Q\":\n                return <ClubQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Clubs;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/index.js",["797"],"import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CONSTANTS } from '../../utility/constants'\nimport Clubs from './Club/Clubs';\nimport Spade from './Spade/Spades';\nimport Hearts from './Hearts/Hearts';\nimport Diamonds from './Diamond/Diamonds';\n\nfunction Cards(props) {\n    const { card: { suit = 0, rank = 0 } = {} } = props || {}\n    \n    const renderCard = (suit, rank) => {\n        let _rank = CONSTANTS.CARD_RANKS[rank]\n        switch (suit) {\n            case CONSTANTS.CARD_SUITS.DIAMOND:\n                return <Diamonds style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.CLUB:\n                return <Clubs style={{height: 'auto', margin: '0', padding: '0'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.HEART:\n                return <Hearts style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.SPADE:\n                return <Spade style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n        }\n    }\n\n    return (\n        <>\n          {renderCard(suit, rank)}  \n        </>\n    )\n}\n\nCards.propTypes = {\n    card: PropTypes.object\n}\n\nexport default Cards\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ReverseTimer/ReverseTimer.js",["798"],"import React, { useEffect, useState } from 'react';\nimport './ReverseTimer.scss';\n\nconst ReverseTimer = props => {\n    const { maxSec = 5, className } = props;\n    const [currentSec, setCurrentSec] = useState(maxSec);\n    useEffect(() => {\n        let initialTimer = maxSec;\n        const timer = setInterval(() => {\n            if (initialTimer <= 0) return clearInterval(timer);\n            setCurrentSec(--initialTimer);\n        }, 1000);\n        return () => clearInterval(currentSec);\n    }, [])\n    return (\n        <div className={`base-timer __relative ${className}`}>\n            <svg viewBox=\"0 0 100 100\" className='__primary-color'>\n                <g className=\"base-timer__circle\">\n                    <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\n                    <path\n                        strokeDasharray={`${(maxSec - currentSec) / maxSec * 283} 283`}\n                        className=\"base-timer__path-remaining\"\n                        d=\"\n                        M 50, 50\n                        m -45, 0\n                        a 45,45 0 1,0 90,0\n                        a 45,45 0 1,0 -90,0\n                    \"\n                    ></path>\n                </g>\n            </svg>\n            <div className='__absolute __time-left __center'>\n                <span className='__h5 __bold'>{currentSec}</span>\n                <div className='__smaller'>Sec</div>\n            </div>\n        </div >\n    )\n}\n\nexport default ReverseTimer;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGameBall/BingoGameBall.js",["799"],"import React, { useState } from 'react';\nimport './BingoGameBall.scss';\nimport ShuffleIcon from '../../assets/ShuffleIcon.png';\nimport ReplaceAllIcon from '../../assets/ReplaceAllIcon.png';\nimport PowerMatchIcon from '../../assets/PowerMatchIcon.png';\nimport IncreaseIcon from '../../assets/IncreaseIcon.png';\nimport DecreaseIcon from '../../assets/DecreaseIcon.png';\n\nconst BingoGameBall = props => {\n    const [isActive, setActive] = useState(props.active || false)\n    return (\n        <div className={`__BingoGameBall __relative __flex __flex-center ${isActive ? 'active' : ''}`} onClick={() => setActive(old => !old)}>\n            <div className='__ball-number __flex __flex-center __absolute'>{props.children}</div>\n            <div className='__absolute __ball-actions-wrapper __primary-color'>\n                <div className='__triangle __absolute'></div>\n                <div className='__flex __ball-actions'>\n                    <img alt='' src={ShuffleIcon} />\n                    <img src={ReplaceAllIcon} alt='' />\n                    <img src={PowerMatchIcon} alt='' />\n                    <img src={IncreaseIcon} alt='' />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BingoGameBall;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoInProgressGame/BingoInProgressGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPlays/PowerPlays.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame/BingoGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame2/BingoGame2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/store.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducer.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/cardGameReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/cardGameAction.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Login/index.js",["800"],"import React, {useEffect, useState} from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport classes from './index.module.scss'\nimport Footer from '../../components/Footer/Footer'\nimport Header from '../../components/Header/Header'\nimport SignInImage from '../../assets/signin-background.png'\nimport Input from '../../components/Input'\nimport { CONSTANTS } from '../../utility/constants'\nimport { authenticate } from '../../actions/authActions';\nimport Alert from '../../components/Alert';\nimport { isEmpty } from 'lodash';\nimport { getLocalStorage, redirectTo } from '../../utility/shared';\n\nfunction LoginPage(props) {\n    const [user, setUser] = useState({ email: '', password: '' });\n\n    const dispatch = useDispatch();\n    const { loading = false, user: authUser = {} } = useSelector((state) => state.auth);\n    const { token = '', status: loggedIn = false, message = '' } = authUser || {}\n    \n    useEffect(() => {\n        if (loggedIn === true && !isEmpty(authUser)) {\n            redirectTo(props, {path: '/my-game-center/contests'})\n        }\n    }, [loggedIn, authUser])\n    \n    const onLoginSubmit = async (e) => {\n        e?.preventDefault();\n        \n        if (isEmpty(user.email) || isEmpty(user.password)) {\n            //error message\n            return;\n        }\n\n        dispatch(authenticate(user));\n    }\n    \n    const redirect = () => {\n        if (!isEmpty(token) || !isEmpty(getLocalStorage(CONSTANTS.LOCAL_STORAGE_KEYS.USER))) {\n            const { location: { state = {} } = {} } = props || {}\n            \n            return <Redirect to={!isEmpty(state) ? state?.from : '/'} />\n        }\n    }\n\n    return (\n        <>\n            <Header />\n            <div className={classes.wrapper}>\n                <div className={classes.back_drop} />\n                <div className={classes.header}>\n                    <img src={SignInImage} alt=\"\" className={classes.header_image} />\n                    \n                    <div className={classes.header_content}>\n                        <p className={classes.header_title}>Get ready to Power-up!</p>\n                        <p className={classes.header_p}>\n                        Let’s start your new experience our ground-breaking live-play games where you have the Power to control your destiny!\n                        </p>\n                    </div>\n                </div>\n\n                <div className={classes.content_wrapper}>\n                    <div className={classes.content_top_skew} />\n                    <div className={classes.content_card}>\n                        {\n                            !isEmpty(authUser) && !loggedIn &&\n                            <>\n                                <Alert renderMsg={() => <p>{message}</p>} danger />\n                                <br />\n                            </>\n                        }\n                        {\n                            !isEmpty(authUser) && loggedIn &&\n                            <>\n                                <Alert renderMsg={() => <p>Login Success</p>} success />\n                                <br />\n                            </>\n                        }\n                        <form onSubmit={onLoginSubmit}>\n                            <Input type=\"text\" block rounded label=\"E-mail\" required value={user.email} onChange={(e) => {\n                                setUser({...user, email: e?.target?.value})\n                            }} bordered />\n                            <Input type=\"password\" block rounded label=\"Password\" required value={user.password} onChange={(e) => {\n                                setUser({...user, password: e?.target?.value})\n                            }} bordered />\n                            <button className={`${'__btn __large-btn'} ${classes.login_btn}`} type=\"submit\" disabled={loading || (isEmpty(user.email) || isEmpty(user.password))}>\n                                {\n                                    loading ?\n                                        'Loading...'\n                                        :\n                                        'Log in'\n                                }\n                            </button>\n                        </form>\n                        <br />\n                    </div>\n\n                    <p className={classes.content_footer_p}>\n                        Don't have an account? <Link to=\"/\">Click here to Power-up!</Link>\n                    </p>\n                </div>\n            </div>\n            <Footer isBlack />\n            {\n                redirect()\n            }\n        </>\n    )\n}\n\nexport default LoginPage\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Input/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/RoyalGame/index.js",["801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\n\nimport {flushList, getIndexOfArrayElement, hasPowerRoyalsCard, isPowerRoyalCard, royalFlush, redirectTo} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport { getRandomCard } from '../../utility/shared'\nimport {\n    setPowerCardState,\n    resetPowerRoyalsCardState,\n    powerRoyalsGameInventory\n} from '../../actions/powerRoyalsActions'\nimport { differenceWith, isEmpty, isEqual } from 'lodash'\nimport classes from './cardGamePage.module.scss'\n\nconst INITIAL_STATE = {\n    collectedCards: [{}, {}, {}, {}, {}],\n    activeCard: {}\n}\nconst TOTAL_ROUNDS = 2;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = [{}, {}, {}, {}, {}]\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction PowerRoyalsGame(props) {\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\n    const [isDroppable, setIsDroppable] = useState(false)\n    const [isRoundCompleted, setIsRounCompleted] = useState(false)\n    const [isGameCompleted, setGameCompleted] = useState(false)\n\n    const dispatch = useDispatch();\n    const { collectedCards = [],\n        inventory = {}\n    } = useSelector(state => state.powerRoyals)\n\n    const {\n        replace = 0, replaceAll = 0, newHands = 0,\n        powerMatch = 0, increaseOrDecrease = 0\n    } = inventory || {}\n    \n    useEffect(() => { \n        dispatch(resetPowerRoyalsCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n        \n        return function clearnup() {\n            return clearInterval(timeOut)\n        }\n    }, [currentCard, currentRound, selectedRoundCard, isRoundCompleted])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if (!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            hasRoundCompleted()\n            timeOut = setInterval(() => {\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n\n                    if (!isDroppable && _currentCard >= 4) {\n                        setIsDroppable(true)\n                    } \n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else if (isRoundCompleted) {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetGameState = () => {\n        for (let i = 0; i < 5; i++) {\n            cardsArr[i] = {}\n        }\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState(INITIAL_STATE)\n        setCurrentCard(_currentCard)\n        setIsDroppable(false)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setIsReplaceAllState(false)\n        setSelectedRoundCard(null)\n        dispatch(setPowerCardState([]))\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n        \n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\n            setSelectedRoundCard(card)\n        }\n        \n        \n        if (hasCardAlreadyExistInArray(card)) {\n            return updateCardState()\n        }\n        // cardsArr.push(card)\n        \n        if (!isEmpty(cardsArr[currentCard])) {\n            //find and empty index and place the card at that index\n            let emptyIndex = cardsArr?.findIndex((c) => Object.keys(c)?.length === 0)\n            cardsArr[emptyIndex] = card;\n        } else {\n            cardsArr[currentCard] = card;\n        }\n\n        onCardCompleted(card)\n\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n    }\n\n    const _redirectTo = (path = '/') => {\n        redirectTo(props, {path})\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\n                _inventory.newHands = inventoryValue\n                break;\n        }\n\n        dispatch(powerRoyalsGameInventory(_inventory))\n    }\n\n    const onReplaceAll = () => {\n        let _newHands = newHands\n        if (_newHands <= 0) return\n\n        _newHands -= 1\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n        \n        _increaseOrDecrease -= 1;\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            _rank += 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            newCard.rank = newCard?.rank + 1;\n        }\n        cardsArr[cardIndex] = newCard\n        // otherPowerCardMatch(newCard, cardIndex)\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n        hasRoundCompleted()\n    }\n\n    const onDecrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n\n        _increaseOrDecrease -= 1\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            _rank -= 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            newCard.rank = newCard?.rank - 1;\n        }\n        cardsArr[cardIndex] = newCard\n        // otherPowerCardMatch(newCard, cardIndex)\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n        hasRoundCompleted()\n    }\n\n    const onPowerMatch = (card, cardIndex) => {\n        let _powerMatch = powerMatch\n        if (powerMatch <= 0) {\n            return\n        }\n\n        _powerMatch -= 1;\n        \n        const powerRyalCards = royalFlush(selectedRoundCard?.suit)\n        \n        cardsArr[cardIndex] = powerRyalCards[cardIndex]\n        \n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: powerRyalCards[cardIndex] })\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\n        hasRoundCompleted()\n    }\n\n    const onReplace = (card, cardIndex) => {\n        let _replace = replace\n        if (replace <= 0) {\n            return\n        }\n\n        _replace -= 1\n\n        let newCard = getRandomCard();\n        if (isEqual(newCard, card) || hasCardAlreadyExistInArray(newCard)) {\n            newCard = getRandomCard();\n        }\n\n        if (currentCard === 1 && card === cardsState?.activeCard) {\n            setSelectedRoundCard(newCard)\n        }\n        otherPowerCardMatch(newCard, cardIndex)\n        \n\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n        hasRoundCompleted()\n    }\n\n    const onCardCompleted = (card) => {\n        const { rank = 0, suit = 0 } = card || {}\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : suit);\n\n        const [foundCard] = isPowerRoyalCard(suit, rank, powerCardsList);\n\n        if (!foundCard) return;\n\n        setMatchCard(foundCard, currentCard, powerCardsList)\n    }\n\n    const otherPowerCardMatch = (card, cardIndex) => {\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : card?.suit);\n        const [foundCard] = isPowerRoyalCard(card?.suit, card?.rank, powerCardsList);\n\n        if (foundCard) {\n            setMatchCard(foundCard, cardIndex, powerCardsList)\n        } else {\n            cardsArr[cardIndex] = card;\n        }\n    }\n\n    const setMatchCard = (card, index, list) => {\n        let indexOfCard = getIndexOfArrayElement(card, list)\n        cardsArr[index] = cardsArr[indexOfCard]\n        cardsArr[indexOfCard] = card\n    }\n\n    const hasCardAlreadyExistInArray = (card) => {\n        const [alreadyExistsCard] = cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\n        return alreadyExistsCard;\n    }\n    \n    const isCompleted = (index) => isEqual(royalFlush(selectedRoundCard?.suit)[index], cardsState?.collectedCards?.[index])\n\n    const getTargetSuit = () => {\n        switch (selectedRoundCard?.suit) {\n            case CONSTANTS.CARD_SUITS.CLUB: \n                return 'CLUBS'\n            \n            case CONSTANTS.CARD_SUITS.DIAMOND:\n                return 'DIAMONDS'\n            \n            case CONSTANTS.CARD_SUITS.HEART:\n                return 'HEARTS'\n            \n            case CONSTANTS.CARD_SUITS.SPADE:\n                return 'SPADES'\n        }\n    }\n\n    const hasRoundCompleted = () => {\n        if (currentRound === 1 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\n            setTimeout(() => { \n                resetGameState()\n                setCurrentRound(2)\n            }, 3000)\n            \n            return setIsRounCompleted(true)\n        } else if (currentRound === 2 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\n            return setGameCompleted(true)\n        }\n\n        setGameCompleted(false)\n        return setIsRounCompleted(false)\n    }\n\n    const text = (value) => (`Try for a ${value} card here`)\n\n    const renderCardText = (index) => {\n        switch (index) {\n            case 0: \n                return text(10)\n            \n            case 1:\n                return text('Jack')\n            \n            case 2:\n                return text('Queen')\n            \n            case 3:\n                return text('King')\n            \n            case 4:\n                return 'Try for an Ace card here'\n        }\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Power Royals\" seconds={6}/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Power Royals!</span> If you can get a red card royal flush followed by a black card royal flush, you win!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\n                        </p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={`${classes.__card_game_content_cards}`}>\n                                {cardsState?.collectedCards?.map((c, index) => (\n                                    isEmpty(c) ?\n                                        <GameCard key={index + ''}\n                                            isCompleted={false}\n                                            showCardPopu={false}\n                                            isSelected={false}\n                                            activeCard={null}\n                                            showCardPopup={false}\n                                            time={0}\n                                            text={renderCardText(index)}\n                                            showIncrementOrDecrementPower={false}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={false}\n                                            onDecrease={() => { }}\n                                            onReplace={() => { }}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => { }}\n                                        />\n                                        :\n                                        <GameCard\n                                            key={index + ''}\n                                            showCardPopup={!isReplaceAll && true}\n                                            isCompleted={isCompleted(index)}\n                                            card={cardsState?.collectedCards?.[index]}\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\n                                            activeCard={cardsState?.activeCard}\n                                            time={time}\n                                            inventory={inventory}\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                            showPowerMatchPower={powerMatch > 0}\n                                            showReplacePower={replace > 0}\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\n                                            onPowerMatch={() => onPowerMatch(cardsState?.collectedCards?.[index], index)}\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\n                                        /> \n                                    ))}\n                            </div> \n                        </Card>\n                        {\n                            currentRound === 1 && currentCard === 0 && time > 0 &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n\n                        {\n                            selectedRoundCard && !isRoundCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Your target suit is <strong>{ getTargetSuit() }</strong></p>} primary />\n                                </>\n                        }\n\n                        {\n                            isRoundCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Royal Flush! moving on to Round 2.</p>} success />\n                                </>\n                        }\n\n                        {\n                            isGameCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>You won the game!</p>} success />\n                                </>\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        <SidebarButton\n                            success={newHands > 0 ? true : false}\n                            primary={newHands <= 0 ? true : false}\n                            title=\"Power Hand\"\n                            toolText={`${newHands} left`}\n                            icon={<div\n                                className={classes.__sidebar_reload_btn}>\n                                <Reload bgColor={\"#0ff\"} style={{height: 'auto'}}/>\n                            </div>}\n                        />\n\n                        <SidebarButton\n                            success={powerMatch > 0 ? true : false}\n                            primary={powerMatch <= 0 ? true : false}\n                            title=\"Power Match\"\n                            toolText={`${powerMatch} left`}\n                            icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\n                        />\n\n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Up/Down\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nexport default withRouter(PowerRoyalsGame)","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerRoyalsGameReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerRoyalsActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPoker/index.js",["818","819","820","821","822","823","824","825","826","827"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {getRandomCard, getCardsRankPairs, royalFlush} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport {\n    resetPowerPokersCardState,\n    powerPokersGameInventory\n} from '../../actions/powerPokerActions'\nimport { isEmpty, isEqual } from 'lodash'\nimport classes from './pokerHands.module.scss'\n\nconst INITIAL_STATE = {\n    collectedCards: [{}, {}, {}, {}, {}],\n    activeCard: {}\n}\nconst TOTAL_ROUNDS = 3;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = [{}, {}, {}, {}, {}]\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction PowerRoyalsGame(props) {\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [completedChallengeText, setCompletedChallengeText] = useState()\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n    const [isGameCompleted, setGameCompleted] = useState(false)\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\n    const [isCurrentFailed, setIsCurrentRoundFailed] = useState(false)\n\n    const dispatch = useDispatch();\n    const {inventory = {}} = useSelector(state => state.powerPoker)\n\n    const {\n        replace = 0, replaceAll = 0, newHands = 0,\n        powerMatch = 0, increaseOrDecrease = 0\n    } = inventory || {}\n    \n    useEffect(() => {\n        dispatch(resetPowerPokersCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n\n        if(isGameCompleted) clearInterval(timeOut)\n        \n        return function cleanup() {\n            return clearInterval(timeOut && timeOut)\n        }\n    }, [currentCard, currentRound, completedChallengeText, isCurrentFailed])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if (!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            timeOut = setInterval(() => {\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n\n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetGameState = () => {\n        for (let i = 0; i < 5; i++) {\n            cardsArr[i] = {}\n        }\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState(INITIAL_STATE)\n        setCompletedChallengeText(null)\n        setIsCurrentRoundFailed(false)\n        setCurrentCard(_currentCard)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setSelectedRoundCard(null)\n        setIsReplaceAllState(false)\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n\n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\n            setSelectedRoundCard(card)\n        }\n\n        cardsArr[currentCard] = card\n\n        if (hasCardAlreadyExists(card)?.length > 1) {\n            return updateCardState()\n        }\n\n        challengeCompleted()\n\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: card })\n    }\n\n    //if the card of same rank and suit is already exists then get any other random card\n    const hasCardAlreadyExists = (card) => cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\n\n    const challengeCompleted = () => {\n        //Note: This poker hand is from Highiest to lowest, and the sequence must be below sequence\n        \n        if (_currentCard !== cardsArr?.length) { return null }\n\n        if (hasRoyalFlush()) {\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Royal Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasStraightFlushSameSuit()) {\n            //Straight Completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Straight Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFoureOfAKindFlush()) {\n            //4 of a kind completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Four Of A Kind! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFullHouseFlush()) {\n            //Full House Completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Full House! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFlush()) {\n            //fluch completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasStraightFlushDiffSuit()) {\n            //straight flush diff suit completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Straight! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasThreeOfAKindFlush()) {\n            //three of a kind compeleted\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Three Of A Kind! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasTwoPairFlush()) {\n            //two pair compeleted\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Two Pair! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasPairFlush()) {\n            //Pair completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>1 Pair! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n\n        setIsCurrentRoundFailed(true)\n        setCompletedChallengeText(<p>Sorry, you did not win on this hand.</p>)\n\n        return setGameCompleted(false)\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\n                _inventory.newHands = inventoryValue\n                break;\n        }\n\n        dispatch(powerPokersGameInventory(_inventory))\n    }\n\n    const onReplaceAll = () => {\n        let _newHands = newHands\n        if (_newHands <= 0) return\n\n        _newHands -= 1\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n        \n        _increaseOrDecrease -= 1;\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            _rank += 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        cardsArr[cardIndex] = newCard\n\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\n            newCard.rank += 1;\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onDecrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n\n        _increaseOrDecrease -= 1\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            _rank -= 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        cardsArr[cardIndex] = newCard\n\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\n            if (CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n                newCard.rank -= 1;\n            }\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onReplace = (card, cardIndex) => {\n        let _replace = replace\n        if (replace <= 0) {\n            return\n        }\n\n        _replace -= 1\n\n        let newCard = getRandomCard();\n        \n        if (currentCard === 1 && card === cardsState?.activeCard) {\n            setSelectedRoundCard(newCard)\n        }\n        \n        cardsArr[cardIndex] = newCard\n        \n        if (hasCardAlreadyExists(newCard)?.length > 1) { \n            newCard = getRandomCard()\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n    }\n\n    const hasStraightFlushDiffSuit = () => {\n        //Five cards in a sequence, but not of the same suit.\n        let hasFlush = cardsArr?.every((c, i, ar) => {\n            return !i || ar[i - 1]?.rank > c?.rank\n        })\n\n        return hasFlush\n    }\n\n    const hasFullHouseFlush = () => {\n        //Three of a kind with a pair.\n        let hasFlush = false;\n        const threeOfAKind = getCardsRankPairs(cardsArr)\n        Object.entries(threeOfAKind).forEach(([key, val]) => {\n            if (val % 2 === 0 && val % 3 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasFlush = () => {\n        //Any five cards of the same suit, but not in a sequence.\n        const cards = cardsArr?.filter(c => c?.suit === cardsArr[0]?.suit);\n        if (cards?.length === 5) {\n            return true;\n        }\n\n        return false;\n    }\n\n    const hasStraightFlushSameSuit = () => {\n        //Five cards in a sequence, all in the same suit.\n        const flushCards = cardsArr?.filter(c => c?.suit === selectedRoundCard?.suit)\n        let hasFlush = false;\n        if (flushCards?.length >= 5) {\n            //all same suit cards\n            hasFlush = cardsArr?.every((c, i, ar) => {\n                if(ar[0]?.rank > ar[1]?.rank)\n                    return !i || ar[i - 1]?.rank > c?.rank //highest to lowest\n                \n                return !i || ar[i - 1]?.rank < c?.rank //lowest to highest\n            })\n        }\n\n        return hasFlush\n    }\n\n    const hasThreeOfAKindFlush = () => {\n        //Three cards of the same rank.\n        let hasFlush = false;\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 3 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasTwoPairFlush = () => {\n        //two pairs\n        let pairsCount = 0;\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 2 === 0) {\n                pairsCount ++\n            }\n        })\n\n        return pairsCount === 2 ? true : false\n    }\n\n    const hasPairFlush = () => {\n        //Two cards of the same rank.\n        let hasFlush = false\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 2 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasFoureOfAKindFlush = () => {\n        //foure cards of same rank\n        let hasFlush = false\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if(val % 4 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasRoyalFlush = () => {\n        //A, K, Q, J, 10, all the same suit.\n        const _royalFlush = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : cardsArr[0]?.suit)\n        if (isEqual(cardsArr, _royalFlush)) {\n            return true;\n        }\n        return false\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Power Poker\" seconds={6}/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Power Poker!</span> Use Powers to make winning hands! Can you get a Royal Flush? You have the Power!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\n                        </p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={`${classes.__card_game_content_cards}`}>\n                                {cardsState?.collectedCards?.map((c, index) => (\n                                    isEmpty(c) ?\n                                        <GameCard key={index + ''}\n                                            isCompleted={false}\n                                            showCardPopu={false}\n                                            isSelected={false}\n                                            activeCard={null}\n                                            showCardPopup={false}\n                                            time={0}\n                                            showIncrementOrDecrementPower={false}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={false}\n                                            onDecrease={() => { }}\n                                            onReplace={() => { }}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => { }}\n                                        />\n                                        :\n                                        <GameCard\n                                            key={index + ''}\n                                            showCardPopup={!isReplaceAll && true}\n                                            isCompleted={false}\n                                            card={cardsState?.collectedCards?.[index]}\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\n                                            activeCard={cardsState?.activeCard}\n                                            time={time}\n                                            inventory={inventory}\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={replace > 0}\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\n                                        /> \n                                    ))}\n                            </div> \n                        </Card>\n\n                        {\n                            currentRound === 1 && currentCard === 0 && time > 0 &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n                        \n                        {\n                            completedChallengeText &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => completedChallengeText} success={!isCurrentFailed} danger={isCurrentFailed} />\n                                </>\n                        }\n\n                        {\n                            isGameCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>You have won the game!</p>} success />\n                                </>\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        \n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Up/Down\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nexport default withRouter(PowerRoyalsGame)","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerPokerActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerPokerReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/HomePageContentHeader/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/LandingPage/index.js",["828","829","830"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballTicket.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shape.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballCup.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/MegaPhone.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Modal/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountPage/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/AccountInfoComponent/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/index.js",["831","832"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ticket.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Money.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/ListItem.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ResultsInfoComponent/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/index.js",["833","834","835"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/ResultCard.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/server_connection.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/environment.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/authReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/authActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ProtectedRoute/index.js",["836","837"],"import React from 'react'\nimport { Redirect, Route } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport {  getLocalStorage } from '../../utility/shared';\nimport { CONSTANTS } from '../../utility/constants';\n\nfunction ProtectedRoute({ component: Component, ...rest }) {\n    const { use: { token = '' } = {} } = useSelector((state) => state?.auth);\n    let isAuthenticated = getLocalStorage(CONSTANTS.LOCAL_STORAGE_KEYS.USER)\n    \n    return <Route {...rest} render={(props) => {\n        return (\n            isAuthenticated ?\n                <Component {...props} />\n                :\n                <Redirect to={{\n                    pathname: '/login',\n                    state: {from: props?.location}\n                }} />\n            )\n        }} />\n}\n\nexport default React.memo(ProtectedRoute)\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/Root.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/landingPageReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/landingPageActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/http.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenter.js",["838","839","840"],"import React, { Fragment } from 'react';\nimport { Link, NavLink, Route } from 'react-router-dom';\n\nimport classes from './MyGameCenter.module.scss';\nimport Scoreboard from '../../assets/scoreboard.png';\nimport Emblem from '../../assets/emblem.png';\nimport Header from '../../components/Header/Header';\nimport './MyGameCenter.scss';\nimport './table.scss';\nimport Footer from '../../components/Footer/Footer'\nimport InteractiveContests from './InteractiveContests';\nimport Button from '../../components/Button';\nimport Card from '../../components/Card';\nimport PIcon from '../../icons/PIcon';\nimport MyGameCenterTable from './MyGameCenterTable';\nimport PointsIcon from '../../icons/PointsIcon';\n// import Scoreboard from '../../icons/Scoreboard';\n\nconst MyGameCenter = props => {\n    const { url } = props.match;\n    return (\n        <Fragment>\n            <Header isStick={true} />\n            <div className='__PowerCenter'>\n                <div className='__viewport-large-title __center __pt-1'>My Game Center</div>\n                <div className={classes.header2_container}>\n                    <div className={classes.header2_card}>\n                        <Card>\n                            <div className={classes.header2_card_1}>\n                                <div className={classes.header2_card_1_1}>\n                                    <PointsIcon />\n                                    <div>\n                                        <h3>$36</h3>\n                                        <span>USD Balance</span>\n                                    </div>\n                                </div>\n\n                                <div className={classes.header2_card_1_1}>\n                                    <PIcon />\n                                    <div>\n                                        <h3>15,000</h3>\n                                        <span>Power Balance</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </Card>\n                    </div>\n                    <div className={classes.header2_card}>\n                        <Card>\n                            <div className={classes.header2_card_2}>\n                                <p>My next contest starts in</p>\n                                <h3>46:21:21</h3>\n                            </div>\n                        </Card>\n                    </div>\n                </div>\n                <div className='__flex __power-center-links __mb-5'>\n                    <NavLink exact to={`${url}`} className='__f1 __block __right __relative'>\n                        <span className='__block'>Live-Play Fantasy Sports</span>\n                    </NavLink>\n                    <NavLink to={`${url}/contests`} className='__f1 __block __relative'>\n                        <span className='__block'>Interactive Promo<span className='__hide-on-small'>tional</span> Contests</span>\n                    </NavLink>\n                </div>\n                <div className={classes.container}>\n                    <Route exact path={url} component={InteractiveContests} />\n                    <Route path={`${url}/contests`} component={MyGameCenterTable} />\n                </div>\n            </div>\n            <div className={classes.body_footer}>\n                <div>\n                    <Card>\n                        <div className={classes.body_footer_card_wrapper}>\n                            <div className={classes.body_footer_card}>\n                                <img src={Scoreboard} width={100} height={100} />\n                                <p>Want to explore more live Sports Games ?</p>\n                            </div>\n                            <Button isRounded block transparent title=\"More Live Sports Games\" />\n                        </div>\n                    </Card>\n                </div>\n                \n                <div>\n                    <Card>\n                        <div className={classes.body_footer_card_wrapper}>\n                            <div className={classes.body_footer_card}>\n                                <img src={Emblem} width={100} height={100} />\n                                <p>Want to explore more Promotional Contests ?</p>\n                            </div>\n                            <Button isRounded block transparent title=\"More Promo Contests\" />\n                        </div>\n                    </Card>\n                </div>\n            </div>\n            <Footer isBlack={true} />\n        </Fragment>\n    )\n}\n\nexport default MyGameCenter;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/InteractiveContests.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/PowerPlayGridRow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenterTable.js",["841","842","843","844","845","846"],"import React, { useState, useEffect, Fragment } from 'react';\nimport { Line } from 'rc-progress';\n\nimport classes from './MyGameCenter.module.scss';\nimport Billards from '../../icons/Billards';\nimport CasinoChips from '../../icons/CasinoChips';\nimport Stadium from '../../icons/Stadium';\nimport PowerPlayIcon from '../../assets/powerplay-icon.png';\nimport './table.scss';\nimport { Link } from 'react-router-dom';\nimport Info from '../../icons/Info';\nimport SuperBall from '../../icons/SuperBall';\nimport SuperBall2 from '../../icons/SuperBall2';\nimport Ball from '../../icons/Ball';\nimport ButtonDropdown from '../../components/ButtonDropdown2'\nimport MyGameCenterTableRow from './MyGameCenterTableRow';\nimport { useMediaQuery } from 'react-responsive';\n\nconst listItems = [\n    { title: 'In Progress', value: 'in_progress' },\n    { title: 'Up Coming', value: 'upcoming' },\n    { title: 'Completed Game', value: 'com_game' }\n]\n\nconst MyGameCenterTable = props => {\n    // const [isMobileDevice, setMobileDevice] = useState(false);\n    const [selectedMenu, setSelectedMenu] = useState(listItems[0].value)\n    // const responsiveHandler = maxWidth => setMobileDevice(maxWidth.matches);\n    const isMobileDevice = useMediaQuery({query: '(max-width: 1024px)'})\n    useEffect(() => {\n        // const maxWidth = window.matchMedia(\"(max-width: 1200px)\");\n        // responsiveHandler(maxWidth);\n        // maxWidth.addEventListener('change', responsiveHandler);\n        // return () => maxWidth.removeEventListener('change', responsiveHandler);\n    }, [])\n    return (\n        <div className='__table-wrapper __mb-6'>\n            <div className='__flex'>\n                <div className='__badges-wrapper __live-power-play-badges-wrapper __ml-a __text-in-one-line __mediam'>\n                    <Link to='/' className='__outline-badge __active __f1'><Stadium />Live sports</Link>\n                    <Link to='/' className='__outline-badge __f1'><Billards />Power Match</Link>\n                    <Link to='/' className='__outline-badge __f1'><CasinoChips />Parlay Games</Link>\n                    <Link to='/' className='__outline-badge __f1'>Show All</Link>\n                </div>\n            </div>\n\n            <div className={`__h6 __mt-2 __mb-1 ${classes.__header}`}>\n                My Entries\n                 {\n                    !isMobileDevice\n                        ?\n                        <div className={classes.__header_r}>\n                            <Link>\n                                In Progress\n                            </Link>\n\n                            <Link className={classes.active}>\n                                Upcoming\n                            </Link>\n\n                            <Link>\n                                Completed Games\n                            </Link>\n                        </div>\n                        :\n                        <ButtonDropdown elements={listItems} selected={listItems[0]} onChange={(e) => {\n                            setSelectedMenu(e?.target?.value)\n                            }} isActive styles={{margin: '0 5px', border: 'none'}} />\n                 }\n            </div>\n            \n            <div className={classes.table}>\n                <div className={classes.table_main}>\n                    <div className={classes.table_header}>\n                        <div>Type</div>\n                        <div>Contest</div>\n                        <div>Entries (min)</div>\n                        <div>Total Prizes</div>\n                        <div className={classes.row_small}>Free Paid</div>\n                        <div className={classes.row_small}>Status</div>\n                        <div className={classes.row_small}>Action</div>\n                    </div>\n                    <div className={classes.table_body}>\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n\n                        <MyGameCenterTableRow\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\n                            contest='CTA $15k WTA '\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\n                            freePaid={1000}\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\n                            isMobile={isMobileDevice}\n                        />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default MyGameCenterTable;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Lineprogress.js",[],["847","848"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PointsIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/MyGameCenter/MyGameCenterTableRow.js",["849","850"],"import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport classes from './MyGameCenter.module.scss';\nimport PowerPlayIcon from '../../assets/powerplay-icon.png';\nimport Info from '../../icons/Info';\nimport { setNumberComma } from '../../utility/shared';\n\nconst MAX_FILL_BAR_VALUE = 60;\n\nfunction MyGameCenterTableRow(props) {\n    const [isActionActive, setActionState] = useState(false);\n    \n    const {\n        type: { Icon = <></>, typeTitle = '', typeDateTime = '' } = {}, contest = '', entries: { entriesTitle = '', entiresValue = 0 } = {},\n        totalPrizes: { totalPrize = 0, firstPlacePrize = 0 } = {}, freePaid = 0, status: { statusTitle = '', statusTime = '' } = {},\n        isMobile = false,\n    } = props || {};\n\n    const _entiresValue = () => {\n        let val = entiresValue || 0;\n\n        val = Math.round(val * 60 / 100);\n\n        return val;\n    }\n\n    const RenderRowPC = () => (\n        <div className={classes.table_row}>\n            <div>\n                <div className={classes.td_icon}>\n                    {Icon}\n                </div>\n                <div>\n                    <p>{ typeTitle }</p>\n                    <span>\n                        { typeDateTime } <Info />\n                    </span>\n                </div>\n            </div>\n            <div><strong>{ contest }</strong></div>\n            <div className={classes.row_column}>\n                {entriesTitle}\n                <div className={classes.progress}>\n                    <span>{entiresValue}% FULL</span>\n                    <div className={classes.progress_bar_bg}>\n                        <div className={classes.progress_bar} style={{width: `${_entiresValue()}px`}}></div>\n                    </div>\n                </div>\n            </div>\n            <div className={classes.row_column}>\n                <p>${ setNumberComma(totalPrize) }</p>\n                <span>1st place: ${firstPlacePrize}</span>\n            </div>\n            <div className={classes.row_small}>\n                <img src={PowerPlayIcon} alt='' />\n                <p className={classes.m_l_4}>{ setNumberComma(freePaid) }</p>\n            </div>\n            <div className={`${classes.row_small} ${classes.row_column}`}>\n                <p>{ statusTitle }</p>\n                <span>{ statusTime }</span>\n            </div>\n            <div className={classes.row_small}>\n                <button className={isActionActive && classes.active} onClick={() => setActionState(!isActionActive)}><p>...</p></button>\n                {\n                    isActionActive &&\n                    <div className={classes.action} onMouseLeave={() => setActionState(false)}>\n                        <Link to=\"#\">Make picks</Link>\n                        <Link to=\"#\">Live-Play</Link>\n                        <Link to=\"#\">Exit Game</Link>\n                    </div>\n                }\n            </div>\n        </div>\n    )\n\n    const RenderRowMobile = () => (\n        <div className={classes.table_row}>\n            <div className={classes.table_mobile_cl}>\n                <div className={classes.table_mobile_cl_l}>\n                    <div className={classes.td_icon}>\n                        {Icon}\n                    </div>\n\n                    <div className={classes.table_mobile_cl_l_1}>\n                        <p>{ typeTitle }</p>\n                        <strong>{ contest }</strong>\n                    </div>\n                </div>\n\n                <div className={classes.table_mobile_cl_r}>\n                    <p>{ statusTitle }</p>\n                    <p className={classes.p_16}>{ statusTime }</p>\n                </div>\n            </div>\n\n            <div className={classes.div_span}>\n                <span>\n                    { typeDateTime } <Info size={11} />\n                </span>\n            </div>\n            \n            <div className={`${classes.table_mobile_cl} ${classes.margin_top_10}`}>\n                <div className={classes.table_mobile_cl_l_1}>\n                    {entriesTitle}\n                    <div className={classes.progress}>\n                        <span className={classes.table_mobile_cl_p_small}>{entiresValue}% FULL</span>\n                        <div className={classes.progress_bar_bg}>\n                            <div className={classes.progress_bar} style={{width: `${_entiresValue()}px`}}></div>\n                        </div>\n                    </div>\n                </div>\n                <div className={classes.table_mobile_cl_r}>\n                    <p className={classes.table_mobile_cl_p_small}>Total Prizes:</p>\n                    <p className={classes.p_16}>${ setNumberComma(totalPrize) }</p>\n                    <p className={classes.table_mobile_cl_p_small}>1st place: ${firstPlacePrize}</p>\n                </div>\n            </div>\n\n            <div className={classes.table_mobile_cl}>\n                <div className={classes.table_mobile_cl_l_1}>\n                    <p className={classes.table_mobile_cl_p_small}>FREE PAID</p>\n                    <div className={classes.table_mobile_cl_l_2}>\n                        <img src={PowerPlayIcon} alt='' />\n                        <p className={classes.m_l_4}>{ setNumberComma(freePaid) }</p>\n                    </div>\n                </div>\n\n                <div className={classes.table_mobile_cl_r}>\n                    <button className={`${classes.button}`} onClick={() => setActionState(!isActionActive)}>\n                        <p>Select Action</p>\n                        <i className={`${classes.arrow} ${classes.down}`}></i>\n                    </button>\n                    {\n                        isActionActive &&\n                        <div className={classes.action} onMouseLeave={() => setActionState(false)}>\n                            <Link to=\"#\">Make picks</Link>\n                            <Link to=\"#\">Live-Play</Link>\n                            <Link to=\"#\">Exit Game</Link>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n\n    return (\n        !isMobile ? <RenderRowPC /> : <RenderRowMobile />\n    )\n}\n\nMyGameCenterTableRow.propTypes = {\n    type: PropTypes.object,\n    contest: PropTypes.string,\n    entries: PropTypes.object,\n    totalPrizes: PropTypes.object,\n    freePaid: PropTypes.number,\n    status: PropTypes.object,\n    isMobile: PropTypes.bool,\n}\n\nexport default MyGameCenterTableRow\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Scoreboard.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown2/index.js",["851","852"],"import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport classes from './index.module.scss'\n\nfunction ButtonDropdown(props) {\n    const [isVisible, setVisibleState] = useState(false)\n    const [_selected, setSelected] = useState({})\n    const { elements = [], selected = {}, onChange = () => { }, isActive = false, styles = {} } = props || {}\n\n    useEffect(() => {\n        if(!selected && elements.length)\n            onSelectListItem(elements[0])\n        else \n            onSelectListItem(selected)\n    }, [selected])\n\n    const toggleList = () => {\n        setVisibleState(!isVisible)\n    }\n\n    const onSelectListItem = (item) => {\n        setSelected(item)\n        setVisibleState(false)\n    }\n\n\n    return (\n        <div className={classes.wrapper} style={styles}>\n            <div>\n                <button onClick={toggleList} className={classes.active}>\n                    {_selected?.title}\n                </button>\n                <i className={`${classes.arrow} ${classes.down}`}></i>\n            </div>\n\n        {\n            isVisible &&\n                <div className={classes.select_body}>\n                    {\n                        elements.length && elements.map((itm, index) => <button\n                            key={itm.title + index.toString()}\n                            onClick={() => {\n                                onSelectListItem(itm)\n                                onChange(itm)\n                            }}>\n                            {itm.title}</button>)\n                    }\n                </div>\n\n        }\n        </div>\n    )\n}\n\nButtonDropdown.propTypes = {\n    elements: PropTypes.array,\n    selected: PropTypes.object,\n    isActive: PropTypes.bool,\n    onChange: PropTypes.func,\n    styles: PropTypes.object\n}\n\nexport default ButtonDropdown\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/urls.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Checkbox/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Select/index.js",[],{"ruleId":"853","replacedBy":"854"},{"ruleId":"855","replacedBy":"856"},{"ruleId":"857","severity":1,"message":"858","line":1,"column":8,"nodeType":"859","messageId":"860","endLine":1,"endColumn":13},{"ruleId":"857","severity":1,"message":"861","line":2,"column":23,"nodeType":"859","messageId":"860","endLine":2,"endColumn":33},{"ruleId":"857","severity":1,"message":"862","line":13,"column":8,"nodeType":"859","messageId":"860","endLine":13,"endColumn":14},{"ruleId":"857","severity":1,"message":"863","line":42,"column":12,"nodeType":"859","messageId":"860","endLine":42,"endColumn":29},{"ruleId":"857","severity":1,"message":"864","line":43,"column":12,"nodeType":"859","messageId":"860","endLine":43,"endColumn":26},{"ruleId":"865","severity":1,"message":"866","line":58,"column":8,"nodeType":"867","endLine":58,"endColumn":10,"suggestions":"868"},{"ruleId":"865","severity":1,"message":"869","line":67,"column":8,"nodeType":"867","endLine":67,"endColumn":35,"suggestions":"870"},{"ruleId":"871","severity":1,"message":"872","line":246,"column":9,"nodeType":"873","messageId":"874","endLine":262,"endColumn":10},{"ruleId":"857","severity":1,"message":"875","line":268,"column":11,"nodeType":"859","messageId":"860","endLine":268,"endColumn":23},{"ruleId":"853","replacedBy":"876"},{"ruleId":"855","replacedBy":"877"},{"ruleId":"857","severity":1,"message":"878","line":25,"column":22,"nodeType":"859","messageId":"860","endLine":25,"endColumn":29},{"ruleId":"857","severity":1,"message":"879","line":25,"column":35,"nodeType":"859","messageId":"860","endLine":25,"endColumn":45},{"ruleId":"857","severity":1,"message":"880","line":25,"column":51,"nodeType":"859","messageId":"860","endLine":25,"endColumn":69},{"ruleId":"881","severity":1,"message":"882","line":78,"column":37,"nodeType":"883","endLine":78,"endColumn":95},{"ruleId":"881","severity":1,"message":"882","line":120,"column":57,"nodeType":"883","endLine":120,"endColumn":101},{"ruleId":"865","severity":1,"message":"884","line":26,"column":8,"nodeType":"867","endLine":26,"endColumn":52,"suggestions":"885"},{"ruleId":"853","replacedBy":"886"},{"ruleId":"855","replacedBy":"887"},{"ruleId":"853","replacedBy":"888"},{"ruleId":"855","replacedBy":"889"},{"ruleId":"853","replacedBy":"890"},{"ruleId":"855","replacedBy":"891"},{"ruleId":"857","severity":1,"message":"892","line":22,"column":12,"nodeType":"859","messageId":"860","endLine":22,"endColumn":20},{"ruleId":"893","severity":1,"message":"894","line":97,"column":37,"nodeType":"895","messageId":"896","endLine":97,"endColumn":43},{"ruleId":"893","severity":1,"message":"894","line":105,"column":37,"nodeType":"895","messageId":"896","endLine":105,"endColumn":43},{"ruleId":"893","severity":1,"message":"894","line":113,"column":37,"nodeType":"895","messageId":"896","endLine":113,"endColumn":43},{"ruleId":"893","severity":1,"message":"894","line":121,"column":37,"nodeType":"895","messageId":"896","endLine":121,"endColumn":43},{"ruleId":"881","severity":1,"message":"882","line":223,"column":37,"nodeType":"883","endLine":223,"endColumn":87},{"ruleId":"857","severity":1,"message":"897","line":10,"column":8,"nodeType":"859","messageId":"860","endLine":10,"endColumn":19},{"ruleId":"865","severity":1,"message":"898","line":28,"column":8,"nodeType":"867","endLine":28,"endColumn":10,"suggestions":"899"},{"ruleId":"865","severity":1,"message":"900","line":16,"column":8,"nodeType":"867","endLine":16,"endColumn":18,"suggestions":"901"},{"ruleId":"857","severity":1,"message":"902","line":10,"column":10,"nodeType":"859","messageId":"860","endLine":10,"endColumn":20},{"ruleId":"857","severity":1,"message":"903","line":11,"column":10,"nodeType":"859","messageId":"860","endLine":11,"endColumn":18},{"ruleId":"857","severity":1,"message":"904","line":3,"column":10,"nodeType":"859","messageId":"860","endLine":3,"endColumn":21},{"ruleId":"857","severity":1,"message":"905","line":3,"column":23,"nodeType":"859","messageId":"860","endLine":3,"endColumn":34},{"ruleId":"865","severity":1,"message":"906","line":26,"column":8,"nodeType":"867","endLine":26,"endColumn":14,"suggestions":"907"},{"ruleId":"857","severity":1,"message":"908","line":4,"column":8,"nodeType":"859","messageId":"860","endLine":4,"endColumn":18},{"ruleId":"857","severity":1,"message":"908","line":4,"column":8,"nodeType":"859","messageId":"860","endLine":4,"endColumn":18},{"ruleId":"857","severity":1,"message":"908","line":4,"column":8,"nodeType":"859","messageId":"860","endLine":4,"endColumn":18},{"ruleId":"857","severity":1,"message":"908","line":4,"column":8,"nodeType":"859","messageId":"860","endLine":4,"endColumn":18},{"ruleId":"857","severity":1,"message":"908","line":4,"column":8,"nodeType":"859","messageId":"860","endLine":4,"endColumn":18},{"ruleId":"871","severity":1,"message":"872","line":12,"column":9,"nodeType":"873","messageId":"874","endLine":52,"endColumn":10},{"ruleId":"871","severity":1,"message":"872","line":12,"column":9,"nodeType":"873","messageId":"874","endLine":52,"endColumn":10},{"ruleId":"871","severity":1,"message":"872","line":12,"column":9,"nodeType":"873","messageId":"874","endLine":52,"endColumn":10},{"ruleId":"871","severity":1,"message":"872","line":12,"column":9,"nodeType":"873","messageId":"874","endLine":52,"endColumn":10},{"ruleId":"871","severity":1,"message":"872","line":19,"column":9,"nodeType":"873","messageId":"874","endLine":31,"endColumn":10},{"ruleId":"865","severity":1,"message":"909","line":14,"column":8,"nodeType":"867","endLine":14,"endColumn":10,"suggestions":"910"},{"ruleId":"857","severity":1,"message":"911","line":7,"column":8,"nodeType":"859","messageId":"860","endLine":7,"endColumn":20},{"ruleId":"865","severity":1,"message":"906","line":27,"column":8,"nodeType":"867","endLine":27,"endColumn":28,"suggestions":"912"},{"ruleId":"857","severity":1,"message":"913","line":4,"column":10,"nodeType":"859","messageId":"860","endLine":4,"endColumn":25},{"ruleId":"857","severity":1,"message":"914","line":4,"column":27,"nodeType":"859","messageId":"860","endLine":4,"endColumn":36},{"ruleId":"857","severity":1,"message":"915","line":4,"column":38,"nodeType":"859","messageId":"860","endLine":4,"endColumn":47},{"ruleId":"857","severity":1,"message":"916","line":6,"column":9,"nodeType":"859","messageId":"860","endLine":6,"endColumn":18},{"ruleId":"857","severity":1,"message":"917","line":6,"column":44,"nodeType":"859","messageId":"860","endLine":6,"endColumn":62},{"ruleId":"857","severity":1,"message":"918","line":28,"column":10,"nodeType":"859","messageId":"860","endLine":28,"endColumn":24},{"ruleId":"857","severity":1,"message":"863","line":51,"column":12,"nodeType":"859","messageId":"860","endLine":51,"endColumn":29},{"ruleId":"857","severity":1,"message":"864","line":52,"column":12,"nodeType":"859","messageId":"860","endLine":52,"endColumn":26},{"ruleId":"857","severity":1,"message":"919","line":60,"column":13,"nodeType":"859","messageId":"860","endLine":60,"endColumn":27},{"ruleId":"857","severity":1,"message":"920","line":65,"column":22,"nodeType":"859","messageId":"860","endLine":65,"endColumn":32},{"ruleId":"865","severity":1,"message":"866","line":74,"column":8,"nodeType":"867","endLine":74,"endColumn":10,"suggestions":"921"},{"ruleId":"865","severity":1,"message":"922","line":82,"column":8,"nodeType":"867","endLine":82,"endColumn":72,"suggestions":"923"},{"ruleId":"857","severity":1,"message":"924","line":192,"column":11,"nodeType":"859","messageId":"860","endLine":192,"endColumn":22},{"ruleId":"871","severity":1,"message":"872","line":199,"column":9,"nodeType":"873","messageId":"874","endLine":215,"endColumn":10},{"ruleId":"857","severity":1,"message":"875","line":220,"column":11,"nodeType":"859","messageId":"860","endLine":220,"endColumn":23},{"ruleId":"871","severity":1,"message":"872","line":368,"column":9,"nodeType":"873","messageId":"874","endLine":380,"endColumn":10},{"ruleId":"871","severity":1,"message":"872","line":402,"column":9,"nodeType":"873","messageId":"874","endLine":417,"endColumn":10},{"ruleId":"857","severity":1,"message":"862","line":13,"column":8,"nodeType":"859","messageId":"860","endLine":13,"endColumn":14},{"ruleId":"857","severity":1,"message":"925","line":14,"column":8,"nodeType":"859","messageId":"860","endLine":14,"endColumn":16},{"ruleId":"857","severity":1,"message":"863","line":49,"column":12,"nodeType":"859","messageId":"860","endLine":49,"endColumn":29},{"ruleId":"857","severity":1,"message":"864","line":50,"column":12,"nodeType":"859","messageId":"860","endLine":50,"endColumn":26},{"ruleId":"857","severity":1,"message":"920","line":60,"column":22,"nodeType":"859","messageId":"860","endLine":60,"endColumn":32},{"ruleId":"857","severity":1,"message":"879","line":61,"column":9,"nodeType":"859","messageId":"860","endLine":61,"endColumn":19},{"ruleId":"865","severity":1,"message":"926","line":69,"column":8,"nodeType":"867","endLine":69,"endColumn":10,"suggestions":"927"},{"ruleId":"865","severity":1,"message":"928","line":79,"column":8,"nodeType":"867","endLine":79,"endColumn":76,"suggestions":"929"},{"ruleId":"871","severity":1,"message":"872","line":257,"column":9,"nodeType":"873","messageId":"874","endLine":273,"endColumn":10},{"ruleId":"857","severity":1,"message":"875","line":278,"column":11,"nodeType":"859","messageId":"860","endLine":278,"endColumn":23},{"ruleId":"857","severity":1,"message":"930","line":48,"column":21,"nodeType":"859","messageId":"860","endLine":48,"endColumn":26},{"ruleId":"857","severity":1,"message":"931","line":48,"column":50,"nodeType":"859","messageId":"860","endLine":48,"endColumn":57},{"ruleId":"865","severity":1,"message":"932","line":52,"column":9,"nodeType":"867","endLine":52,"endColumn":18,"suggestions":"933"},{"ruleId":"857","severity":1,"message":"934","line":1,"column":17,"nodeType":"859","messageId":"860","endLine":1,"endColumn":26},{"ruleId":"881","severity":1,"message":"882","line":26,"column":17,"nodeType":"883","endLine":26,"endColumn":58},{"ruleId":"857","severity":1,"message":"934","line":1,"column":17,"nodeType":"859","messageId":"860","endLine":1,"endColumn":26},{"ruleId":"857","severity":1,"message":"935","line":1,"column":28,"nodeType":"859","messageId":"860","endLine":1,"endColumn":36},{"ruleId":"881","severity":1,"message":"882","line":24,"column":29,"nodeType":"883","endLine":24,"endColumn":47},{"ruleId":"857","severity":1,"message":"936","line":5,"column":10,"nodeType":"859","messageId":"860","endLine":5,"endColumn":17},{"ruleId":"857","severity":1,"message":"937","line":10,"column":20,"nodeType":"859","messageId":"860","endLine":10,"endColumn":25},{"ruleId":"857","severity":1,"message":"938","line":2,"column":10,"nodeType":"859","messageId":"860","endLine":2,"endColumn":14},{"ruleId":"881","severity":1,"message":"882","line":75,"column":33,"nodeType":"883","endLine":75,"endColumn":82},{"ruleId":"881","severity":1,"message":"882","line":87,"column":33,"nodeType":"883","endLine":87,"endColumn":78},{"ruleId":"857","severity":1,"message":"939","line":1,"column":38,"nodeType":"859","messageId":"860","endLine":1,"endColumn":46},{"ruleId":"857","severity":1,"message":"940","line":2,"column":10,"nodeType":"859","messageId":"860","endLine":2,"endColumn":14},{"ruleId":"857","severity":1,"message":"941","line":8,"column":8,"nodeType":"859","messageId":"860","endLine":8,"endColumn":21},{"ruleId":"857","severity":1,"message":"942","line":11,"column":8,"nodeType":"859","messageId":"860","endLine":11,"endColumn":12},{"ruleId":"857","severity":1,"message":"943","line":12,"column":8,"nodeType":"859","messageId":"860","endLine":12,"endColumn":17},{"ruleId":"857","severity":1,"message":"944","line":27,"column":12,"nodeType":"859","messageId":"860","endLine":27,"endColumn":24},{"ruleId":"853","replacedBy":"945"},{"ruleId":"855","replacedBy":"946"},{"ruleId":"857","severity":1,"message":"947","line":4,"column":10,"nodeType":"859","messageId":"860","endLine":4,"endColumn":23},{"ruleId":"857","severity":1,"message":"948","line":11,"column":7,"nodeType":"859","messageId":"860","endLine":11,"endColumn":25},{"ruleId":"857","severity":1,"message":"949","line":9,"column":65,"nodeType":"859","messageId":"860","endLine":9,"endColumn":73},{"ruleId":"865","severity":1,"message":"900","line":16,"column":8,"nodeType":"867","endLine":16,"endColumn":18,"suggestions":"950"},"no-native-reassign",["951"],"no-negated-in-lhs",["952"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Reload' is defined but never used.","'resetBtnCountDown' is assigned a value but never used.","'showResetTimer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'resetGameState'. Either include them or remove the dependency array.","ArrayExpression",["953"],"React Hook useEffect has missing dependencies: 'gameCompleted' and 'gameStart'. Either include them or remove the dependency array.",["954"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onReplaceAll' is assigned a value but never used.",["951"],["952"],"'replace' is assigned a value but never used.","'powerMatch' is assigned a value but never used.","'increaseOrDecrease' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'maxProgress'. Either include it or remove the dependency array.",["955"],["951"],["952"],["951"],["952"],["951"],["952"],"'selected' is assigned a value but never used.","no-dupe-keys","Duplicate key 'margin'.","ObjectExpression","unexpected","'ProgressBar' is defined but never used.","React Hook useEffect has a missing dependency: 'generateCards'. Either include it or remove the dependency array.",["956"],"React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array.",["957"],"'redirectTo' is defined but never used.","'Redirect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["958"],"'PageHeader' is defined but never used.","React Hook useEffect has missing dependencies: 'currentSec' and 'maxSec'. Either include them or remove the dependency array.",["959"],"'DecreaseIcon' is defined but never used.",["960"],"'DragDropContext' is defined but never used.","'Draggable' is defined but never used.","'Droppable' is defined but never used.","'flushList' is defined but never used.","'hasPowerRoyalsCard' is defined but never used.","'differenceWith' is defined but never used.","'collectedCards' is assigned a value but never used.","'replaceAll' is assigned a value but never used.",["961"],"React Hook useEffect has a missing dependency: 'gameStart'. Either include it or remove the dependency array.",["962"],"'_redirectTo' is assigned a value but never used.","'BoltIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["963"],"React Hook useEffect has missing dependencies: 'gameStart' and 'isGameCompleted'. Either include them or remove the dependency array.",["964"],"'error' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like '_socket' aren't valid dependencies because mutating them doesn't re-render the component.",["965"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'isEmpty' is defined but never used.","'token' is assigned a value but never used.","'Link' is defined but never used.","'Fragment' is defined but never used.","'Line' is defined but never used.","'PowerPlayIcon' is defined but never used.","'Info' is defined but never used.","'SuperBall' is defined but never used.","'selectedMenu' is assigned a value but never used.",["951"],["952"],"'useMediaQuery' is defined but never used.","'MAX_FILL_BAR_VALUE' is assigned a value but never used.","'isActive' is assigned a value but never used.",["966"],"no-global-assign","no-unsafe-negation",{"desc":"967","fix":"968"},{"desc":"969","fix":"970"},{"desc":"971","fix":"972"},{"desc":"973","fix":"974"},{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"979","fix":"980"},{"desc":"981","fix":"982"},{"desc":"967","fix":"983"},{"desc":"984","fix":"985"},{"desc":"986","fix":"987"},{"desc":"988","fix":"989"},{"desc":"986","fix":"990"},{"desc":"975","fix":"991"},"Update the dependencies array to be: [dispatch, resetGameState]",{"range":"992","text":"993"},"Update the dependencies array to be: [currentCard, currentRound, gameCompleted, gameStart]",{"range":"994","text":"995"},"Update the dependencies array to be: [setOffset, circumference, progress, offset, maxProgress]",{"range":"996","text":"997"},"Update the dependencies array to be: [generateCards]",{"range":"998","text":"999"},"Update the dependencies array to be: [elements, selected]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [props, user]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [currentSec, maxSec]",{"range":"1004","text":"1005"},"Update the dependencies array to be: [loggedIn, authUser, props]",{"range":"1006","text":"1007"},{"range":"1008","text":"993"},"Update the dependencies array to be: [currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",{"range":"1009","text":"1010"},"Update the dependencies array to be: [dispatch]",{"range":"1011","text":"1012"},"Update the dependencies array to be: [currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]",{"range":"1013","text":"1014"},{"range":"1015","text":"1012"},{"range":"1016","text":"1001"},[2314,2316],"[dispatch, resetGameState]",[2513,2540],"[currentCard, currentRound, gameCompleted, gameStart]",[805,849],"[setOffset, circumference, progress, offset, maxProgress]",[1045,1047],"[generateCards]",[546,556],"[elements, selected]",[918,924],"[props, user]",[497,499],"[currentSec, maxSec]",[1131,1151],"[loggedIn, authUser, props]",[2927,2929],[3094,3158],"[currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",[2689,2691],"[dispatch]",[2918,2986],"[currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]",[1967,1976],[546,556]]