[{"E:\\workspace\\John House\\PowerplayGames\\src\\index.js":"1","E:\\workspace\\John House\\PowerplayGames\\src\\reportWebVitals.js":"2","E:\\workspace\\John House\\PowerplayGames\\src\\Root.js":"3","E:\\workspace\\John House\\PowerplayGames\\src\\store.js":"4","E:\\workspace\\John House\\PowerplayGames\\src\\App.js":"5","E:\\workspace\\John House\\PowerplayGames\\src\\reducer.js":"6","E:\\workspace\\John House\\PowerplayGames\\src\\utility\\ScrollToTop.js":"7","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\HomePage\\HomePage.js":"8","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\SponserAContestPage\\SponserAContestPage.js":"9","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPlaySponsorsPage\\PowerPlaySponsorsPage.js":"10","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\PowerCenter.js":"11","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\SelectTeams\\SelectTeams.js":"12","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerBetLive\\PowerBetLive.js":"13","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\BingoPreGame\\BingoPreGame.js":"14","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerUpPage\\PowerUpPage.js":"15","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\BingoInProgressGame\\BingoInProgressGame.js":"16","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\GetUserInfoPage\\GetUserInfoPage.js":"17","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenter.js":"18","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPicks\\index.js":"19","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\ChaseACard\\index.js":"20","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\CardGame\\index.js":"21","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Privacy\\index.js":"22","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\TrustAndSafety\\index.js":"23","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\AccountSecurity\\index.js":"24","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\FAQ\\index.js":"25","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8\\index.js":"26","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8Draw\\index.js":"27","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Login\\index.js":"28","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\RoyalGame\\index.js":"29","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPoker\\index.js":"30","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\LandingPage\\index.js":"31","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\TermsOfUse\\index.js":"32","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\AccountPage\\index.js":"33","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ProtectedRoute\\index.js":"34","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\LivePowerPlay.js":"35","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\InteractiveContests.js":"36","E:\\workspace\\John House\\PowerplayGames\\src\\utility\\Scrollbar.js":"37","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenterTable.js":"38","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\InteractiveContests.js":"39","E:\\workspace\\John House\\PowerplayGames\\src\\utility\\shared.js":"40","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Header\\Header.js":"41","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Footer\\Footer.js":"42","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Trophy.js":"43","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Phone.js":"44","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Search.js":"45","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Document.js":"46","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Trash.js":"47","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PointsIcon.js":"48","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PIcon.js":"49","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ContestRules\\ContestRules.js":"50","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Contest\\Contest.js":"51","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\bingoActions.js":"52","E:\\workspace\\John House\\PowerplayGames\\src\\ui\\Select\\Select.js":"53","E:\\workspace\\John House\\PowerplayGames\\src\\ui\\CheckBox\\CheckBox.js":"54","E:\\workspace\\John House\\PowerplayGames\\src\\ui\\Input\\Input.js":"55","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPlays\\PowerPlays.js":"56","E:\\workspace\\John House\\PowerplayGames\\src\\global\\constants.js":"57","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGame\\BingoGame.js":"58","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGame2\\BingoGame2.js":"59","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\index.js":"60","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ReverseTimer\\ReverseTimer.js":"61","E:\\workspace\\John House\\PowerplayGames\\src\\config\\urls.js":"62","E:\\workspace\\John House\\PowerplayGames\\src\\config\\http.js":"63","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\landingPageActions.js":"64","E:\\workspace\\John House\\PowerplayGames\\src\\utility\\constants.js":"65","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\MegaPhone.js":"66","E:\\workspace\\John House\\PowerplayGames\\src\\config\\server_connection.js":"67","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AmericanFootballCup.js":"68","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Shape.js":"69","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AmericanFootballTicket.js":"70","E:\\workspace\\John House\\PowerplayGames\\src\\components\\HomePageContentHeader\\index.js":"71","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Card\\index.js":"72","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Button\\index.js":"73","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Progress\\index.js":"74","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\PowerPlayGridRow.js":"75","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SuperBall.js":"76","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Hockeys.js":"77","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\PowerPlayGridRow.js":"78","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Clock.js":"79","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Crown.js":"80","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Calender.js":"81","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\LeftArrow.js":"82","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\authActions.js":"83","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Eye.js":"84","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\BasketBall.js":"85","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Ball.js":"86","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenterTableRow.js":"87","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SuperBall2.js":"88","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Info.js":"89","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Stadium.js":"90","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CasinoChips.js":"91","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Alert\\index.js":"92","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Billards.js":"93","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8\\SelectNumbers.js":"94","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ResultsInfoComponent\\index.js":"95","E:\\workspace\\John House\\PowerplayGames\\src\\components\\AccountInfoComponent\\index.js":"96","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BalanceInfoComponent\\index.js":"97","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PageHeader\\index.js":"98","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Modal\\index.js":"99","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerpickCard\\index.js":"100","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\powerPokerActions.js":"101","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PlusAndMinus.js":"102","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Replace.js":"103","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards.js":"104","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Reload.js":"105","E:\\workspace\\John House\\PowerplayGames\\src\\config\\environment.js":"106","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\powerRoyalsActions.js":"107","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGameBall\\BingoGameBall.js":"108","E:\\workspace\\John House\\PowerplayGames\\src\\actions\\cardGameAction.js":"109","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ButtonDropdown2\\index.js":"110","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AngleIcon.js":"111","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\bingoReducer\\index.js":"112","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\powerRoyalsGameReducer\\index.js":"113","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\powerPokerReducer\\index.js":"114","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\landingPageReducer\\index.js":"115","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\cardGameReducer\\index.js":"116","E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\authReducer\\index.js":"117","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Sidebar\\index.js":"118","E:\\workspace\\John House\\PowerplayGames\\src\\components\\SidebarButton\\index.js":"119","E:\\workspace\\John House\\PowerplayGames\\src\\components\\GameCard\\index.js":"120","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BalanceInfoComponent\\ListItem.js":"121","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Money.js":"122","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Ticket.js":"123","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Input\\index.js":"124","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CheckIcon.js":"125","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Munch.js":"126","E:\\workspace\\John House\\PowerplayGames\\src\\components\\LottoBall\\index.js":"127","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PageHeaderCard\\index.js":"128","E:\\workspace\\John House\\PowerplayGames\\src\\components\\TimerClock\\TimerClock.js":"129","E:\\workspace\\John House\\PowerplayGames\\src\\components\\LiveGame\\LiveGame.js":"130","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ShareButton\\index.js":"131","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Link\\index.js":"132","E:\\workspace\\John House\\PowerplayGames\\src\\components\\SidebarLockItem\\index.js":"133","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Cell\\index.js":"134","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPickInfoCard\\index.js":"135","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ButtonDropdown\\index.js":"136","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Checkbox\\index.js":"137","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Select\\index.js":"138","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Accordian\\index.js":"139","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Plus.js":"140","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Minus.js":"141","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Tick.js":"142","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\index.js":"143","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Time.js":"144","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellHigh.js":"145","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellMedium.js":"146","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellLow.js":"147","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellVeryLow.js":"148","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Calendar2.js":"149","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Stadium2.js":"150","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Pinnacle.js":"151","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPickInfoCard\\Games.js":"152","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Clock2.js":"153","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Accordian\\ResultCard.js":"154","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\Clubs.js":"155","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\Hearts.js":"156","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\Spades.js":"157","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\Diamonds.js":"158","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\NoPick.js":"159","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubAce.js":"160","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubIcons.js":"161","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubKing.js":"162","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubJack.js":"163","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartsIcons.js":"164","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartKing.js":"165","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartJack.js":"166","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartAce.js":"167","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartQueen.js":"168","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeIconNumbers.js":"169","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeKing.js":"170","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeJack.js":"171","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeQueen.js":"172","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeAce.js":"173","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondAce.js":"174","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondIcons.js":"175","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondJack.js":"176","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondKing.js":"177","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondQueen.js":"178","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubQueen.js":"179","E:\\workspace\\John House\\PowerplayGames\\src\\components\\NoPick\\index.js":"180","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Baseball\\index.js":"181","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Doc.js":"182","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Header3\\index.js":"183","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SearchIcon.js":"184","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Tick2.js":"185"},{"size":623,"mtime":1614486404893,"results":"186","hashOfConfig":"187"},{"size":375,"mtime":1614486404939,"results":"188","hashOfConfig":"187"},{"size":296,"mtime":1614486404494,"results":"189","hashOfConfig":"187"},{"size":353,"mtime":1614486404943,"results":"190","hashOfConfig":"187"},{"size":3971,"mtime":1614499781586,"results":"191","hashOfConfig":"187"},{"size":162,"mtime":1614486404934,"results":"192","hashOfConfig":"187"},{"size":299,"mtime":1614486404948,"results":"193","hashOfConfig":"187"},{"size":9061,"mtime":1614486404907,"results":"194","hashOfConfig":"187"},{"size":2171,"mtime":1614486404931,"results":"195","hashOfConfig":"187"},{"size":10009,"mtime":1614486404922,"results":"196","hashOfConfig":"187"},{"size":2038,"mtime":1614486404918,"results":"197","hashOfConfig":"187"},{"size":12951,"mtime":1614486404929,"results":"198","hashOfConfig":"187"},{"size":18072,"mtime":1614486404916,"results":"199","hashOfConfig":"187"},{"size":4045,"mtime":1614486404897,"results":"200","hashOfConfig":"187"},{"size":5527,"mtime":1614486404926,"results":"201","hashOfConfig":"187"},{"size":8336,"mtime":1614486404896,"results":"202","hashOfConfig":"187"},{"size":6258,"mtime":1614486404906,"results":"203","hashOfConfig":"187"},{"size":4687,"mtime":1614486404913,"results":"204","hashOfConfig":"187"},{"size":13216,"mtime":1614486404920,"results":"205","hashOfConfig":"187"},{"size":9325,"mtime":1614486404901,"results":"206","hashOfConfig":"187"},{"size":39532,"mtime":1614486404899,"results":"207","hashOfConfig":"187"},{"size":1599,"mtime":1614486404927,"results":"208","hashOfConfig":"187"},{"size":1630,"mtime":1614486404934,"results":"209","hashOfConfig":"187"},{"size":1632,"mtime":1614486404895,"results":"210","hashOfConfig":"187"},{"size":1612,"mtime":1614486404905,"results":"211","hashOfConfig":"187"},{"size":6711,"mtime":1614486404903,"results":"212","hashOfConfig":"187"},{"size":13430,"mtime":1614486404905,"results":"213","hashOfConfig":"187"},{"size":4801,"mtime":1614486404910,"results":"214","hashOfConfig":"187"},{"size":22519,"mtime":1614486404929,"results":"215","hashOfConfig":"187"},{"size":23425,"mtime":1614486404925,"results":"216","hashOfConfig":"187"},{"size":8820,"mtime":1614486404908,"results":"217","hashOfConfig":"187"},{"size":1618,"mtime":1614486404933,"results":"218","hashOfConfig":"187"},{"size":2410,"mtime":1614486404894,"results":"219","hashOfConfig":"187"},{"size":889,"mtime":1614486404820,"results":"220","hashOfConfig":"187"},{"size":6097,"mtime":1614486404917,"results":"221","hashOfConfig":"187"},{"size":9530,"mtime":1614486404917,"results":"222","hashOfConfig":"187"},{"size":1025,"mtime":1614486404948,"results":"223","hashOfConfig":"187"},{"size":9482,"mtime":1614486404914,"results":"224","hashOfConfig":"187"},{"size":9530,"mtime":1614486404911,"results":"225","hashOfConfig":"187"},{"size":4380,"mtime":1614486404949,"results":"226","hashOfConfig":"187"},{"size":3146,"mtime":1614486404800,"results":"227","hashOfConfig":"187"},{"size":2055,"mtime":1614486404796,"results":"228","hashOfConfig":"187"},{"size":1784,"mtime":1614486404893,"results":"229","hashOfConfig":"187"},{"size":1910,"mtime":1614486404884,"results":"230","hashOfConfig":"187"},{"size":794,"mtime":1614486404888,"results":"231","hashOfConfig":"187"},{"size":1775,"mtime":1614486404877,"results":"232","hashOfConfig":"187"},{"size":1045,"mtime":1614486404892,"results":"233","hashOfConfig":"187"},{"size":3397,"mtime":1614486404885,"results":"234","hashOfConfig":"187"},{"size":2236,"mtime":1614486404883,"results":"235","hashOfConfig":"187"},{"size":1806,"mtime":1614486404796,"results":"236","hashOfConfig":"187"},{"size":6567,"mtime":1614486404794,"results":"237","hashOfConfig":"187"},{"size":255,"mtime":1614486404497,"results":"238","hashOfConfig":"187"},{"size":431,"mtime":1614486404947,"results":"239","hashOfConfig":"187"},{"size":438,"mtime":1614486404944,"results":"240","hashOfConfig":"187"},{"size":979,"mtime":1614486404946,"results":"241","hashOfConfig":"187"},{"size":3261,"mtime":1614486404816,"results":"242","hashOfConfig":"187"},{"size":50,"mtime":1614486404833,"results":"243","hashOfConfig":"187"},{"size":2658,"mtime":1614486404782,"results":"244","hashOfConfig":"187"},{"size":2032,"mtime":1614486404783,"results":"245","hashOfConfig":"187"},{"size":517,"mtime":1614486404936,"results":"246","hashOfConfig":"187"},{"size":1528,"mtime":1614486404822,"results":"247","hashOfConfig":"187"},{"size":112,"mtime":1614486404832,"results":"248","hashOfConfig":"187"},{"size":772,"mtime":1614486404831,"results":"249","hashOfConfig":"187"},{"size":366,"mtime":1614486404498,"results":"250","hashOfConfig":"187"},{"size":1345,"mtime":1614486404949,"results":"251","hashOfConfig":"187"},{"size":2866,"mtime":1614486404881,"results":"252","hashOfConfig":"187"},{"size":231,"mtime":1614486404832,"results":"253","hashOfConfig":"187"},{"size":3712,"mtime":1614486404833,"results":"254","hashOfConfig":"187"},{"size":5197,"mtime":1614486404888,"results":"255","hashOfConfig":"187"},{"size":3879,"mtime":1614486404834,"results":"256","hashOfConfig":"187"},{"size":2697,"mtime":1614486404803,"results":"257","hashOfConfig":"187"},{"size":378,"mtime":1614486404792,"results":"258","hashOfConfig":"187"},{"size":1408,"mtime":1614486404787,"results":"259","hashOfConfig":"187"},{"size":2843,"mtime":1614486404819,"results":"260","hashOfConfig":"187"},{"size":3322,"mtime":1614486404918,"results":"261","hashOfConfig":"187"},{"size":1999,"mtime":1614486404889,"results":"262","hashOfConfig":"187"},{"size":2014,"mtime":1614486404879,"results":"263","hashOfConfig":"187"},{"size":3322,"mtime":1614486404915,"results":"264","hashOfConfig":"187"},{"size":986,"mtime":1614486404876,"results":"265","hashOfConfig":"187"},{"size":2452,"mtime":1614486404877,"results":"266","hashOfConfig":"187"},{"size":2261,"mtime":1614486404837,"results":"267","hashOfConfig":"187"},{"size":1036,"mtime":1614486404880,"results":"268","hashOfConfig":"187"},{"size":1226,"mtime":1614486404496,"results":"269","hashOfConfig":"187"},{"size":1019,"mtime":1614486404879,"results":"270","hashOfConfig":"187"},{"size":1510,"mtime":1614486404836,"results":"271","hashOfConfig":"187"},{"size":8079,"mtime":1614486404836,"results":"272","hashOfConfig":"187"},{"size":6672,"mtime":1614486404915,"results":"273","hashOfConfig":"187"},{"size":8357,"mtime":1614486404890,"results":"274","hashOfConfig":"187"},{"size":957,"mtime":1614486404880,"results":"275","hashOfConfig":"187"},{"size":2244,"mtime":1614486404889,"results":"276","hashOfConfig":"187"},{"size":6094,"mtime":1614486404873,"results":"277","hashOfConfig":"187"},{"size":464,"mtime":1614486404779,"results":"278","hashOfConfig":"187"},{"size":1713,"mtime":1614486404836,"results":"279","hashOfConfig":"187"},{"size":7335,"mtime":1614486404902,"results":"280","hashOfConfig":"187"},{"size":933,"mtime":1614486404821,"results":"281","hashOfConfig":"187"},{"size":1523,"mtime":1614486404777,"results":"282","hashOfConfig":"187"},{"size":11445,"mtime":1614486404781,"results":"283","hashOfConfig":"187"},{"size":1446,"mtime":1614486404812,"results":"284","hashOfConfig":"187"},{"size":652,"mtime":1614486404810,"results":"285","hashOfConfig":"187"},{"size":483,"mtime":1614486404817,"results":"286","hashOfConfig":"187"},{"size":686,"mtime":1614486404499,"results":"287","hashOfConfig":"187"},{"size":1307,"mtime":1614486404885,"results":"288","hashOfConfig":"187"},{"size":2419,"mtime":1614486404887,"results":"289","hashOfConfig":"187"},{"size":13887,"mtime":1614486404837,"results":"290","hashOfConfig":"187"},{"size":989,"mtime":1614486404885,"results":"291","hashOfConfig":"187"},{"size":161,"mtime":1614486404831,"results":"292","hashOfConfig":"187"},{"size":681,"mtime":1614486404500,"results":"293","hashOfConfig":"187"},{"size":1276,"mtime":1614486404785,"results":"294","hashOfConfig":"187"},{"size":574,"mtime":1614486404497,"results":"295","hashOfConfig":"187"},{"size":1897,"mtime":1614486404789,"results":"296","hashOfConfig":"187"},{"size":693,"mtime":1614486404834,"results":"297","hashOfConfig":"187"},{"size":533,"mtime":1614486404935,"results":"298","hashOfConfig":"187"},{"size":970,"mtime":1614486404938,"results":"299","hashOfConfig":"187"},{"size":971,"mtime":1614486404938,"results":"300","hashOfConfig":"187"},{"size":744,"mtime":1614486404937,"results":"301","hashOfConfig":"187"},{"size":907,"mtime":1614486404935,"results":"302","hashOfConfig":"187"},{"size":848,"mtime":1614486404935,"results":"303","hashOfConfig":"187"},{"size":402,"mtime":1614486404826,"results":"304","hashOfConfig":"187"},{"size":945,"mtime":1614486404827,"results":"305","hashOfConfig":"187"},{"size":10454,"mtime":1614486404799,"results":"306","hashOfConfig":"187"},{"size":777,"mtime":1614486404779,"results":"307","hashOfConfig":"187"},{"size":3346,"mtime":1614486404882,"results":"308","hashOfConfig":"187"},{"size":3315,"mtime":1614486404892,"results":"309","hashOfConfig":"187"},{"size":1775,"mtime":1614486404804,"results":"310","hashOfConfig":"187"},{"size":1063,"mtime":1614486404876,"results":"311","hashOfConfig":"187"},{"size":3374,"mtime":1614486404883,"results":"312","hashOfConfig":"187"},{"size":1992,"mtime":1614486404808,"results":"313","hashOfConfig":"187"},{"size":6118,"mtime":1614486404814,"results":"314","hashOfConfig":"187"},{"size":703,"mtime":1614486404830,"results":"315","hashOfConfig":"187"},{"size":3722,"mtime":1614486404807,"results":"316","hashOfConfig":"187"},{"size":474,"mtime":1614486404825,"results":"317","hashOfConfig":"187"},{"size":330,"mtime":1614486404805,"results":"318","hashOfConfig":"187"},{"size":608,"mtime":1614486404829,"results":"319","hashOfConfig":"187"},{"size":1546,"mtime":1614486404792,"results":"320","hashOfConfig":"187"},{"size":6970,"mtime":1614486404816,"results":"321","hashOfConfig":"187"},{"size":2106,"mtime":1614486404788,"results":"322","hashOfConfig":"187"},{"size":721,"mtime":1614486404793,"results":"323","hashOfConfig":"187"},{"size":1046,"mtime":1614486404824,"results":"324","hashOfConfig":"187"},{"size":1586,"mtime":1614486404775,"results":"325","hashOfConfig":"187"},{"size":1211,"mtime":1614486404885,"results":"326","hashOfConfig":"187"},{"size":896,"mtime":1614486404882,"results":"327","hashOfConfig":"187"},{"size":923,"mtime":1614486404890,"results":"328","hashOfConfig":"187"},{"size":1497,"mtime":1614486404873,"results":"329","hashOfConfig":"187"},{"size":2385,"mtime":1614486404892,"results":"330","hashOfConfig":"187"},{"size":2720,"mtime":1614486404874,"results":"331","hashOfConfig":"187"},{"size":3150,"mtime":1614486404875,"results":"332","hashOfConfig":"187"},{"size":2937,"mtime":1614486404874,"results":"333","hashOfConfig":"187"},{"size":2456,"mtime":1614486404875,"results":"334","hashOfConfig":"187"},{"size":2761,"mtime":1614486404836,"results":"335","hashOfConfig":"187"},{"size":2948,"mtime":1614486404889,"results":"336","hashOfConfig":"187"},{"size":2355,"mtime":1614486404884,"results":"337","hashOfConfig":"187"},{"size":1854,"mtime":1614486404815,"results":"338","hashOfConfig":"187"},{"size":1464,"mtime":1614486404877,"results":"339","hashOfConfig":"187"},{"size":3114,"mtime":1614486404775,"results":"340","hashOfConfig":"187"},{"size":2588,"mtime":1614486404846,"results":"341","hashOfConfig":"187"},{"size":2623,"mtime":1614486404862,"results":"342","hashOfConfig":"187"},{"size":2633,"mtime":1614486404872,"results":"343","hashOfConfig":"187"},{"size":2662,"mtime":1614486404854,"results":"344","hashOfConfig":"187"},{"size":797,"mtime":1614486404883,"results":"345","hashOfConfig":"187"},{"size":2657,"mtime":1614486404839,"results":"346","hashOfConfig":"187"},{"size":49623,"mtime":1614486404840,"results":"347","hashOfConfig":"187"},{"size":103727,"mtime":1614486404845,"results":"348","hashOfConfig":"187"},{"size":103611,"mtime":1614486404842,"results":"349","hashOfConfig":"187"},{"size":18471,"mtime":1614486404863,"results":"350","hashOfConfig":"187"},{"size":95590,"mtime":1614486404860,"results":"351","hashOfConfig":"187"},{"size":124355,"mtime":1614486404858,"results":"352","hashOfConfig":"187"},{"size":1484,"mtime":1614486404855,"results":"353","hashOfConfig":"187"},{"size":106940,"mtime":1614486404862,"results":"354","hashOfConfig":"187"},{"size":36465,"mtime":1614486404865,"results":"355","hashOfConfig":"187"},{"size":91150,"mtime":1614486404869,"results":"356","hashOfConfig":"187"},{"size":100183,"mtime":1614486404867,"results":"357","hashOfConfig":"187"},{"size":118930,"mtime":1614486404872,"results":"358","hashOfConfig":"187"},{"size":41250,"mtime":1614486404864,"results":"359","hashOfConfig":"187"},{"size":1126,"mtime":1614486404847,"results":"360","hashOfConfig":"187"},{"size":12132,"mtime":1614486404848,"results":"361","hashOfConfig":"187"},{"size":85097,"mtime":1614486404850,"results":"362","hashOfConfig":"187"},{"size":55523,"mtime":1614486404852,"results":"363","hashOfConfig":"187"},{"size":102280,"mtime":1614486404854,"results":"364","hashOfConfig":"187"},{"size":99880,"mtime":1614486404846,"results":"365","hashOfConfig":"187"},{"size":544,"mtime":1614486404811,"results":"366","hashOfConfig":"187"},{"size":5242,"mtime":1614573597337,"results":"367","hashOfConfig":"187"},{"size":2440,"mtime":1614510848750,"results":"368","hashOfConfig":"187"},{"size":1669,"mtime":1614523375107,"results":"369","hashOfConfig":"187"},{"size":1213,"mtime":1614524867139,"results":"370","hashOfConfig":"187"},{"size":1382,"mtime":1614526110472,"results":"371","hashOfConfig":"187"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},"1j02syp",{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"374"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"374"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"407","usedDeprecatedRules":"374"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"374"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"374"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"374"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"374"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"374"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"374"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"374"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"374"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"374"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"374"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"374"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"374"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"374"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"374"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"374"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"374"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"374"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"374"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"374"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"374"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"374"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"374"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"374"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"374"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"374"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"374"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"374"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"374"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"374"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"374"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"374"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"374"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"374"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"374"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"374"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"374"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},"E:\\workspace\\John House\\PowerplayGames\\src\\index.js",[],["782","783"],"E:\\workspace\\John House\\PowerplayGames\\src\\reportWebVitals.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\Root.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\store.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\App.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducer.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\utility\\ScrollToTop.js",["784","785"],"import React, { useEffect } from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n\r\nconst ScrollToTop = props => {\r\n    const location = useLocation();\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [location])\r\n    return null;\r\n}\r\n\r\nexport default ScrollToTop;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\HomePage\\HomePage.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\SponserAContestPage\\SponserAContestPage.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPlaySponsorsPage\\PowerPlaySponsorsPage.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\PowerCenter.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\SelectTeams\\SelectTeams.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerBetLive\\PowerBetLive.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\BingoPreGame\\BingoPreGame.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerUpPage\\PowerUpPage.js",["786","787","788"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { isEmpty, isEqual } from 'lodash';\r\n\r\nimport Header from '../../components/Header/Header';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport './PowerUpPage.scss';\r\nimport Input from '../../ui/Input/Input';\r\nimport Alert from '../../components/Alert';\r\nimport { redirectTo } from '../../utility/shared';\r\nimport http from '../../config/http';\r\nimport { URLS } from '../../config/urls';\r\n\r\nconst INITIAL_STATE = { username: '', email: '', password: '', cPassword: '', isLoading: false, isSuccess: false, isFailed: false, errorMsg: '', message: '' }\r\n\r\nconst PowerUpPage = props => {\r\n    const [user, setUser] = useState(INITIAL_STATE);\r\n\r\n    useEffect(() => { \r\n        \r\n        if (user.isSuccess) {\r\n            redirectTo(props, {path: 'login'})\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const { username = '', email = '', password = '', cPassword = '' } = user || {}\r\n        setUser({ ...user, isLoading: true });\r\n        \r\n\r\n        if (isEmpty(username) || isEmpty(email) || isEmpty(password) || isEmpty(cPassword)) {\r\n            return setUser({...user, isFailed: true, errorMsg: 'All fields are required'})\r\n        }\r\n\r\n        if (!isEqual(password, cPassword)) {\r\n            return setUser({...user, isFailed: true, errorMsg: 'Password did not match'})\r\n        }\r\n\r\n        const data = {\r\n            // type: 'register',\r\n            // user: {\r\n                username,\r\n                email,\r\n                password\r\n            // }\r\n        }\r\n\r\n        const response = await http.post(URLS.AUTH.REGISTER, data);\r\n        if (response.data.status === false) {\r\n            return setUser({ ...user, isLoading: false, isFailed: true, errorMsg: response.data.message });\r\n        }\r\n\r\n        setUser({...user, isLoading: false, isSuccess: true, errorMsg: response.data.message})\r\n        // props.history.push('/user-profile-info')\r\n    }\r\n\r\n    return (\r\n        <div className='__PowerUpPage'>\r\n            <Header isStick={true} />\r\n            <div className='__background-section'>\r\n                <div className='__background-color'>\r\n                    <div className='__center __mt-7 __sign-in-container'>\r\n                        <div className='__inline-block'>\r\n                            <div className='__viewport-title __ml-1 __mb-1 __mr-1 __primary __m-a __h3 __bold __p-s __h4-on-small'>Get ready to Power-up!</div>\r\n                            <div className='__viewport-subtitle __h6 __mediam-on-small'>Let’s start your new experience our ground-breaking live-play <br className='__hide-on-small' /> games where you have the Power to control your destiny!</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='__sign-in-section __form-section'>\r\n                <div className='__form-wrapper __sign-in-container'>\r\n                    <form className='__sign-in-form __container' action={null} onSubmit={onSubmit}>\r\n                        {\r\n                            !user?.isFailed && !isEmpty(user.errorMsg) &&\r\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} danger />\r\n                        }\r\n                        {\r\n                            user.isFailed && !isEmpty(user.errorMsg) &&\r\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} danger />\r\n                        }\r\n\r\n                        {\r\n                            user.isSuccess && !isEmpty(user.errorMsg) &&\r\n                            <Alert renderMsg={() => <p>{ user.errorMsg }</p>} success />\r\n                        }\r\n                        \r\n                        <Input type='text' title='Username' id='username' value={user.username} onChange={(e) => {\r\n                            setUser({ ...user, username: e?.target?.value })\r\n                        }} />\r\n                        <Input type='email' title='E-mail' id='email' value={user.email} onChange={(e) => {\r\n                            setUser({ ...user, email: e?.target?.value })\r\n                        }} />\r\n                        <Input type='password' title='Create-a-password' id='password' value={user.password} onChange={(e) => {\r\n                            setUser({ ...user, password: e?.target?.value })\r\n                        }} />\r\n                        <Input type='password' title='Confirm your password' id='confirmpassword' value={user.cPassword} onChange={(e) => { setUser({ ...user, cPassword: e?.target?.value }) }} />\r\n                        <button className='__btn __h4 __submit-btn __uppercase __block __h5-on-small' disabled={user.isLoading}>\r\n                            {\r\n                                user.isLoading\r\n                                    ?\r\n                                    'Loading...'\r\n                                    :\r\n                                    'Next'\r\n                            }\r\n                        </button>\r\n                    </form>\r\n                    <div className='__center __mt-4 __already-have-an-account'>Already have an account? <Link to='/login' className='__login-link'>Log in!</Link></div>\r\n                </div>\r\n            </div>\r\n            <Footer isBlack={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PowerUpPage;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\BingoInProgressGame\\BingoInProgressGame.js",["789","790","791","792"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './BingoInProgressGame.scss';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport Header from '../../components/Header/Header';\r\nimport { Link } from 'react-router-dom';\r\nimport clockimage from '../../assets/StopWatchIcon@2x.png';\r\nimport lotteryImage from '../../assets/lotteryImg@2x.png';\r\nimport ReverseTimer from '../../components/ReverseTimer/ReverseTimer';\r\nimport BingoGame2 from '../../components/BingoGame2/BingoGame2';\r\nimport BingoGame from '../../components/BingoGame/BingoGame';\r\nimport PowerPlays from '../../components/PowerPlays/PowerPlays';\r\nimport ProgressBar from '../../components/Progress';\r\nimport { checkRange, getRandomNumberBetween } from '../../utility/shared';\r\nimport * as Actions from '../../actions/bingoActions';\r\n\r\nconst BINGO = { b: [], n: [], i: [], g: [], o: [] };\r\nconst TARGET_NUMBERS = [\r\n    [1, 2, 3, 4, 5], [16,17,18,19,20], [31,32,33,34,35], [46,47,48,49,50], [61,62,63,64,65]\r\n];\r\nconst MAX_PROGRESS = 5;\r\nconst MAX_LEVELS = 25;\r\n\r\nconst BingoInProgressGame = props => {\r\n    // const [bingo, setBingo] = useState(INITIAL_STATE);\r\n    const [currentNumber, setCurrentNumber] = useState(0);\r\n    const [progressCount, setProgressCount] = useState(5);\r\n\r\n    const dispatch = useDispatch();\r\n    const { bingoGame } = useSelector((state) => state);\r\n\r\n    useEffect(() => { }, [currentNumber]);\r\n\r\n    useEffect(() => {\r\n        let progress = null;\r\n        \r\n        progress = gameStart();\r\n\r\n        return function cleanup() {\r\n            if(progress)\r\n                clearInterval(progress);\r\n        }\r\n     }, []);\r\n\r\n    const gameStart = () => {\r\n        let progress = MAX_PROGRESS; //progress bar max value\r\n        let timeInterval = null;\r\n        let _levelCount = 1; //initial level will be 1\r\n        timeInterval = setInterval(() => { \r\n            if (progress > 0) {\r\n                progress--;\r\n                setProgressCount(progress);\r\n            } else {\r\n                //generate random number\r\n                let number = generateAndSetNumber();\r\n\r\n                let B = checkRange(number, 1, 15);\r\n                let I = checkRange(number, 16, 30);\r\n                let N = checkRange(number, 31, 45);\r\n                let G = checkRange(number, 46, 60);\r\n                let O = checkRange(number, 61, 75);\r\n\r\n                const b = [], i = [], n = [], g = [], o = [];\r\n                if (B !== 0) {\r\n                    b.push(number);\r\n                    let _b = [...BINGO.b, ...b];\r\n                    BINGO.b = _b;\r\n                }\r\n\r\n                if (I !== 0) {\r\n                    i.push(number);\r\n                    let _i = [...BINGO.i, ...i];\r\n                    BINGO.i = _i;\r\n                }\r\n\r\n                if (N !== 0) {\r\n                    n.push(number);\r\n                    let _n = [...BINGO.n, ...n];\r\n                    BINGO.n = _n;\r\n                }\r\n\r\n                if (G !== 0) {\r\n                    g.push(number);\r\n                    let _g = [...BINGO.g, ...g];\r\n                    BINGO.g = _g;\r\n                }\r\n\r\n                if (O !== 0) {\r\n                    o.push(number);\r\n                    let _o = [...BINGO.o, ...o];\r\n                    BINGO.o = _o;\r\n                }\r\n                _levelCount++;\r\n\r\n                //reset progress bar\r\n                progress = 5;\r\n                setProgressCount(progress);\r\n                dispatch(Actions.bingoInProgress(BINGO));\r\n                \r\n                if (_levelCount > MAX_LEVELS) {\r\n                    clearInterval(timeInterval);\r\n                    console.log('game over');\r\n                }\r\n            }\r\n        }, 1000);\r\n        \r\n        \r\n        return timeInterval;\r\n    }\r\n\r\n    const generateAndSetNumber = () => {\r\n        let number = getRandomNumberBetween(1, 75);\r\n        if (BINGO.b.includes(number) || BINGO.i.includes(number) || BINGO.n.includes(number) || BINGO.g.\r\n        includes(number) || BINGO.o.includes(number)) {\r\n            return generateAndSetNumber();\r\n        }\r\n\r\n        setCurrentNumber(number);\r\n\r\n        return number;\r\n    }\r\n\r\n    return (\r\n        <div className='__BingoInProgressGame __BingoGame'>\r\n            <Header isStick={true} />\r\n            <div className='__flex-stretch __main __container'>\r\n                <div className='__main-left __mt-5 __ml-5'>\r\n                    <div className='__title __bold __h2'>Bingo</div>\r\n                    <div className='__hide-on-large'>\r\n                        <div className='__mt-1'><span className='__h3'>Win <span className='__primary-color'>$2000 </span></span><span className='__h6'>CAD</span></div>\r\n                        <Link to='/' className='__uppercase __primary-color __see-contesy-rules __inline-block __mt-1 __mb-6 __light-bold'>SEE CONTEST RULES</Link>\r\n                        <div className='__h4'>In Play</div>\r\n                        <div className='__primary __progress-bar __mb-2' style={{ width: '26%' }}></div>\r\n                    </div>\r\n                    <div className='__timer-section __relative __center'>\r\n                        <div className='__absolute __center'>\r\n                            <div className='__mt-2'>Next number drawn in</div>\r\n                            {/* <ReverseTimer className='__ml-a __mr-a __mt-1' /> */}\r\n                            <ProgressBar\r\n                            progress={progressCount}\r\n                            maxProgress={MAX_PROGRESS}\r\n                            size={62}\r\n                            strokeWidth={4}\r\n                            circleOneStroke='grey'\r\n                            circleTwoStroke='#fff' />\r\n                            <div className='__ball __h3 __primary-color __column __ai __flex-center __m-a __mb-1 __mt-1'>\r\n                                {\r\n                                    currentNumber !== 0 ?\r\n                                        <>\r\n                                            <div>G</div>\r\n                                            <div>{ currentNumber }</div>\r\n                                        </>\r\n                                        :\r\n                                        <div>-</div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='__main-center __mt-6 __ml-a __mr-a'>\r\n                    <div className='__header __flex-stretch __relative'>\r\n                        <div className='__mb-1 __hide-on-large'>\r\n                            <div className='__light-bold'>Jackpot</div>\r\n                            <div><span className='__h2 __bolder __primary-color'>$2000</span> <span>CAD</span></div>\r\n                            <div className='__smaller'>\r\n                                Odds of winning depend on\r\n                                <div className='__light-bold'>Powerplay usage</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='__border __hide-on-large'></div>\r\n                        <div className='__live-draw-in-progress-section'>\r\n                            <div className='__h6 __live-draw __light-bold __inline-block __mt-1 __smaller-on-mediam'>Live Draw in Progress</div>\r\n                            <div className='__flex __mt-1 __live-draw-blog'>\r\n                                <img src={clockimage} alt='' className='__in-progress-clock-image __mr-1 __hide-on-large' />\r\n                                <div className='__smaller'>Pay attention, you will have 12 seconds <br className='__hide-on-large' /> to match each ball.</div>\r\n                            </div>\r\n                        </div>\r\n                        <img alt='' src={lotteryImage} className='__absolute __lottery-image __hide-on-large' />\r\n                    </div>\r\n                    <BingoGame targetNumbers={TARGET_NUMBERS} />\r\n                </div>\r\n                <PowerPlays />\r\n            </div>\r\n            <div className='__container'>\r\n                <BingoGame2 />\r\n            </div>\r\n            <Footer isBlack={true} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BingoInProgressGame;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\GetUserInfoPage\\GetUserInfoPage.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenter.js",["793","794","795"],"import React, { Fragment } from 'react';\r\nimport { Link, NavLink, Route } from 'react-router-dom';\r\n\r\nimport classes from './MyGameCenter.module.scss';\r\nimport Scoreboard from '../../assets/scoreboard.png';\r\nimport Emblem from '../../assets/emblem.png';\r\nimport Header from '../../components/Header/Header';\r\nimport './MyGameCenter.scss';\r\nimport './table.scss';\r\nimport Footer from '../../components/Footer/Footer'\r\nimport InteractiveContests from './InteractiveContests';\r\nimport Button from '../../components/Button';\r\nimport Card from '../../components/Card';\r\nimport PIcon from '../../icons/PIcon';\r\nimport MyGameCenterTable from './MyGameCenterTable';\r\nimport PointsIcon from '../../icons/PointsIcon';\r\n// import Scoreboard from '../../icons/Scoreboard';\r\n\r\nconst MyGameCenter = props => {\r\n    const { url } = props.match;\r\n    return (\r\n        <Fragment>\r\n            <Header isStick={true} />\r\n            <div className='__PowerCenter'>\r\n                <div className='__viewport-large-title __center __pt-1'>My Game Center</div>\r\n                <div className={classes.header2_container}>\r\n                    <div className={classes.header2_card}>\r\n                        <Card>\r\n                            <div className={classes.header2_card_1}>\r\n                                <div className={classes.header2_card_1_1}>\r\n                                    <PointsIcon />\r\n                                    <div>\r\n                                        <h3>$36</h3>\r\n                                        <span>USD Balance</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={classes.header2_card_1_1}>\r\n                                    <PIcon />\r\n                                    <div>\r\n                                        <h3>15,000</h3>\r\n                                        <span>Power Balance</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n                    <div className={classes.header2_card}>\r\n                        <Card>\r\n                            <div className={classes.header2_card_2}>\r\n                                <p>My next contest starts in</p>\r\n                                <h3>46:21:21</h3>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n                <div className='__flex __power-center-links __mb-5'>\r\n                    <NavLink exact to={`${url}`} className='__f1 __block __right __relative'>\r\n                        <span className='__block'>Live-Play Fantasy Sports</span>\r\n                    </NavLink>\r\n                    <NavLink to={`${url}/contests`} className='__f1 __block __relative'>\r\n                        <span className='__block'>Interactive Promo<span className='__hide-on-small'>tional</span> Contests</span>\r\n                    </NavLink>\r\n                </div>\r\n                <div className={classes.container}>\r\n                    <Route exact path={url} component={InteractiveContests} />\r\n                    <Route path={`${url}/contests`} component={MyGameCenterTable} />\r\n                </div>\r\n            </div>\r\n            <div className={classes.body_footer}>\r\n                <div>\r\n                    <Card>\r\n                        <div className={classes.body_footer_card_wrapper}>\r\n                            <div className={classes.body_footer_card}>\r\n                                <img src={Scoreboard} width={100} height={100} />\r\n                                <p>Want to explore more live Sports Games ?</p>\r\n                            </div>\r\n                            <Button isRounded block transparent title=\"More Live Sports Games\" />\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n                \r\n                <div>\r\n                    <Card>\r\n                        <div className={classes.body_footer_card_wrapper}>\r\n                            <div className={classes.body_footer_card}>\r\n                                <img src={Emblem} width={100} height={100} />\r\n                                <p>Want to explore more Promotional Contests ?</p>\r\n                            </div>\r\n                            <Button isRounded block transparent title=\"More Promo Contests\" />\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n            <Footer isBlack={true} />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MyGameCenter;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPicks\\index.js",["796","797","798","799","800","801"],"import React, { useState } from 'react'\r\nimport { useMediaQuery } from 'react-responsive'\r\n\r\nimport Headers from '../../components/Header/Header'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport PowerPickCard from '../../components/PowerpickCard'\r\nimport ButtonDropdown from '../../components/ButtonDropdown'\r\nimport classes from './index.module.scss'\r\nimport PowerPickInfoCard from '../../components/PowerPickInfoCard'\r\nimport PlayerImage from '../../assets/player.png'\r\nimport Button from '../../components/Button'\r\nimport AngleIcon from '../../icons/AngleIcon'\r\nimport Cell from '../../components/Cell'\r\n\r\nconst listItems = [\r\n    { title: 'Football', value: 'football' },\r\n    { title: 'Basketball', value: 'basketball' }\r\n]\r\n\r\nfunction PowerPicksPage() {\r\n    const [selected, setSelected] = useState('')\r\n    const isTableOrMobile = useMediaQuery({query: '(max-width: 1224px)'})\r\n    return (\r\n        <>\r\n            <Headers />\r\n            <div className={classes.wrapper}>\r\n                <div className={classes.page_left}>\r\n                    <div className={classes.header}>\r\n                        <div className={classes.header_top}>\r\n                            <h1><span className={classes.h1_orange}>Power</span><span>Picks</span></h1>\r\n                            <p>Power up your sports bets with our proven winning system!</p>\r\n                        </div>\r\n\r\n                        <div className={classes.header_bottom}>\r\n                            {\r\n                                !isTableOrMobile ?\r\n                                    <>\r\n                                        <PowerPickCard shadow>\r\n                                            <p>Spread</p>\r\n                                            <span>54%</span>\r\n                                        </PowerPickCard>\r\n\r\n                                        <PowerPickCard shadow>\r\n                                            <p>Winner</p>\r\n                                            <span>54%</span>\r\n                                        </PowerPickCard>\r\n\r\n                                        <PowerPickCard shadow>\r\n                                            <p>Over/Under</p>\r\n                                            <span>54%</span>\r\n                                        </PowerPickCard>\r\n                                    </>\r\n                                    :\r\n                                    <div className={classes.header_bottom_mobile}>\r\n                                    <PowerPickCard shadow styles={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', fontSize: '16px'}}>\r\n                                        <div>\r\n                                            <p>Spread</p>\r\n                                            <span>54%</span>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <p>Winner</p>\r\n                                            <span>54%</span>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <p>Over/Under</p>\r\n                                            <span>54%</span>\r\n                                        </div>\r\n                                        </PowerPickCard>\r\n                                    </div>    \r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={classes.content_left}>\r\n                        <div className={classes.content_header}>\r\n                            <div className={classes.content_header_left}>\r\n                                <p>Show Decimal Odds</p>\r\n                                {\r\n                                    isTableOrMobile &&\r\n                                        <p>Confidence Levels</p>\r\n                                }\r\n                            </div>\r\n\r\n                            <div className={classes.content_header_right}>\r\n                                <ButtonDropdown elements={listItems} selected={listItems[0]} onChange={(e) => {\r\n                                    setSelected(e?.target?.value)\r\n                                    }} isActive styles={{margin: '0 5px'}} />\r\n                                \r\n                                <Button title=\"NHL\" styles={{\r\n                                    width: isTableOrMobile ? '98%' : '90px',\r\n                                    backgroundColor: '#303133',\r\n                                    border: '1px solid #fff',\r\n                                    borderRadius: '12px', margin: '0 4px',\r\n                                    margin: '0 3px'\r\n                                }} />\r\n\r\n                                <Button title=\"NBA\" styles={{\r\n                                    width: isTableOrMobile ? '98%' : '90px',\r\n                                    backgroundColor: '#303133',\r\n                                    border: '1px solid #fff',\r\n                                    borderRadius: '12px', margin: '0 4px',\r\n                                    margin: '0 3px'\r\n                                }} />\r\n\r\n                                <Button title=\"NFL\" styles={{\r\n                                    width: isTableOrMobile ? '98%' : '90px',\r\n                                    backgroundColor: '#303133',\r\n                                    border: '1px solid #fff',\r\n                                    borderRadius: '12px', margin: '0 4px',\r\n                                    margin: '0 3px'\r\n                                }} />\r\n\r\n                                <Button title=\"MLB\" styles={{\r\n                                    width: isTableOrMobile ? '98%' : '90px',\r\n                                    backgroundColor: '#303133',\r\n                                    border: '1px solid #fff',\r\n                                    borderRadius: '12px', margin: '0 4px',\r\n                                    margin: '0 3px'\r\n                                }} />\r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <div className={classes.content_body}>\r\n                            {\r\n                                !isTableOrMobile ?\r\n                                    <PowerPickCard styles={{width: '100%'}}>\r\n                                        <PowerPickInfoCard\r\n                                            showHeader\r\n                                            game1={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"Bengals +3.5\",\r\n                                                highCell: true,\r\n                                             }}\r\n                                            game2={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"Saints to Win\",\r\n                                                mediumCell: true,\r\n                                            }}\r\n                                            game3={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"U 45.5\",\r\n                                                veryLowCell: true,\r\n                                            }}\r\n                                        />\r\n                                        <PowerPickInfoCard\r\n                                            game1={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game2={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game3={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                        />\r\n                                        <PowerPickInfoCard\r\n                                            game1={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game2={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game3={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                        />\r\n                                    </PowerPickCard>\r\n                                    :\r\n                                    <>\r\n                                        <PowerPickInfoCard\r\n                                            game1={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"Bengals +3.5\",\r\n                                                highCell: true,\r\n                                            }}\r\n                                            game2={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"Saints to Win\",\r\n                                                mediumCell: true,\r\n                                            }}\r\n                                            game3={{\r\n                                                isCell: true,\r\n                                                cellTitle: \"U 45.5\",\r\n                                                veryLowCell: true,\r\n                                            }}\r\n                                        />\r\n                                        <PowerPickInfoCard\r\n                                            game1={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game2={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game3={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                        />\r\n                                        <PowerPickInfoCard\r\n                                            game1={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game2={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                             game3={{\r\n                                                isPowerUp: true,\r\n                                             }}\r\n                                        />\r\n                                    </>\r\n                            }\r\n                        </div>\r\n                        <div className={classes.content_body_footer}>\r\n                            <strong>Log in to reveal <span>More Picks!</span> </strong>\r\n                            <Button title=\"Log in\" icon={null} block style={{width: isTableOrMobile ? '80%' : '30%', height: '52px'}} />\r\n\r\n                            {\r\n                                !isTableOrMobile &&\r\n                                <div className={classes.content_body_footer_bottom}>\r\n                                    <AngleIcon style={{height: 'auto', position: 'absolute', bottom: '10px', left: '20px', zIndex: '-1'}} />\r\n                                    <img src={PlayerImage} width={316} height={330} />\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    !isTableOrMobile &&\r\n                        <div className={classes.page_sidebar}>\r\n                        <Sidebar styles={{width: '18%'}}>\r\n                            <div className={classes.sidebar}>\r\n                                <h2>Confidence Level</h2>\r\n                                <Cell high text=\"HIGH\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\r\n                                <Cell medium text=\"MEDIUM\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\r\n                                <Cell low text=\"LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\r\n                                <Cell veryLow text=\"VERY LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\r\n                            </div>\r\n                        </Sidebar>\r\n                        </div>\r\n                }\r\n            </div>\r\n            <Footer isBlack />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PowerPicksPage\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\ChaseACard\\index.js",["802","803"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport Card from '../../components/Card'\r\nimport GameCard from '../../components/GameCard'\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport CardsSvg from '../../icons/Cards'\r\nimport CardBack from '../../assets/card_back.png'\r\nimport ProgressBar from '../../components/Progress'\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport Alert from '../../components/Alert'\r\nimport classes from './cardGamePage.module.scss'\r\nimport { redirectTo } from '../../utility/shared'\r\n\r\n// const MAX_TIMER = 5;\r\n\r\nfunction ChaseACard(props) {\r\n    // const [timer, setTimer] = useState(MAX_TIMER)\r\n    const [cards, setCards] = useState([])\r\n    const [hasWon, setHasWonState] = useState(false)\r\n    const [hasCardSelected, setHasCardSelected] = useState(false)\r\n    const [spadeCardIndex, setSpadeCardIndex] = useState(null)\r\n\r\n    useEffect(() => {\r\n        resetAllState()\r\n        generateCards()\r\n    }, [])\r\n\r\n    // useEffect(() => {\r\n    //     let timeOut = null\r\n    //     if (timer > 0 && hasCardSelected) {\r\n    //     let _timer = timer\r\n    //         timeOut = setInterval(() => { \r\n    //             _timer -= 1\r\n    //             setTimer(_timer)\r\n    //         }, 1000)\r\n    //     } else {\r\n    //         clearInterval(timeOut)\r\n    //     }\r\n\r\n    //     return () => {\r\n    //         return clearInterval(timeOut)\r\n    //     }\r\n    //  }, [timer, hasCardSelected])\r\n\r\n    function resetAllState() {\r\n        // setTimer(MAX_TIMER)\r\n        setCards([])\r\n        setSpadeCardIndex(null)\r\n        setHasCardSelected(false)\r\n        setHasWonState(false)\r\n    }\r\n\r\n    function onCardClick (card, index) {\r\n        if(hasWon || hasCardSelected) return\r\n\r\n        const { isSelected = false, card: { suit, rank } = {} } = card || {}\r\n        \r\n        let _isSelected = isSelected\r\n        _isSelected = true;\r\n        card.isSelected = _isSelected\r\n\r\n        const _selectedCards = [...cards]\r\n        _selectedCards[index] = card\r\n\r\n        setHasCardSelected(true)\r\n        setCards(_selectedCards)\r\n\r\n        if (suit === CONSTANTS.CARD_SUITS.SPADE && CONSTANTS.CARD_RANKS[rank] === \"A\") {\r\n            return setHasWonState(true)\r\n        }\r\n     }\r\n\r\n    function generateCards() {\r\n        const _cards = []\r\n        for (let suit = 1; suit <= 4; suit++) {\r\n            for (let rank = 0; rank < 13; rank++) {\r\n                const _card = {}\r\n                _card.card = card(suit, rank)\r\n                _card.isSelected = false\r\n                _cards.push(_card)\r\n            }\r\n        }\r\n\r\n        shuffleCards(_cards)\r\n        let spadeOfAceIndex = _cards.findIndex(_card => _card?.card?.suit === CONSTANTS.CARD_SUITS.SPADE && _card?.card?.rank === 12)\r\n        setSpadeCardIndex(spadeOfAceIndex)\r\n        setCards(_cards)\r\n    }\r\n\r\n    function shuffleCards(cards = []) {\r\n        for (let i = cards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [cards[i], cards[j]] = [cards[j], cards[i]]\r\n        }\r\n    }\r\n\r\n    function onRevealCard() {\r\n        if(hasWon) return\r\n\r\n        let spadeOfAce = cards[spadeCardIndex]\r\n        const revealCard = {\r\n            card: spadeOfAce?.card,\r\n            isSelected: true\r\n        }\r\n\r\n        const _cards = [...cards]\r\n        _cards[spadeCardIndex] = revealCard\r\n        setCards(_cards)\r\n    }\r\n\r\n    function card(suit, rank) {\r\n        return {\r\n            suit,\r\n            rank\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className={classes.__card_game_content}>\r\n                <div className={classes.__card_game_content_left}>\r\n                    <PageHeader title=\"Chase The Ace\" />\r\n                    <div className={classes._card_game_content_top}>\r\n                            <CardsSvg style={{display: 'flex', height: 'auto'}} />\r\n                        <p className={classes.__card_game_card_counter}>Chase The Ace Round</p>\r\n                        <p className={classes.__card_game_info}> Select one card and if it's the Ace of Spades, you win $2000 CAD! </p>\r\n                    </div>\r\n\r\n                    <div className={`${classes.__card_game_content_body}`}>\r\n                        {\r\n                            hasCardSelected &&\r\n                            <div className={`${classes.__card_game_content_game_end} ${hasWon ? classes.__card_game_content_game_end_success : classes.__card_game_content_game_end_failed}`}\r\n                                onClick={onRevealCard}\r\n                            >\r\n                                    <Alert danger={!hasWon} success={hasWon} renderMsg={() => (\r\n                                        <p style={{ fontWeight: 'bold', fontSize: '18px' }}>\r\n                                            {hasWon ? `Congratulations! You are a winner!` : `Sorry, you did not find the Ace of Spade. Try again tomorrow at 8:00PM ET.`}\r\n                                        </p>)\r\n                                }   />\r\n                                </div>\r\n                        }\r\n                        <Card>\r\n                            <p>\r\n                                Ace of Spade Located At Number: {spadeCardIndex + 1}\r\n                                <br /> Note: For testing purpose only\r\n                            </p>\r\n                            {\r\n                                // hasCardSelected &&\r\n                                // <div className={`${classes.__card_game_timer_wrapper} ${classes.dashed_repeating_gradient}`}>\r\n                                //     <ProgressBar\r\n                                //         progress={timer}\r\n                                //         maxProgress={5}\r\n                                //         size={62}\r\n                                //         strokeWidth={4}\r\n                                //         circleOneStroke='grey'\r\n                                //         circleTwoStroke='#fff'\r\n                                //     />\r\n                                //     <p>\r\n                                //         Want another chance? \r\n                                //     </p>\r\n                                //     <button className={`${'__btn __style-3 __large-btn'} ${classes.__card_game_card_top_btn}`}>\r\n                                //         <span>$5.00</span> Activate Pick +\r\n                                //     </button>\r\n                                //     <strong>\r\n                                //         Activate for Free\r\n                                //     </strong>\r\n                                // </div>\r\n                            }\r\n                            <div className={classes.__card_game_content_cards}>\r\n                                {\r\n                                    cards.map(\r\n                                        (card, index) => {\r\n                                            const { card: selectedCard = {}, isSelected: isCardSelected = false } = card || {}\r\n                                            return (\r\n                                                <GameCard\r\n                                                    key={card + index.toString()}\r\n                                                    isSelected\r\n                                                    card={selectedCard}\r\n                                                    image={!isCardSelected ? CardBack : null}\r\n                                                    onClick={() => onCardClick(card, index)}\r\n                                                    styles={{\r\n                                                        width: '76px',\r\n                                                        height: '104px',\r\n                                                        margin: '5px 3.5px'\r\n                                                    }}\r\n                                                    width={76}\r\n                                                    height={104}\r\n                                                    hoverShadow={!isCardSelected}\r\n                                                />\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            {\r\n                                hasCardSelected && !hasWon &&\r\n                                <div className={classes.card_footer}>\r\n                                    <button className={`${'__btn'}`} onClick={() => {\r\n                                        return redirectTo(props, {\r\n                                            path: '/card-game'\r\n                                        })\r\n                                    }}>\r\n                                        Try again\r\n                                    </button>\r\n                                </div>\r\n                            }\r\n                        </Card>\r\n                    </div>                \r\n                </div>  \r\n            </div>\r\n            <Footer isBlack />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ChaseACard\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\CardGame\\index.js",["804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823"],"import React, {useState, useEffect} from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {GetAceCardIndex, hasMaxAceCards, redirectTo} from '../../utility/shared'\r\nimport Card from '../../components/Card'\r\nimport GameCard from '../../components/GameCard'\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport ProgressBar from '../../components/Progress'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport Alert from '../../components/Alert'\r\nimport Reload from '../../icons/Reload'\r\nimport BoltIcon from '../../assets/bolt.png'\r\nimport PointsCollectedIcon from '../../assets/points-collected.png'\r\nimport PowerPlaySideBarIcon from '../../assets/token.png'\r\nimport PowerBalanceIcon from '../../assets/power_balance_icon.png'\r\nimport CardsSvg from '../../icons/Cards'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport SidebarButton from '../../components/SidebarButton'\r\nimport SidebarLockItem from '../../components/SidebarLockItem'\r\nimport Replace from '../../icons/Replace'\r\nimport PlusMinus from '../../icons/PlusAndMinus'\r\nimport NewCardLiteIcon from '../../assets/new_card_lite.png'\r\nimport BoltLiteIcon from '../../assets/bolt_lite.png'\r\nimport PlusMinusLiteIcon from '../../assets/plus_minus_lite.png'\r\nimport LockIcon from '../../assets/lock.png'\r\nimport FaceBookIcon from '../../assets/facebook_icon.png'\r\nimport TwitterIcon from '../../assets/twitter_icon.png'\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport { IsAceCard, getRandomCard } from '../../utility/shared'\r\nimport { setCardState, resetCardState, cardGameInventory } from '../../actions/cardGameAction'\r\nimport Button from '../../components/Button'\r\nimport Link from '../../components/Link'\r\nimport ShareButton from '../../components/ShareButton'\r\nimport PinnacleIcon from '../../assets/pinnacle.png'\r\nimport classes from './cardGamePage.module.scss'\r\n\r\nconst TOTAL_ROUNDS = 5;\r\nconst TOTAL_CARDS = 5;\r\nconst MAX_ROUND_TIME = 5;\r\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\r\nconst REPLACE_ALL_SPEED_TIME = 1;\r\nlet _round = 1;\r\nlet _currentCard = 0;\r\nconst cardsArr = []\r\nconst aceCardsArr = []\r\nlet time = MAX_ROUND_TIME;\r\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\r\n\r\nfunction CardGame(props) {\r\n    const [cardsState, setCardsState] = useState({})\r\n    const [count, setCount] = useState(MAX_ROUND_TIME)\r\n    const [currentRound, setCurrentRound] = useState(_round)\r\n    const [currentCard, setCurrentCard] = useState(_currentCard)\r\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\r\n    const [showResetTimer, setResetTimerState] = useState(false)\r\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\r\n    const [myPowers, setMyPowers] = useState(false);\r\n    const [shareOptions, setShareOptions] = useState(false);\r\n    const [unLockOptions, setUnlockOptions] = useState(true);\r\n    const [start, setStart] = useState(false);\r\n    const [practiceModeEnabled, setPracticeModeEnabled] = useState(false);\r\n    const [practiceGameBtnText, setPracticeGameBtnText] = useState('Try a Practice game');\r\n    const [gotAceWithPower, setGotAceWithPower] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const { collectedAceCards = [],\r\n        inventory = {}\r\n    } = useSelector(state => state.cardGame)\r\n\r\n    const { replace = 0, replaceAll = 0, powerMatch = 0, increaseOrDecrease = 0 } = inventory || {}\r\n    \r\n    useEffect(() => { \r\n        dispatch(resetCardState())\r\n        resetGameState()\r\n\r\n        return () => resetGameState()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (start) {\r\n            let timeOut = gameStart();\r\n            gameCompleted(timeOut);\r\n            \r\n            return function clearnup() {\r\n                return clearInterval(timeOut)\r\n            }\r\n        }\r\n    }, [currentCard, currentRound, start])\r\n\r\n    const gameStart = () => {\r\n        // Set got ace with power to false to show options\r\n        setGotAceWithPower(false);\r\n        let timeOut = null\r\n        if (_currentCard < TOTAL_CARDS) {\r\n            if(!isReplaceAll)\r\n                time = MAX_ROUND_TIME;\r\n            else\r\n                time = REPLACE_ALL_SPEED_TIME\r\n            setResetTimerState(false)\r\n            timeOut = setInterval(() => {\r\n                gameCompleted(timeOut)\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                    if(!isReplaceAll)\r\n                        time = MAX_ROUND_TIME;\r\n                    else\r\n                        time = REPLACE_ALL_SPEED_TIME\r\n                    setCount(time)\r\n\r\n                    _currentCard += 1;\r\n                    setCurrentCard(_currentCard)\r\n                    updateCardState()\r\n                    if(currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\r\n                }\r\n            }, 1000)\r\n        } else {\r\n            console.log('LAST ELSE');\r\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n            timeOut = setInterval(() => {\r\n                setIsReplaceAllState(false)\r\n                gameCompleted(timeOut)\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                        setResetTimerState(false)\r\n                        setIsReplaceAllState(false)\r\n                        clearInterval(timeOut)\r\n                }\r\n            }, 1000)\r\n        }\r\n\r\n        return timeOut\r\n    }\r\n\r\n    const resetList = (list = []) => {\r\n        while (list?.length > 0) {\r\n            list.pop()\r\n        }\r\n    }\r\n\r\n    const resetGameState = () => {\r\n        resetList(cardsArr)\r\n        resetList(aceCardsArr)\r\n\r\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n        _currentCard = 0;\r\n        setCardsState({})\r\n        setCurrentCard(_currentCard)\r\n        setCount(MAX_ROUND_TIME)\r\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\r\n        setResetTimerState(false)\r\n        setIsReplaceAllState(false)\r\n        dispatch(setCardState([]))\r\n    }\r\n\r\n    const updateCardState = () => {\r\n        let card = getRandomCard()\r\n\r\n        let isCardAceCompleted = updateAceCard(card)\r\n        if (isCardAceCompleted) {\r\n            //recursive call\r\n            return updateCardState()\r\n        }\r\n        cardsArr.push(card)\r\n\r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\r\n    }\r\n\r\n    const updateAceCard = (card) => {\r\n        if (IsAceCard(card)) {\r\n            const _collectedAceCards = collectedAceCards;\r\n            if (_collectedAceCards?.length && _collectedAceCards?.length > 0) {\r\n                const _aceCardInfo = _collectedAceCards?.filter(_card => _card.suit === card.suit)[0]\r\n                if (_aceCardInfo) {\r\n                    const { suit = 0, aceCards = 0 } = _aceCardInfo || {}\r\n                    let _aceCards = aceCards\r\n                    if (_aceCards === CONSTANTS.MAX_ACE_PER_CARD) {\r\n                        //ace cards for current suit is completed\r\n                        //select random card\r\n                        updateCardState()\r\n                        return true;\r\n                    } else {\r\n                        _aceCards += 1;\r\n                    }\r\n\r\n                    const _aceCard = {\r\n                        suit: suit,\r\n                        aceCards: _aceCards,\r\n                    }\r\n                    let cardIndex = _collectedAceCards?.indexOf(_aceCardInfo)\r\n                    aceCardsArr[cardIndex] = _aceCard\r\n                    dispatch(setCardState(aceCardsArr))   \r\n                } else {\r\n                    const _aceCard = {\r\n                        suit: card.suit,\r\n                        aceCards: 1\r\n                    }\r\n    \r\n                    aceCardsArr.push(_aceCard)\r\n                    dispatch(setCardState(aceCardsArr))\r\n                }\r\n            } else {\r\n                //no ace card is available in state\r\n                //store new ace cards to state\r\n                const _aceCard = {\r\n                    suit: card.suit,\r\n                    aceCards: 1\r\n                }\r\n\r\n                aceCardsArr.push(_aceCard)\r\n                dispatch(setCardState(aceCardsArr))\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    const updateCards = (index, card) => {\r\n        cardsArr[index] = card\r\n        let isAceCompleted = updateAceCard(card)\r\n        if (!isAceCompleted) {\r\n            setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\r\n        }\r\n    }\r\n\r\n    const gameCompleted = (timeOut = setInterval(null, 0)) => {\r\n        if (getAceCards() >= CONSTANTS.MAX_ACE_CARDS) {\r\n            return clearTimeout(timeOut)\r\n        }\r\n    }\r\n\r\n    const _redirectTo = (path = '/') => {\r\n        redirectTo(props, {path})\r\n    }\r\n\r\n    const getAceCards = () => {\r\n        let totalAces = 0;\r\n        if (collectedAceCards.length) {\r\n            totalAces = collectedAceCards?.reduce((c1, c2) => {\r\n                return c1 + (c2['aceCards'] || 0)\r\n            }, 0)\r\n        }\r\n\r\n        return totalAces;\r\n    }\r\n\r\n    const updateInventory = (inventoryValue, actionType) => {\r\n        const _inventory = inventory;\r\n\r\n        switch (actionType) {\r\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\r\n                _inventory.increaseOrDecrease = inventoryValue\r\n                break\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\r\n                _inventory.powerMatch = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\r\n                _inventory.replace = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL:\r\n                _inventory.replaceAll = inventoryValue\r\n                break;\r\n        }\r\n\r\n        dispatch(cardGameInventory(_inventory))\r\n    }\r\n\r\n    \r\n    const onReplaceAll = () => {\r\n        let _replaceAll = replaceAll\r\n        \r\n        if (_replaceAll <= 0) return\r\n\r\n        _replaceAll -= 1\r\n        updateInventory(_replaceAll, CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL)\r\n        resetGameState()\r\n        setIsReplaceAllState(true)\r\n        setCount(REPLACE_ALL_SPEED_TIME)\r\n        time = REPLACE_ALL_SPEED_TIME\r\n    }\r\n\r\n    // Hide/Show Sidebar Options\r\n    const hideShowSideBarOptions = (myPower, shareOption, unLockOption) => {\r\n        setMyPowers(myPower);\r\n        setShareOptions(shareOption);\r\n        setUnlockOptions(unLockOption);\r\n    }\r\n\r\n    const renderSideBarMyPowersSection = () => {\r\n        return (\r\n            <>\r\n            <span className={classes.__sidebar_my_powers_title}>My Powers</span>\r\n                <SidebarButton\r\n                    success={replace > 0 ? true : false}\r\n                    primary={replace <= 0 ? true : false}\r\n                    title=\"Power Hit\"\r\n                    toolText={`${replace} left`}\r\n                    icon={<Replace style={{ height: 'auto' }} />}\r\n                />\r\n                <SidebarButton\r\n                    success={powerMatch > 0 ? true : false}\r\n                    primary={powerMatch <= 0 ? true : false}\r\n                    title=\"Power Ace\"\r\n                    toolText={`${powerMatch} left`}\r\n                    icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <SidebarButton\r\n                    success={increaseOrDecrease > 0 ? true : false}\r\n                    primary={increaseOrDecrease <= 0 ? true : false}\r\n                    title=\"Power Up/Down\"\r\n                    toolText={`${increaseOrDecrease} left`}\r\n                    icon={<PlusMinus style={{height: 'auto'}}/>}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    const renderSideBarShareSection = () => {\r\n        return (\r\n            <>\r\n                <span className={classes.__sidebar_power_title}>Power <span className={classes.__sidebar_up_title}>- Up!</span></span>\r\n                <p className={classes.__sidebar_unlock_power_text}>\r\n                    To unlock your Powers for this game, please select one of the following options:\r\n                </p>\r\n                <ShareButton \r\n                    title=\"Share on Facebook\"\r\n                    icon={<img src={FaceBookIcon} width={50} height={51} alt=\"\" />}\r\n                    styles={{\"backgroundImage\":\"linear-gradient(to bottom, #4e70a9, #4a6da5)\"}}\r\n                    onClick={() => hideShowSideBarOptions(true, false, false)}\r\n                />\r\n                <ShareButton \r\n                    title=\"Share on Twitter\"\r\n                    icon={<img src={TwitterIcon} width={50} height={51} alt=\"\" />}\r\n                    styles={{\"backgroundImage\":\"linear-gradient(to bottom, #2cc3e6, #25bde6)\"}}\r\n                    onClick={() => hideShowSideBarOptions(true, false, false)}\r\n                />\r\n                <Button \r\n                    title=\"x10\" \r\n                    icon={<img src={PowerPlaySideBarIcon} width=\"20\" height=\"20\" alt=\"\" />}\r\n                    onClick={() => console.log('hi')} \r\n                    styles={{\"width\":\"100%\",\"height\":\"51px\",\"borderRadius\":\"12px\",\"backgroundImage\":\"linear-gradient(to bottom, #ffffff, #ababab)\", \"color\": \"#17181a\" }} \r\n                    onClick={() => hideShowSideBarOptions(true, false, false)}\r\n                />\r\n                <Button \r\n                    title=\"$1 • Purchase Now\" \r\n                    onClick={() => console.log('hi')} \r\n                    styles={{\"width\":\"100%\",\"height\":\"51px\",\"margin-top\":\"20px\", \"borderRadius\":\"12px\",\"boxShadow\":\"0 0 34px 0 rgba(251, 110, 0, 0.2)\",\"backgroundImage\":\"linear-gradient(to bottom, #fb9700, #fb6e00)\", \"color\":\"#111\", \"font-size\": \"14\"}} \r\n                    onClick={() => hideShowSideBarOptions(true, false, false)}\r\n                />\r\n                <Link \r\n                    title=\"Go Powerless\" \r\n                    onClick={() => hideShowSideBarOptions(false, false, true)} \r\n                    styles={{\"margin-top\":\"10px\"}}     \r\n                />\r\n            </>               \r\n        );\r\n    }\r\n\r\n    const renderSideBarPurchaseSection = () => {\r\n        return (\r\n            <>\r\n                <span className={classes.__sidebar_power_title}>Power <span className={classes.__sidebar_up_title}>- Up!</span></span>\r\n                <SidebarLockItem\r\n                    title=\"x2\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={NewCardLiteIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <SidebarLockItem\r\n                    title=\"x1\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={BoltLiteIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <SidebarLockItem\r\n                    title=\"x4\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={PlusMinusLiteIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <p className={classes.__sidebar_purchase_powers_text}>Purchase Powers</p>\r\n                <p className={classes.__sidebar_to_power_up}>to Power-up</p>\r\n                <p className={classes.__sidebar_purchase_powers_text}>your game!</p>\r\n                <Button \r\n                    title=\"$1 • Purchase Now\" \r\n                    onClick={() => {\r\n                        if (!start) {\r\n                            hideShowSideBarOptions(true, false, false)\r\n                        }\r\n                    }} \r\n                    styles={{\"width\":\"190px\",\"height\":\"51px\",\"margin\":\"20px 0 20px\",\"borderRadius\":\"12px\",\"boxShadow\":\"0 0 34px 0 rgba(251, 110, 0, 0.2)\",\"backgroundImage\":\"linear-gradient(to bottom, #fb9700, #fb6e00)\",\"fontFamily\":\"Poppins\",\"fontSize\":\"16px\",\"fontWeight\":\"500\",\"fontStretch\":\"normal\",\"fontStyle\":\"normal\",\"lineHeight\":\"normal\",\"letterSpacing\":\"normal\",\"textAlign\":\"center\",\"color\":\"#111111\"}} \r\n                />\r\n                <Link \r\n                    title=\"Other Unlock Options\" \r\n                    onClick={() => {\r\n                        if (!start) {\r\n                            hideShowSideBarOptions(false, true, false)\r\n                        }\r\n                    }} \r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    const renderSideBarPinnacleSection = () => {\r\n        return (\r\n            <>\r\n                <span className={classes.__sidebar_power_title}>Power <span className={classes.__sidebar_up_title}>- Up!</span></span>\r\n                <SidebarLockItem\r\n                    title=\"x2\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={NewCardLiteIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <SidebarLockItem\r\n                    title=\"x1\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={BoltLiteIcon} width={53} height={53} alt={''}/>}\r\n                />\r\n                <SidebarLockItem\r\n                    title=\"x4\"\r\n                    lockIcon={<img src={LockIcon} width={53} height={53} alt={''}/>}\r\n                    icon={<img src={PlusMinusLiteIcon} width={53} height={53} alt={''}/>}\r\n                />   \r\n\r\n                <span className={classes.__sidebar_power_up_your_game}>Power - Up <span className={classes.__sidebar_power_up_your_game_with}>Your Game with</span></span>\r\n                <img src={PinnacleIcon} width=\"100\" height=\"50\" alt=\"\" />\r\n                <p className={classes.__sidebar_open_an_account}>Open an account to unlock your Powers</p>\r\n                <Button \r\n                    title=\"Open Your Account\" \r\n                    onClick={() => console.log('hi')} \r\n                    styles={{\"width\":\"100%\",\"height\":\"51px\", \"margin-bottom\":\"5px\", \"borderRadius\":\"12px\",\"boxShadow\":\"0 0 34px 0 rgba(251, 110, 0, 0.2)\",\"backgroundImage\":\"linear-gradient(to bottom, #fb9700, #fb6e00)\", \"color\":\"#111\", \"font-size\": \"14\"}} \r\n                />\r\n                <Link title=\"Other Unlock Options\" onClick={() => console.log('hi')} />\r\n            </>\r\n        );\r\n    }\r\n    \r\n    const onIncrease = (cardIndex, card) => {\r\n        const { suit = 0, rank = 0 } = card || {}\r\n        let _rank = rank\r\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\r\n            return;\r\n        }\r\n\r\n        if (_rank !== GetAceCardIndex()) {\r\n            _rank += 1;\r\n        }\r\n        \r\n        const _card = {\r\n            suit: suit,\r\n            rank: _rank,\r\n        }\r\n\r\n        // Check if got ace if power\r\n        checkGotAceWithPower(_rank);\r\n\r\n        let _increase = increaseOrDecrease;\r\n\r\n        if (!practiceModeEnabled) _increase -= 1;\r\n\r\n        //update the cards array in parent component\r\n        updateCards(cardIndex, _card)\r\n        updateInventory(_increase, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n    }\r\n\r\n    const onReplace = (cardIndex, card) => {\r\n        const { rank = 0 } = card || {}\r\n        if (replace <= 0 || cardsState?.activeCard !== card)\r\n        return;\r\n\r\n        let _replace = replace;\r\n        if (!practiceModeEnabled) _replace -= 1;\r\n\r\n        let newCard = getRandomCard();\r\n        if (newCard?.rank === rank) {\r\n            newCard = getRandomCard();\r\n        }\r\n\r\n        // Check if got ace if power\r\n        checkGotAceWithPower(newCard.rank);\r\n\r\n        updateCards(cardIndex, newCard)\r\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\r\n    }\r\n\r\n    const onPowerMatch = (cardIndex, card) => {\r\n        const { suit = 0 } = card || {}\r\n        if (getMaxAceCardsForCardSuit(card) || powerMatch <= 0 || cardsState?.activeCard !== card) return;\r\n\r\n        let _powerMatch = powerMatch;\r\n        if (!practiceModeEnabled) _powerMatch -= 1;\r\n\r\n        const _aceCard = {\r\n            suit: suit,\r\n            rank: GetAceCardIndex(),\r\n        }\r\n\r\n        checkGotAceWithPower(GetAceCardIndex());\r\n\r\n        updateCards(cardIndex, _aceCard)\r\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\r\n    }\r\n\r\n    const onDecrease = (cardIndex, card) => {\r\n        const { suit = 0, rank = 0 } = card || {}\r\n        let _rank = rank\r\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\r\n            return;\r\n        }\r\n\r\n        if (_rank > 0) {\r\n            _rank -= 1;\r\n        } else {\r\n            _rank = GetAceCardIndex()\r\n        }\r\n\r\n        const _card = {\r\n            suit: suit,\r\n            rank: _rank,\r\n        }\r\n\r\n        // Check if got ace with power\r\n        checkGotAceWithPower(_rank);\r\n\r\n        let _decrease = increaseOrDecrease;\r\n        if (!practiceModeEnabled) _decrease -= 1;\r\n\r\n        //update the cards array in parent component\r\n        updateCards(cardIndex, _card)\r\n        updateInventory(_decrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n    }\r\n\r\n    const checkGotAceWithPower = (rank) => {\r\n        rank == 12 ? setGotAceWithPower(true) : setGotAceWithPower(false);\r\n    }\r\n\r\n    const getMaxAceCardsForCardSuit = (card) => {\r\n        const { suit = 0 } = card || {}\r\n        const aceCard = collectedAceCards?.filter(_card => _card?.suit === suit)[0];\r\n        const { aceCards = 0 } = aceCard || {}\r\n        if (aceCards && hasMaxAceCards(aceCards)) {\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className={classes.__card_game_content}>\r\n                <div className={classes.__card_game_content_left}>\r\n                    <PageHeader title=\"Chase The Ace\"/>\r\n                    <div className={classes._card_game_content_top}>\r\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\r\n                        <p className={classes.__card_game_card_counter}>Card <span>{currentCard}</span> of {TOTAL_CARDS}\r\n                        </p>\r\n                        <span className={classes.__card_divider} />\r\n                    </div>\r\n\r\n                    <div className={classes.__card_game_content_body}>\r\n                        <div className={classes.__card_game_content_btns}>\r\n                            <button \r\n                                className={classes.__card_game_content_practice_btn} \r\n                                onClick={() => {\r\n                                    practiceGameBtnText == 'Try a Practice game' ? setPracticeGameBtnText('back to live-play mode') : setPracticeGameBtnText('Try a Practice game');\r\n                                    setPracticeModeEnabled(!practiceModeEnabled);\r\n                                    setMyPowers(!myPowers);\r\n                                    setUnlockOptions(!unLockOptions);\r\n                                    setStart(false);\r\n                                    resetGameState();\r\n                                    const resetInventory = {\r\n                                        replace: 5,\r\n                                        replaceAll: 2,\r\n                                        powerMatch: 5,\r\n                                        increaseOrDecrease: 5\r\n                                    };\r\n                                    dispatch(cardGameInventory(resetInventory));\r\n                                }}>\r\n                                {practiceGameBtnText}\r\n                            </button>\r\n                        </div>\r\n  \r\n                        <Card styles={{boxShadow: \"inset 0 1px 24px 0 rgba(0, 0, 0, 0.5)\"}}>\r\n                        {\r\n                            practiceModeEnabled\r\n                            &&\r\n                            <div style={{ position: 'relative', top: -60, alignSelf: 'center'}}>\r\n                                <button className={classes.__card_game_content_practice_game_mode}>Try a Practice game</button>\r\n                            </div>\r\n                        }\r\n                            <div className={classes.__card_game_content_cards}>\r\n                                <GameCard\r\n                                    showCardPopup={!isReplaceAll && true}\r\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[0]?.rank] === \"A\"}\r\n                                    card={cardsState?.collectedCards?.[0]}\r\n                                    isSelected={cardsState?.collectedCards?.[0] && true}\r\n                                    activeCard={cardsState?.activeCard}\r\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.collectedCards?.[0]) && powerMatch > 0}\r\n                                    showReplacePower={replace > 0}\r\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                    time={time}\r\n                                    inventory={inventory}\r\n                                    updateCards={updateCards}\r\n                                    updateInventory={updateInventory}\r\n                                    currentCard={currentCard}\r\n                                    cardIndex={0}\r\n                                    onStart={() => setStart(true)}\r\n                                    start={start}\r\n                                    onIncrease={() => onIncrease(0, cardsState?.collectedCards?.[0])}\r\n                                    onDecrease={() => onDecrease(0, cardsState?.collectedCards?.[0])}\r\n                                    onPowerMatch={() => onPowerMatch(0, cardsState?.collectedCards?.[0])}\r\n                                    onReplace={() => onReplace(0, cardsState?.collectedCards?.[0])}\r\n                                    myPowers={myPowers}\r\n                                    showTimer={true}\r\n                                    gotAceWithPower={gotAceWithPower}\r\n                                />\r\n                                <GameCard\r\n                                    showCardPopup={!isReplaceAll && true}\r\n                                    card={cardsState?.collectedCards?.[1]}\r\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[1]?.rank] === \"A\"}\r\n                                    isSelected={cardsState?.collectedCards?.[1] && true}\r\n                                    activeCard={cardsState?.activeCard}\r\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[1]) && powerMatch > 0}\r\n                                    showReplacePower={replace > 0}\r\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                    time={time}\r\n                                    inventory={inventory}\r\n                                    updateCards={updateCards}\r\n                                    updateInventory={updateInventory}\r\n                                    currentCard={currentCard}\r\n                                    cardIndex={1}\r\n                                    start={start}\r\n                                    onIncrease={() => onIncrease(1, cardsState?.collectedCards?.[1])}\r\n                                    onDecrease={() => onDecrease(1, cardsState?.collectedCards?.[1])}\r\n                                    onPowerMatch={() => onPowerMatch(1, cardsState?.collectedCards?.[1])}\r\n                                    onReplace={() => onReplace(1, cardsState?.collectedCards?.[1])}\r\n                                    myPowers={myPowers}\r\n                                    showTimer={true}\r\n                                    gotAceWithPower={gotAceWithPower}\r\n                                />\r\n                                <GameCard\r\n                                    showCardPopup={!isReplaceAll && true}\r\n                                    card={cardsState?.collectedCards?.[2]}\r\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[2]?.rank] === \"A\"}\r\n                                    isSelected={cardsState?.collectedCards?.[2] && true}\r\n                                    activeCard={cardsState?.activeCard}\r\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[2]) && powerMatch > 0}\r\n                                    showReplacePower={replace > 0}\r\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                    time={time}\r\n                                    inventory={inventory}\r\n                                    updateCards={updateCards}\r\n                                    updateInventory={updateInventory}\r\n                                    currentCard={currentCard}\r\n                                    cardIndex={2}\r\n                                    start={start}\r\n                                    onIncrease={() => onIncrease(2, cardsState?.collectedCards?.[2])}\r\n                                    onDecrease={() => onDecrease(2, cardsState?.collectedCards?.[2])}\r\n                                    onPowerMatch={() => onPowerMatch(2, cardsState?.collectedCards?.[2])}\r\n                                    onReplace={() => onReplace(2, cardsState?.collectedCards?.[2])}\r\n                                    myPowers={myPowers}\r\n                                    showTimer={true}\r\n                                    gotAceWithPower={gotAceWithPower}\r\n                                />\r\n                                <GameCard\r\n                                    showCardPopup={!isReplaceAll && true}\r\n                                    card={cardsState?.collectedCards?.[3]}\r\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[3]?.rank] === \"A\"}\r\n                                    isSelected={cardsState?.collectedCards?.[3] && true}\r\n                                    activeCard={cardsState?.activeCard}\r\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[3]) && powerMatch > 0}\r\n                                    showReplacePower={replace > 0}\r\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                    time={time}\r\n                                    inventory={inventory}\r\n                                    updateCards={updateCards}\r\n                                    updateInventory={updateInventory}\r\n                                    currentCard={currentCard}\r\n                                    cardIndex={3}\r\n                                    start={start}\r\n                                    onIncrease={() => onIncrease(3, cardsState?.collectedCards?.[3])}\r\n                                    onDecrease={() => onDecrease(3, cardsState?.collectedCards?.[3])}\r\n                                    onPowerMatch={() => onPowerMatch(3, cardsState?.collectedCards?.[3])}\r\n                                    onReplace={() => onReplace(3, cardsState?.collectedCards?.[3])}\r\n                                    myPowers={myPowers}\r\n                                    showTimer={true}\r\n                                    gotAceWithPower={gotAceWithPower}\r\n                                />\r\n                                <GameCard\r\n                                    showCardPopup={!isReplaceAll && true}\r\n                                    card={cardsState?.collectedCards?.[4]}\r\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[4]?.rank] === \"A\"}\r\n                                    isSelected={cardsState?.collectedCards?.[4] && true}\r\n                                    activeCard={cardsState?.activeCard}\r\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.activeCard) && powerMatch > 0}\r\n                                    showReplacePower={replace > 0}\r\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                    time={time}\r\n                                    inventory={inventory}\r\n                                    updateCards={updateCards}\r\n                                    updateInventory={updateInventory}\r\n                                    currentCard={currentCard}\r\n                                    cardIndex={4}\r\n                                    start={start}\r\n                                    onIncrease={() => onIncrease(4, cardsState?.collectedCards?.[4])}\r\n                                    onDecrease={() => onDecrease(4, cardsState?.collectedCards?.[4])}\r\n                                    onPowerMatch={() => onPowerMatch(4, cardsState?.collectedCards?.[4])}\r\n                                    onReplace={() => onReplace(4, cardsState?.collectedCards?.[4])}\r\n                                    myPowers={myPowers}\r\n                                    showTimer={true}\r\n                                    gotAceWithPower={gotAceWithPower}\r\n                                />\r\n                            </div>\r\n                            {/* <button className={`${classes.__reload_btn} ${showResetTimer && classes.active}`} onClick={onReplaceAll}\r\n                                disabled={!showResetTimer}\r\n                            >\r\n                                {\r\n                                    showResetTimer &&\r\n                                    <span style={{ position: 'absolute', top: '-15px', left: '50%', color: '#fff', transform: 'translateX(-50%)' }}>{ resetBtnCountDown }</span>\r\n\r\n                                }\r\n                                <Reload size={48} className={classes.__reload_svg_icon}/>\r\n                            </button> */}\r\n                            {\r\n                                !myPowers\r\n                                &&\r\n                                <p className={classes.__powers_not_active}>Powers not active. <span className={classes.__powers_not_active + ' ' + classes.__power_up}>Power-Up</span> before you start!</p>\r\n                            }\r\n                        </Card>\r\n                    </div>\r\n\r\n                    <div className={classes.__card_game_content_footer}>\r\n                        {\r\n                            !start ?\r\n                                <Alert renderMsg={() => <p>Click Start to begin your game.</p>} primary />\r\n                                :\r\n                                cardsArr.length < CONSTANTS.MAX_ACE_CARDS \r\n                                &&\r\n                                <Alert primary renderMsg={() => (<p>{CONSTANTS.MAX_ACE_CARDS - getAceCards()} {getAceCards() == 4 ? 'Ace' : 'Aces'} to go</p>)} />\r\n                        }\r\n                        {\r\n                            getAceCards() >= CONSTANTS.MAX_ACE_CARDS ?\r\n                                <>\r\n                                    <Alert success renderMsg={() => (<p>Congrats! You have 5 Aces! Click below to Chase the Ace!</p>)} />\r\n                                    <button className={`__btn ${classes.__card_game_footer_btn}`}\r\n                                        onClick={() => _redirectTo('/chase-a-card')}>\r\n                                        Chase The Ace!\r\n                                    </button>\r\n                                </>\r\n                                :\r\n                                cardsArr.length >= CONSTANTS.MAX_ACE_CARDS && time <= 0\r\n                                &&\r\n                                <>\r\n                                    <Alert danger renderMsg={() => (<p>Sorry, you did not get { CONSTANTS.MAX_ACE_CARDS} aces.</p>)} />   \r\n                                    <button className={`__btn ${classes.__card_game_footer_btn}`}\r\n                                            onClick={() => {\r\n                                                setStart(false);\r\n                                                resetGameState();\r\n                                                const resetInventory = {\r\n                                                    replace: 5,\r\n                                                    replaceAll: 2,\r\n                                                    powerMatch: 5,\r\n                                                    increaseOrDecrease: 5\r\n                                                };\r\n                                                dispatch(cardGameInventory(resetInventory));\r\n                                            }}>\r\n                                            Try Again?\r\n                                    </button>\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Sidebar>\r\n                    <div className={classes.__sidebar_cash_power_balance}>\r\n                        <div className={classes.__sidebar_cash_power_balance_wrapper}>\r\n                            <div className={classes.__sidebar_cash_balance_wrapper}>\r\n                                <img src={PointsCollectedIcon} width=\"40\" height=\"30\" />\r\n                                <div className={classes.__sidebar_text_wrapper}>\r\n                                    <h1 className={classes.__sidebar_cash}>$36</h1>\r\n                                    <span className={classes.__sidebar_cash_balance_title}>Cash Balance</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.__sidebar_cash_power_balance_wrapper}>\r\n                            <div className={classes.__sidebar_cash_balance_wrapper}>\r\n                                <img src={PowerBalanceIcon} width=\"40\" height=\"40\" />\r\n                                <div className={classes.__sidebar_text_wrapper}>\r\n                                    <h1 className={classes.__sidebar_cash}>15,000</h1>\r\n                                    <span className={classes.__sidebar_cash_balance_title}>Power Balance</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.__sidebar_my_powers_wrapper}>\r\n                        <div className={classes.__sidebar_button_wrapper}>\r\n                            {\r\n                                myPowers\r\n                                &&\r\n                                renderSideBarMyPowersSection()\r\n                            }\r\n                            {\r\n                                shareOptions\r\n                                &&\r\n                                renderSideBarShareSection()\r\n                            }\r\n                            {\r\n                                unLockOptions\r\n                                &&\r\n                                renderSideBarPurchaseSection()\r\n                            }\r\n\r\n                            {/* {renderSideBarPinnacleSection()} */}\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </Sidebar>\r\n            </div>\r\n            <Footer isBlack/>\r\n        </>\r\n    )\r\n}\r\n\r\nCardGame.propTypes = {}\r\n\r\nexport default withRouter(CardGame)\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Privacy\\index.js",["824"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport \"./index.css\";\r\nimport * as Constants from \"../../global/constants.js\";\r\n\r\nclass ResponsibleGaming extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      content: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=2\")\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          result = result.records;\r\n          this.setState({\r\n            content: result[1].content\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            hasError: true,\r\n            error: error\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n       <Header />\r\n\r\n\r\n        <div className=\"container-fluid _faq_wrap\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h1>Privacy Policy</h1>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <div className=\"_faq_cont\"\r\n                dangerouslySetInnerHTML={{ __html: this.state.content }} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ResponsibleGaming);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\TrustAndSafety\\index.js",["825"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport \"./index.css\";\r\nimport * as Constants from \"../../global/constants.js\";\r\nclass TrustAndSafety extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      content: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=4\")\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          result = result.records;\r\n          this.setState({\r\n            content: result[3].content\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            hasError: true,\r\n            error: error\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"container-fluid _faq_wrap\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h1>TRUST AND SAFETY</h1>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <div\r\n                  className=\"_faq_cont\"\r\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(TrustAndSafety);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\AccountSecurity\\index.js",["826"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport \"./index.css\";\r\nimport * as Constants from \"../../global/constants.js\";\r\nclass AccountSecurity extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      content: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=5\")\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          result = result.records;\r\n          this.setState({\r\n            content: result[4].content\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            hasError: true,\r\n            error: error\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n\r\n        <div className=\"container-fluid _faq_wrap\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h1>ACCOUNT SECURITY</h1>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <div\r\n                  className=\"_faq_cont\"\r\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AccountSecurity);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\FAQ\\index.js",["827"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport PageHeader from \"../../components/PageHeader\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport \"./index.css\";\r\nimport * as Constants from \"../../global/constants.js\";\r\nclass FAQ extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      content: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=3\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          result = result.records;\r\n          this.setState({\r\n            content: result[2].content,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            hasError: true,\r\n            error: error,\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n\r\n        <div className=\"container-fluid _faq_wrap\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h1>FAQ</h1>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <div\r\n                  className=\"_faq_cont\"\r\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(FAQ);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8\\index.js",["828","829","830","831","832","833","834","835","836","837","838"],"import React from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\n//importing images\r\nimport orig from \"../../assets/elite8/lottery-orig-copy.png\";\r\nimport rectange from \"../../assets/elite8/rectangle-2.png\";\r\nimport seven from \"../../assets/elite8/7.png\";\r\nimport upImage from \"../../assets/elite8/up-active.png\";\r\nimport downImage from \"../../assets/elite8/down-active.png\";\r\nimport swapImage from \"../../assets/elite8/swap.png\";\r\nimport refreshImage from \"../../assets/elite8/refresh.png\";\r\n\r\n//importing required components\r\nimport SelectNumbers from \"./SelectNumbers.js\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction ComponentPickNumbersBtn(props) {\r\n  return (\r\n    <button\r\n      className=\"c-pick-your-numbers-btn\"\r\n      onClick={(e) => {\r\n        executeScroll()\r\n      }}\r\n    >\r\n      Pick Your Numbers\r\n    </button>\r\n  );\r\n  function executeScroll() {\r\n    console.log(\"Executing scoroll\")\r\n    if(document.getElementById(\"btn-pick-div\")){\r\n      document.getElementById(\"btn-pick-div\").scrollIntoView({behavior: \"smooth\"});\r\n    }\r\n    \r\n}\r\n}\r\n//functional conponents,\r\n// can be defined in the same file or a seperate file.\r\n// as in SelectNumbers.js\r\nfunction StaticContent(props) {\r\n  return (\r\n    <div className=\"elite8-content\">\r\n      <section className=\"hero-section\">\r\n        <div className=\"hero-image\">\r\n          <div className=\"hero-content-wrapper\">\r\n            <div className=\"hero-heading\"> ELITE 8 </div>\r\n            <div className=\"hero-text1\">\r\n              Starts on Feb 23rd, 2020 @ 9:00PM EST\r\n            </div>\r\n            <div className=\"hero-text2\">\r\n              <span className=\"hero-bars\" />\r\n              &ensp; win up to &ensp;\r\n              <span className=\"hero-bars\" />\r\n            </div>\r\n            <div className=\"hero-text3\">\r\n              $2000\r\n              <span className=\"CAD\"> CAD </span>\r\n            </div>\r\n            <ComponentPickNumbersBtn />\r\n            <div className=\"hero-text4\">*No Purchase Necessary</div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"fun-play-wrapper\">\r\n        <div className=\"fun-play-left\">\r\n          <div className=\"fun-play-heading\"> A Fun New Way to Play! </div>\r\n          <div className=\"fun-play-phone mobile-only\"> </div>\r\n          <div className=\"fun-play-text1\">\r\n            Have you ever played a pick-and-wait game like Super 7, 6/49, or\r\n            Powerball?\r\n          </div>\r\n          <div className=\"fun-play-text2a\">\r\n            At PowerPlay Systems,\r\n            <div className=\"fun-play-text2b\">\r\n              We think the current pick-and-wait format is kind of boring. So we\r\n              invented a fun new way to play!\r\n            </div>\r\n          </div>\r\n          <div className=\"fun-play-try mobile-only\">\r\n            {\" \"}\r\n            Give it a try to see if you feel the same way.\r\n          </div>\r\n          <ComponentPickNumbersBtn />\r\n        </div>\r\n        <div className=\"fun-play-right\">\r\n          <img className=\"fun-play-right-img\" src={rectange} />\r\n        </div>\r\n      </div>\r\n      <div className=\"edit-selections-wrapper\">\r\n        <div className=\"edit-selections-heading\">\r\n          Edit your selections during the live draw!\r\n        </div>\r\n        <div className=\"edit-selections-subheading\">\r\n          To make it more exciting, you can make use of Powerplays during the\r\n          live draw to edit your selections and improve your chances of winning.\r\n        </div>\r\n        <div className=\"edit-selections-box-container\">\r\n          <div className=\"edit-selections-box\">\r\n            <img className=\"edit-selections-box1-img\" src={seven} />\r\n            <div className=\"edit-selections-box-heading\"> Power Match </div>\r\n            <div className=\"edit-selections-box-text\">\r\n              Use Power Match to match the in-play number.\r\n            </div>\r\n          </div>\r\n          <div className=\"edit-selections-box\">\r\n            <img className=\"edit-selections-box2-img\" src={upImage} />\r\n            <img className=\"edit-selections-box2-img\" src={downImage} />\r\n            <div className=\"edit-selections-box-heading\">\r\n              Increase/ Decrease\r\n            </div>\r\n            <div className=\"edit-selections-box-text\">\r\n              You can increase or decrease your pick during live draw.\r\n            </div>\r\n          </div>\r\n          <div className=\"edit-selections-box\">\r\n            <img className=\"edit-selections-box3-box4-img\" src={swapImage} />\r\n            <div className=\"edit-selections-box-heading\"> Replace </div>\r\n            <div className=\"edit-selections-box-text\">\r\n              Used to replace one number with a random new Number.\r\n            </div>\r\n          </div>\r\n          <div className=\"edit-selections-box\">\r\n            <img className=\"edit-selections-box3-box4-img\" src={refreshImage} />\r\n            <div className=\"edit-selections-box-heading\"> Replace All </div>\r\n            <div className=\"edit-selections-box-text\">\r\n              Used to replace one number with a random new Number.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"edit-selections-bottom-text\">\r\n          We will give you three free Powerplays to start!\r\n        </div>\r\n        <ComponentPickNumbersBtn />\r\n      </div>\r\n\r\n      <div className=\"match8-wrapper\">\r\n        <div className=\"match8-left\">\r\n          <div className=\"match8-heading\">\r\n            Match 8 of 8 numbers &amp; Win\r\n            <span className=\"orange-text\"> $2,000 </span> CAD\r\n          </div>\r\n          <div className=\"match8-right-mobile mobile-only\">\r\n            <img className=\"match8-right-mob-img\" src={orig} />\r\n          </div>\r\n          <div className=\"match8-subheading\"> Smaller prizes available </div>\r\n          <div className=\"match8-box-container\">\r\n            <div className=\"match8-greybox\">7/8</div>\r\n            <div className=\"match8-brownbox bx1\">$500</div>\r\n            <div className=\"match8-greybox\">6/8</div>\r\n            <div className=\"match8-brownbox bx2\">$100</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"match8-right\">\r\n          <img src={orig} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nclass Elite8 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  executeScroll() {\r\n   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        {/* Static content section on top */}\r\n        <StaticContent />\r\n        {/* Bottom select numbers section */}\r\n        <SelectNumbers />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Elite8;\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8Draw\\index.js",["839","840","841","842","843","844","845","846","847"],"//import modules\r\nimport React, { useState, useEffect } from \"react\";\r\nimport _ from \"lodash\";\r\n//import components\r\nimport Header from \"../../components/Header/Header\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport ProgressBar from \"../../components/Progress\";\r\nimport PageHeaderCard from \"../../components/PageHeaderCard\";\r\nimport LottoBall from \"../../components/LottoBall\";\r\n\r\n//styling\r\nimport \"./Elite8draw.scss\";\r\n\r\n//constants\r\nconst TOTAL_NUMBERS_TO_DRAW = 8;\r\nconst MY_NUMBERS = [1, 2, 3, 4, 5, 6, 7, 8];\r\nconst MAX_TIME = 12;\r\nconst TOTAL_NUMBERS_DRAWN = 0;\r\nconst ACTIVE_NUMBER = 0;\r\n\r\nfunction Elte8Game(props) {\r\n  const [drawnNumbersArray, setDrawnNumbersArray] = useState([]);\r\n  const [myPickedNumbers, setMyPickedNumbers] = useState(MY_NUMBERS);\r\n  const [counter, setCounter] = useState(12);\r\n  const [latestDrawnNumber, setLatestDrawnNumber] = useState(0);\r\n  const [activeLottoBall, setActiveLottoBall] = useState(0);\r\n  const [totalMatchedNumbers, setTotalMatchedNumbers] = useState(0);\r\n  const [powerplays, setPowerplays] = useState({\r\n    reset: 1,\r\n    power_match: 1,\r\n    increase: 1,\r\n    decrease: 1,\r\n    reset_all: 1,\r\n  });\r\n  //componet mount and unmount\r\n  useEffect(() => {\r\n    var picks = props.location.state.picks;\r\n    console.log(picks);\r\n    picks ? setMyPickedNumbers(picks) : setMyPickedNumbers(MY_NUMBERS);\r\n    return () => {\r\n      //when the component will unmount\r\n    };\r\n  }, []);\r\n\r\n  ///runs when User Picked Numbers Array changed or New Number added to Draw\r\n  useEffect(() => {\r\n    getTotalMatched();\r\n    //ascending order\r\n  }, [myPickedNumbers, drawnNumbersArray]);\r\n\r\n  //runs when a new number drawn\r\n  useEffect(() => {\r\n    if (latestDrawnNumber == 0) {\r\n      //initial state, don't start timer\r\n      //return\r\n    }\r\n\r\n    let timeOut = null;\r\n    if (drawnNumbersArray.length < TOTAL_NUMBERS_TO_DRAW) {\r\n      //start the timer from MAX_TIME\r\n      let time = counter;\r\n      timeOut = setInterval(() => {\r\n        if (time !== 0) {\r\n          time--;\r\n          setCounter(time);\r\n        } else {\r\n          //if timer reaches zero\r\n          resetCounter();\r\n          clearInterval(timeOut);\r\n          getNewNumber();\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(timeOut);\r\n    }\r\n\r\n    return () => clearInterval(timeOut);\r\n  }, [latestDrawnNumber]);\r\n  \r\n  function startGame() {\r\n    //get New number\r\n    getNewNumber();\r\n  }\r\n  function getNewNumber() {\r\n    //building connection with the APIs and sockets.\r\n    //request for a new number\r\n\r\n    //adding a random number to array\r\n    const newNumber = Math.floor(Math.random() * 48) + 1;\r\n    setDrawnNumbersArray((drawnNumbersArray) => [\r\n      ...drawnNumbersArray,\r\n      newNumber,\r\n    ]);\r\n    setLatestDrawnNumber(newNumber);\r\n  }\r\n  function resetCounter() {\r\n    //set counter value back to MAX_TIME\r\n    setCounter(MAX_TIME);\r\n  }\r\n  function handleLottoBallClick(lottoBallNumber) {\r\n    activeLottoBall == lottoBallNumber\r\n      ? setActiveLottoBall(0)\r\n      : setActiveLottoBall(lottoBallNumber);\r\n  }\r\n  function handlePowerplayClick(powerplay, lottoBallNumber) {\r\n    switch (powerplay) {\r\n      case \"reset\":\r\n        handleResetClicked(lottoBallNumber);\r\n        break;\r\n      case \"power-match\":\r\n        handleForceMatchClicked(lottoBallNumber);\r\n        break;\r\n      case \"increase\":\r\n        handleIncreaseClicked(lottoBallNumber);\r\n        break;\r\n      case \"decrease\":\r\n        handleDecreaseClicked(lottoBallNumber);\r\n        break;\r\n\r\n      default:\r\n      // code block\r\n    }\r\n    setActiveLottoBall(0);\r\n  }\r\n  function handleIncreaseClicked(lottoBallNumber) {\r\n    if (powerplays.increase < 1) {\r\n      return;\r\n    }\r\n    const newNumber = lottoBallNumber + 1;\r\n    if (myPickedNumbers.includes(newNumber)) {\r\n      return;\r\n    }\r\n    if (newNumber > 48 || newNumber < 1) {\r\n      return;\r\n    }\r\n    var newPickedNumbers = [...myPickedNumbers];\r\n    newPickedNumbers[newPickedNumbers.indexOf(lottoBallNumber)] = newNumber;\r\n\r\n    setMyPickedNumbers(newPickedNumbers);\r\n    //reduce amount\r\n    setPowerplays({\r\n      reset: powerplays.reset,\r\n      increase: powerplays.increase - 1,\r\n      decrease: powerplays.decrease,\r\n      power_match: powerplays.power_match,\r\n    });\r\n  }\r\n  function handleDecreaseClicked(lottoBallNumber) {\r\n    if (powerplays.decrease < 1) {\r\n      return;\r\n    }\r\n    const newNumber = lottoBallNumber - 1;\r\n    if (myPickedNumbers.includes(newNumber)) {\r\n      return;\r\n    }\r\n    if (newNumber > 48 || newNumber < 1) {\r\n      return;\r\n    }\r\n    var newPickedNumbers = [...myPickedNumbers];\r\n    newPickedNumbers[newPickedNumbers.indexOf(lottoBallNumber)] = newNumber;\r\n    setMyPickedNumbers(newPickedNumbers);\r\n    //reduce amount\r\n    setPowerplays({\r\n      reset: powerplays.reset,\r\n      increase: powerplays.increase,\r\n      decrease: powerplays.decrease - 1,\r\n      power_match: powerplays.power_match,\r\n    });\r\n  }\r\n  function handleForceMatchClicked(lottoBallNumber) {\r\n    if (powerplays.power_match < 1) {\r\n      return;\r\n    }\r\n    const newNumber = latestDrawnNumber;\r\n    if (myPickedNumbers.includes(newNumber)) {\r\n      return;\r\n    }\r\n    if (newNumber > 48 || newNumber < 1) {\r\n      return;\r\n    }\r\n    var newPickedNumbers = [...myPickedNumbers];\r\n    newPickedNumbers[newPickedNumbers.indexOf(lottoBallNumber)] = newNumber;\r\n    setMyPickedNumbers(newPickedNumbers);\r\n    //reduce amount\r\n    setPowerplays({\r\n      reset: powerplays.reset,\r\n      increase: powerplays.increase,\r\n      decrease: powerplays.decrease,\r\n      power_match: powerplays.power_match - 1,\r\n    });\r\n  }\r\n  function handleResetClicked(lottoBallNumber) {\r\n    //check amount left\r\n    if (powerplays.reset < 1) {\r\n      return;\r\n    }\r\n    //update the number\r\n\r\n    var flag = true;\r\n    while (flag) {\r\n      var newNumber = Math.floor(Math.random() * 48) + 1;\r\n      if (!myPickedNumbers.includes(newNumber)) {\r\n        //update number\r\n        var newPickedNumbers = [...myPickedNumbers];\r\n        newPickedNumbers[newPickedNumbers.indexOf(lottoBallNumber)] = newNumber;\r\n        setMyPickedNumbers(newPickedNumbers);\r\n        flag = false;\r\n      }\r\n    }\r\n    //reduce amount\r\n    setPowerplays({\r\n      reset: powerplays.reset - 1,\r\n      increase: powerplays.increase,\r\n      decrease: powerplays.decrease,\r\n      power_match: powerplays.power_match,\r\n    });\r\n  }\r\n  function isLottoBallActive(lottoBallNumber) {\r\n    return lottoBallNumber == activeLottoBall ? true : false;\r\n  }\r\n  function isLottoBallMatched(lottoBallNumber) {\r\n    return drawnNumbersArray.includes(lottoBallNumber);\r\n  }\r\n  function getTotalMatched() {\r\n    var num = 0;\r\n    drawnNumbersArray.forEach((number) => {\r\n      if (myPickedNumbers.includes(number)) {\r\n        num++;\r\n        setTotalMatchedNumbers(num);\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"__Elite8Draw\">\r\n        <Header />\r\n        <div className=\"__content __flex\">\r\n          <div className=\"__game-box __flex\">\r\n            {/* gamebox */}\r\n            {/* gamebox left. Contains heading and in play */}\r\n            <div className=\"__game-box-left\">\r\n              {/* elite 8 heading */}\r\n              <div className=\"__description __flex __column __flex-center\">\r\n                <div className=\"__heading\">Elite 8</div>\r\n                <div className=\"__heading-description __flex\">\r\n                  Win <span className=\"__text-color-primary \"> {\"$2000\"} </span>{\" \"}\r\n                  CAD\r\n                </div>\r\n                <div className=\"__btn-rules __uppercase __flex __flex-center\">\r\n                  SEE CONTEST RULES\r\n                </div>\r\n              </div>\r\n              <div className=\"__in_play __flex __column __flex-start\">\r\n                <div className=\"__title __flex __column __flex-start\">\r\n                  <div className=\"text\">In Play</div>\r\n                  <div className=\"underline\"></div>\r\n                </div>\r\n                <div className=\"__draw_box __flex __column\">\r\n                  <div className=\"counter_text\">\r\n                    Number&nbsp;<span>{drawnNumbersArray.length}&nbsp;</span> of{\" \"}\r\n                    {TOTAL_NUMBERS_TO_DRAW}\r\n                  </div>\r\n                  <div className=\"t2\">Next number drawn in</div>\r\n                  <ProgressBar\r\n                    progress={counter}\r\n                    maxProgress={MAX_TIME}\r\n                    size={62}\r\n                    strokeWidth={4}\r\n                    circleOneStroke=\"grey\"\r\n                    circleTwoStroke=\"#fff\"\r\n                  />\r\n                  <div className=\"__background __drawn_number __flex __flex-center\">\r\n                    {latestDrawnNumber > 0 ? latestDrawnNumber : \"-\"}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* gamebox left ends here*/}\r\n            <div className=\"__game-box-right\">\r\n              <PageHeaderCard />\r\n              <div className=\"__winning_numbers\">\r\n                <div className=\"__title __flex __column __flex-start\">\r\n                  <div className=\"text\">Winning Numbers</div>\r\n                  <div className=\"underline\"></div>\r\n                </div>\r\n                <div className=\"__numbers_row __flex __flex-center\">\r\n                  {_.times(TOTAL_NUMBERS_TO_DRAW, (index) => (\r\n                    <div className=\"__number_ball __flex __flex-center __background\">\r\n                      {drawnNumbersArray[index]\r\n                        ? drawnNumbersArray[index]\r\n                        : \"?\"}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"__my_numbers\">\r\n                <div className=\"__title __flex __column __flex-start\">\r\n                  <div className=\"text\">My Numbers</div>\r\n                  <div className=\"underline\"></div>\r\n                </div>\r\n                <div className=\"t2\">\r\n                  Click a number to edit using your powerplays\r\n                </div>\r\n                <div className=\"__numbers_row __flex __flex-center\">\r\n                  {_.times(TOTAL_NUMBERS_TO_DRAW, (index) => (\r\n                    <LottoBall\r\n                      number={myPickedNumbers[index]}\r\n                      matched={isLottoBallMatched(myPickedNumbers[index])}\r\n                      isActive={isLottoBallActive(myPickedNumbers[index])}\r\n                      onClick={handleLottoBallClick}\r\n                      handlePowerplayClick={handlePowerplayClick}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"__matched_numbers_info __flex __flex-center\">\r\n                <div className=\"__info_tick __background\"></div>\r\n                <div className=\"__matched_text\">\r\n                  Matched &nbsp;<span>{totalMatchedNumbers}&nbsp;</span>of 8\r\n                  numbers\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* gamebox ends here  */}\r\n          <div className=\"__my-powerplays __flex __column __flex-center\">\r\n            <div className=\"powerplays-header\">\r\n              <div className=\"__heading-text\">My Powerplays</div>\r\n              <div className=\"__balance __flex\">\r\n                <div className=\"__my_balance\">My Balance</div>\r\n                <div className=\"__balance_dollars\">$0.00</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"__powerplays-detail __flex __column __flex-center \">\r\n              <div className=\"__powerplay_item\">\r\n                <div className=\"__powerplay_amount\">\r\n                  {powerplays.reset} left\r\n                </div>\r\n                <div className=\"__powerplay_img img_replace __background\"></div>\r\n                <div className=\"__powerplay_name\">Replace</div>\r\n              </div>\r\n              <div className=\"__powerplay_item\">\r\n                <div className=\"__powerplay_amount\">\r\n                  {powerplays.reset_all} left\r\n                </div>\r\n                <div className=\"__powerplay_img img_replace_all __background\"></div>\r\n                <div className=\"__powerplay_name\">Replace All</div>\r\n              </div>\r\n              <div className=\"__powerplay_item\">\r\n                <div className=\"__powerplay_amount\">\r\n                  {powerplays.power_match} left\r\n                </div>\r\n                <div className=\"__powerplay_img img_power __background\"></div>\r\n                <div className=\"__powerplay_name\">Power Match</div>\r\n              </div>\r\n              <div className=\"__powerplay_item\">\r\n                <div className=\"__powerplay_amount\">\r\n                  {powerplays.increase} left\r\n                </div>\r\n                <div className=\"__powerplay_img img_increase __background\"></div>\r\n                <div className=\"__powerplay_name\">Increase</div>\r\n              </div>\r\n              <div className=\"__powerplay_item\">\r\n                <div className=\"__powerplay_amount\">\r\n                  {powerplays.decrease} left\r\n                </div>\r\n                <div className=\"__powerplay_img img_decrease __background\"></div>\r\n                <div className=\"__powerplay_name\">Decrease</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Elte8Game;\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Login\\index.js",["848"],"import React, {useEffect, useState} from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport classes from './index.module.scss'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport Header from '../../components/Header/Header'\r\nimport SignInImage from '../../assets/signin-background.png'\r\nimport Input from '../../components/Input'\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport { authenticate } from '../../actions/authActions';\r\nimport Alert from '../../components/Alert';\r\nimport { isEmpty } from 'lodash';\r\nimport { getLocalStorage, redirectTo } from '../../utility/shared';\r\n\r\nfunction LoginPage(props) {\r\n    const [user, setUser] = useState({ email: '', password: '' });\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading = false, user: authUser = {} } = useSelector((state) => state.auth);\r\n    const { token = '', status: loggedIn = false, message = '' } = authUser || {}\r\n    \r\n    useEffect(() => {\r\n        if (loggedIn === true && !isEmpty(authUser)) {\r\n            redirectTo(props, {path: '/my-game-center/contests'})\r\n        }\r\n    }, [loggedIn, authUser])\r\n    \r\n    const onLoginSubmit = async (e) => {\r\n        e?.preventDefault();\r\n        \r\n        if (isEmpty(user.email) || isEmpty(user.password)) {\r\n            //error message\r\n            return;\r\n        }\r\n\r\n        dispatch(authenticate(user));\r\n    }\r\n    \r\n    const redirect = () => {\r\n        if (!isEmpty(token) || !isEmpty(getLocalStorage(CONSTANTS.LOCAL_STORAGE_KEYS.USER))) {\r\n            const { location: { state = {} } = {} } = props || {}\r\n            \r\n            return <Redirect to={!isEmpty(state) ? state?.from : '/'} />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className={classes.wrapper}>\r\n                <div className={classes.back_drop} />\r\n                <div className={classes.header}>\r\n                    <img src={SignInImage} alt=\"\" className={classes.header_image} />\r\n                    \r\n                    <div className={classes.header_content}>\r\n                        <p className={classes.header_title}>Get ready to Power-up!</p>\r\n                        <p className={classes.header_p}>\r\n                        Let’s start your new experience our ground-breaking live-play games where you have the Power to control your destiny!\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={classes.content_wrapper}>\r\n                    <div className={classes.content_top_skew} />\r\n                    <div className={classes.content_card}>\r\n                        {\r\n                            !isEmpty(authUser) && !loggedIn &&\r\n                            <>\r\n                                <Alert renderMsg={() => <p>{message}</p>} danger />\r\n                                <br />\r\n                            </>\r\n                        }\r\n                        {\r\n                            !isEmpty(authUser) && loggedIn &&\r\n                            <>\r\n                                <Alert renderMsg={() => <p>Login Success</p>} success />\r\n                                <br />\r\n                            </>\r\n                        }\r\n                        <form onSubmit={onLoginSubmit}>\r\n                            <Input type=\"text\" block rounded label=\"E-mail\" required value={user.email} onChange={(e) => {\r\n                                setUser({...user, email: e?.target?.value})\r\n                            }} bordered />\r\n                            <Input type=\"password\" block rounded label=\"Password\" required value={user.password} onChange={(e) => {\r\n                                setUser({...user, password: e?.target?.value})\r\n                            }} bordered />\r\n                            <button className={`${'__btn __large-btn'} ${classes.login_btn}`} type=\"submit\" disabled={loading || (isEmpty(user.email) || isEmpty(user.password))}>\r\n                                {\r\n                                    loading ?\r\n                                        'Loading...'\r\n                                        :\r\n                                        'Log in'\r\n                                }\r\n                            </button>\r\n                        </form>\r\n                        <br />\r\n                    </div>\r\n\r\n                    <p className={classes.content_footer_p}>\r\n                        Don't have an account? <Link to=\"/\">Click here to Power-up!</Link>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <Footer isBlack />\r\n            {\r\n                redirect()\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\RoyalGame\\index.js",["849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865"],"import React, {useState, useEffect} from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\r\n\r\nimport {flushList, getIndexOfArrayElement, hasPowerRoyalsCard, isPowerRoyalCard, royalFlush, redirectTo} from '../../utility/shared'\r\nimport Card from '../../components/Card'\r\nimport GameCard from '../../components/GameCard'\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport ProgressBar from '../../components/Progress'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport Alert from '../../components/Alert'\r\nimport Reload from '../../icons/Reload'\r\nimport BoltIcon from '../../assets/bolt.png'\r\nimport CardsSvg from '../../icons/Cards'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport SidebarButton from '../../components/SidebarButton'\r\nimport Replace from '../../icons/Replace'\r\nimport PlusMinus from '../../icons/PlusAndMinus'\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport { getRandomCard } from '../../utility/shared'\r\nimport {\r\n    setPowerCardState,\r\n    resetPowerRoyalsCardState,\r\n    powerRoyalsGameInventory\r\n} from '../../actions/powerRoyalsActions'\r\nimport { differenceWith, isEmpty, isEqual } from 'lodash'\r\nimport classes from './cardGamePage.module.scss'\r\n\r\nconst INITIAL_STATE = {\r\n    collectedCards: [{}, {}, {}, {}, {}],\r\n    activeCard: {}\r\n}\r\nconst TOTAL_ROUNDS = 2;\r\nconst TOTAL_CARDS = 5;\r\nconst MAX_ROUND_TIME = 5;\r\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\r\nconst REPLACE_ALL_SPEED_TIME = 1;\r\nlet _round = 1;\r\nlet _currentCard = 0;\r\nconst cardsArr = [{}, {}, {}, {}, {}]\r\nlet time = MAX_ROUND_TIME;\r\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\r\n\r\nfunction PowerRoyalsGame(props) {\r\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\r\n    const [count, setCount] = useState(MAX_ROUND_TIME)\r\n    const [currentRound, setCurrentRound] = useState(_round)\r\n    const [currentCard, setCurrentCard] = useState(_currentCard)\r\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\r\n    const [showResetTimer, setResetTimerState] = useState(false)\r\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\r\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\r\n    const [isDroppable, setIsDroppable] = useState(false)\r\n    const [isRoundCompleted, setIsRounCompleted] = useState(false)\r\n    const [isGameCompleted, setGameCompleted] = useState(false)\r\n\r\n    const dispatch = useDispatch();\r\n    const { collectedCards = [],\r\n        inventory = {}\r\n    } = useSelector(state => state.powerRoyals)\r\n\r\n    const {\r\n        replace = 0, replaceAll = 0, newHands = 0,\r\n        powerMatch = 0, increaseOrDecrease = 0\r\n    } = inventory || {}\r\n    \r\n    useEffect(() => { \r\n        dispatch(resetPowerRoyalsCardState())\r\n        resetGameState()\r\n\r\n        return () => resetGameState()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let timeOut = gameStart();\r\n        \r\n        return function clearnup() {\r\n            return clearInterval(timeOut)\r\n        }\r\n    }, [currentCard, currentRound, selectedRoundCard, isRoundCompleted])\r\n\r\n    const gameStart = () => {\r\n        let timeOut = null\r\n        if (_currentCard < TOTAL_CARDS) {\r\n            if (!isReplaceAll)\r\n                time = MAX_ROUND_TIME;\r\n            else\r\n                time = REPLACE_ALL_SPEED_TIME\r\n            setResetTimerState(false)\r\n            hasRoundCompleted()\r\n            timeOut = setInterval(() => {\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                    if (!isReplaceAll)\r\n                        time = MAX_ROUND_TIME;\r\n                    else\r\n                        time = REPLACE_ALL_SPEED_TIME\r\n                    setCount(time)\r\n\r\n                    _currentCard += 1;\r\n                    setCurrentCard(_currentCard)\r\n                    updateCardState()\r\n\r\n                    if (!isDroppable && _currentCard >= 4) {\r\n                        setIsDroppable(true)\r\n                    } \r\n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\r\n                }\r\n            }, 1000)\r\n        } else if (isRoundCompleted) {\r\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n            timeOut = setInterval(() => {\r\n                setIsReplaceAllState(false)\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                    if (currentRound < TOTAL_ROUNDS) {\r\n                        setResetTimerState(true)\r\n                        if (resetAllBtnTime !== 0) {\r\n                            resetAllBtnTime--;\r\n                            setResetBtnCountDown(resetAllBtnTime)\r\n                        } else {\r\n                            _round += 1;\r\n                            setCurrentRound(_round)\r\n                            setCurrentCard(0)\r\n                            resetGameState()\r\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n                            setResetBtnCountDown(resetAllBtnTime)\r\n                            setResetTimerState(false)\r\n                        }\r\n                    } else {\r\n                        setResetTimerState(false)\r\n                        setIsReplaceAllState(false)\r\n                        clearInterval(timeOut)\r\n                    }\r\n                }\r\n            }, 1000)\r\n        }\r\n\r\n        return timeOut\r\n    }\r\n\r\n    const resetGameState = () => {\r\n        for (let i = 0; i < 5; i++) {\r\n            cardsArr[i] = {}\r\n        }\r\n\r\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n        _currentCard = 0;\r\n        setCardsState(INITIAL_STATE)\r\n        setCurrentCard(_currentCard)\r\n        setIsDroppable(false)\r\n        setCount(MAX_ROUND_TIME)\r\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\r\n        setResetTimerState(false)\r\n        setIsReplaceAllState(false)\r\n        setSelectedRoundCard(null)\r\n        dispatch(setPowerCardState([]))\r\n    }\r\n\r\n    const updateCardState = () => {\r\n        let card = getRandomCard()\r\n        \r\n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\r\n            setSelectedRoundCard(card)\r\n        }\r\n        \r\n        \r\n        if (hasCardAlreadyExistInArray(card)) {\r\n            return updateCardState()\r\n        }\r\n        // cardsArr.push(card)\r\n        \r\n        if (!isEmpty(cardsArr[currentCard])) {\r\n            //find and empty index and place the card at that index\r\n            let emptyIndex = cardsArr?.findIndex((c) => Object.keys(c)?.length === 0)\r\n            cardsArr[emptyIndex] = card;\r\n        } else {\r\n            cardsArr[currentCard] = card;\r\n        }\r\n\r\n        onCardCompleted(card)\r\n\r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\r\n    }\r\n\r\n    const _redirectTo = (path = '/') => {\r\n        redirectTo(props, {path})\r\n    }\r\n\r\n    const updateInventory = (inventoryValue, actionType) => {\r\n        const _inventory = inventory;\r\n\r\n        switch (actionType) {\r\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\r\n                _inventory.increaseOrDecrease = inventoryValue\r\n                break\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\r\n                _inventory.powerMatch = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\r\n                _inventory.replace = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\r\n                _inventory.newHands = inventoryValue\r\n                break;\r\n        }\r\n\r\n        dispatch(powerRoyalsGameInventory(_inventory))\r\n    }\r\n\r\n    const onReplaceAll = () => {\r\n        let _newHands = newHands\r\n        if (_newHands <= 0) return\r\n\r\n        _newHands -= 1\r\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\r\n        resetGameState()\r\n        setIsReplaceAllState(true)\r\n        setCount(REPLACE_ALL_SPEED_TIME)\r\n        time = REPLACE_ALL_SPEED_TIME\r\n    }\r\n\r\n    const onIncrease = (card, cardIndex) => {\r\n        const { rank = 0, suit = 0 } = card || {}\r\n        let _increaseOrDecrease = increaseOrDecrease\r\n\r\n        if (increaseOrDecrease <= 0) {\r\n            return\r\n        }\r\n        \r\n        _increaseOrDecrease -= 1;\r\n\r\n        let _rank = rank\r\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\r\n            _rank += 1;\r\n        }\r\n        \r\n        const newCard = {\r\n            suit: suit,\r\n            rank: _rank\r\n        }\r\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\r\n            newCard.rank = newCard?.rank + 1;\r\n        }\r\n        cardsArr[cardIndex] = newCard\r\n        // otherPowerCardMatch(newCard, cardIndex)\r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\r\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n        hasRoundCompleted()\r\n    }\r\n\r\n    const onDecrease = (card, cardIndex) => {\r\n        const { rank = 0, suit = 0 } = card || {}\r\n        let _increaseOrDecrease = increaseOrDecrease\r\n\r\n        if (increaseOrDecrease <= 0) {\r\n            return\r\n        }\r\n\r\n        _increaseOrDecrease -= 1\r\n\r\n        let _rank = rank\r\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\r\n            _rank -= 1;\r\n        }\r\n        \r\n        const newCard = {\r\n            suit: suit,\r\n            rank: _rank\r\n        }\r\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\r\n            newCard.rank = newCard?.rank - 1;\r\n        }\r\n        cardsArr[cardIndex] = newCard\r\n        // otherPowerCardMatch(newCard, cardIndex)\r\n        \r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\r\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n        hasRoundCompleted()\r\n    }\r\n\r\n    const onPowerMatch = (card, cardIndex) => {\r\n        let _powerMatch = powerMatch\r\n        if (powerMatch <= 0) {\r\n            return\r\n        }\r\n\r\n        _powerMatch -= 1;\r\n        \r\n        const powerRyalCards = royalFlush(selectedRoundCard?.suit)\r\n        \r\n        cardsArr[cardIndex] = powerRyalCards[cardIndex]\r\n        \r\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: powerRyalCards[cardIndex] })\r\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\r\n        hasRoundCompleted()\r\n    }\r\n\r\n    const onReplace = (card, cardIndex) => {\r\n        let _replace = replace\r\n        if (replace <= 0) {\r\n            return\r\n        }\r\n\r\n        _replace -= 1\r\n\r\n        let newCard = getRandomCard();\r\n        if (isEqual(newCard, card) || hasCardAlreadyExistInArray(newCard)) {\r\n            newCard = getRandomCard();\r\n        }\r\n\r\n        if (currentCard === 1 && card === cardsState?.activeCard) {\r\n            setSelectedRoundCard(newCard)\r\n        }\r\n        otherPowerCardMatch(newCard, cardIndex)\r\n        \r\n\r\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\r\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\r\n        hasRoundCompleted()\r\n    }\r\n\r\n    const onCardCompleted = (card) => {\r\n        const { rank = 0, suit = 0 } = card || {}\r\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : suit);\r\n\r\n        const [foundCard] = isPowerRoyalCard(suit, rank, powerCardsList);\r\n\r\n        if (!foundCard) return;\r\n\r\n        setMatchCard(foundCard, currentCard, powerCardsList)\r\n    }\r\n\r\n    const otherPowerCardMatch = (card, cardIndex) => {\r\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : card?.suit);\r\n        const [foundCard] = isPowerRoyalCard(card?.suit, card?.rank, powerCardsList);\r\n\r\n        if (foundCard) {\r\n            setMatchCard(foundCard, cardIndex, powerCardsList)\r\n        } else {\r\n            cardsArr[cardIndex] = card;\r\n        }\r\n    }\r\n\r\n    const setMatchCard = (card, index, list) => {\r\n        let indexOfCard = getIndexOfArrayElement(card, list)\r\n        cardsArr[index] = cardsArr[indexOfCard]\r\n        cardsArr[indexOfCard] = card\r\n    }\r\n\r\n    const hasCardAlreadyExistInArray = (card) => {\r\n        const [alreadyExistsCard] = cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\r\n        return alreadyExistsCard;\r\n    }\r\n    \r\n    const isCompleted = (index) => isEqual(royalFlush(selectedRoundCard?.suit)[index], cardsState?.collectedCards?.[index])\r\n\r\n    const getTargetSuit = () => {\r\n        switch (selectedRoundCard?.suit) {\r\n            case CONSTANTS.CARD_SUITS.CLUB: \r\n                return 'CLUBS'\r\n            \r\n            case CONSTANTS.CARD_SUITS.DIAMOND:\r\n                return 'DIAMONDS'\r\n            \r\n            case CONSTANTS.CARD_SUITS.HEART:\r\n                return 'HEARTS'\r\n            \r\n            case CONSTANTS.CARD_SUITS.SPADE:\r\n                return 'SPADES'\r\n        }\r\n    }\r\n\r\n    const hasRoundCompleted = () => {\r\n        if (currentRound === 1 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\r\n            setTimeout(() => { \r\n                resetGameState()\r\n                setCurrentRound(2)\r\n            }, 3000)\r\n            \r\n            return setIsRounCompleted(true)\r\n        } else if (currentRound === 2 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\r\n            return setGameCompleted(true)\r\n        }\r\n\r\n        setGameCompleted(false)\r\n        return setIsRounCompleted(false)\r\n    }\r\n\r\n    const text = (value) => (`Try for a ${value} card here`)\r\n\r\n    const renderCardText = (index) => {\r\n        switch (index) {\r\n            case 0: \r\n                return text(10)\r\n            \r\n            case 1:\r\n                return text('Jack')\r\n            \r\n            case 2:\r\n                return text('Queen')\r\n            \r\n            case 3:\r\n                return text('King')\r\n            \r\n            case 4:\r\n                return 'Try for an Ace card here'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className={classes.__card_game_content}>\r\n                <div className={classes.__card_game_content_left}>\r\n                    <PageHeader title=\"Power Royals\" seconds={6}/>\r\n                    <div className={classes._card_game_content_top}>\r\n                        <div className={classes._card_game_content_header_text}>\r\n                            <p>\r\n                                Welcome to <span>Power Royals!</span> If you can get a red card royal flush followed by a black card royal flush, you win!\r\n                            </p>\r\n                        </div>\r\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\r\n                        <p className={classes.__card_game_card_counter}>\r\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\r\n                        </p>\r\n                        <p className={classes.__card_game_round_counter}>\r\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\r\n                        </p>\r\n                        <span className={classes.__card_divider} />\r\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\r\n                        <ProgressBar\r\n                            progress={count}\r\n                            maxProgress={5}\r\n                            size={62}\r\n                            strokeWidth={4}\r\n                            circleOneStroke='grey'\r\n                            circleTwoStroke='#fff'/>\r\n                    </div>\r\n\r\n                    <div className={classes.__card_game_content_body}>\r\n                        <Card>\r\n                            <div className={`${classes.__card_game_content_cards}`}>\r\n                                {cardsState?.collectedCards?.map((c, index) => (\r\n                                    isEmpty(c) ?\r\n                                        <GameCard key={index + ''}\r\n                                            isCompleted={false}\r\n                                            showCardPopu={false}\r\n                                            isSelected={false}\r\n                                            activeCard={null}\r\n                                            showCardPopup={false}\r\n                                            time={0}\r\n                                            text={renderCardText(index)}\r\n                                            showIncrementOrDecrementPower={false}\r\n                                            showPowerMatchPower={false}\r\n                                            showReplacePower={false}\r\n                                            onDecrease={() => { }}\r\n                                            onReplace={() => { }}\r\n                                            onPowerMatch={() => { }}\r\n                                            onIncrease={() => { }}\r\n                                        />\r\n                                        :\r\n                                        <GameCard\r\n                                            key={index + ''}\r\n                                            showCardPopup={!isReplaceAll && true}\r\n                                            isCompleted={isCompleted(index)}\r\n                                            card={cardsState?.collectedCards?.[index]}\r\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\r\n                                            activeCard={cardsState?.activeCard}\r\n                                            time={time}\r\n                                            inventory={inventory}\r\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                            showPowerMatchPower={powerMatch > 0}\r\n                                            showReplacePower={replace > 0}\r\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\r\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\r\n                                            onPowerMatch={() => onPowerMatch(cardsState?.collectedCards?.[index], index)}\r\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\r\n                                        /> \r\n                                    ))}\r\n                            </div> \r\n                        </Card>\r\n                        {\r\n                            currentRound === 1 && currentCard === 0 && time > 0 &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\r\n                                </>\r\n                        }\r\n\r\n                        {\r\n                            selectedRoundCard && !isRoundCompleted &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>Your target suit is <strong>{ getTargetSuit() }</strong></p>} primary />\r\n                                </>\r\n                        }\r\n\r\n                        {\r\n                            isRoundCompleted &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>Royal Flush! moving on to Round 2.</p>} success />\r\n                                </>\r\n                        }\r\n\r\n                        {\r\n                            isGameCompleted &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>You won the game!</p>} success />\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Sidebar>\r\n                    <div className={classes.__sidebar_header}>\r\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\r\n                    </div>\r\n\r\n                    <div className={classes.__sidebar_button_wrapper}>\r\n                        <SidebarButton\r\n                            success={replace > 0 ? true : false}\r\n                            primary={replace <= 0 ? true : false}\r\n                            title=\"Power Card\"\r\n                            toolText={`${replace} left`}\r\n                            icon={<Replace style={{ height: 'auto' }} />}\r\n                        />\r\n\r\n                        <SidebarButton\r\n                            success={newHands > 0 ? true : false}\r\n                            primary={newHands <= 0 ? true : false}\r\n                            title=\"Power Hand\"\r\n                            toolText={`${newHands} left`}\r\n                            icon={<div\r\n                                className={classes.__sidebar_reload_btn}>\r\n                                <Reload bgColor={\"#0ff\"} style={{height: 'auto'}}/>\r\n                            </div>}\r\n                        />\r\n\r\n                        <SidebarButton\r\n                            success={powerMatch > 0 ? true : false}\r\n                            primary={powerMatch <= 0 ? true : false}\r\n                            title=\"Power Match\"\r\n                            toolText={`${powerMatch} left`}\r\n                            icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\r\n                        />\r\n\r\n                        <SidebarButton\r\n                            success={increaseOrDecrease > 0 ? true : false}\r\n                            primary={increaseOrDecrease <= 0 ? true : false}\r\n                            title=\"Power Up/Down\"\r\n                            toolText={`${increaseOrDecrease} left`}\r\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\r\n                        />\r\n                    </div>\r\n                </Sidebar>\r\n            </div>\r\n            <Footer isBlack/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(PowerRoyalsGame)","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerPoker\\index.js",["866","867","868","869","870","871","872","873","874","875"],"import React, {useState, useEffect} from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport {getRandomCard, getCardsRankPairs, royalFlush} from '../../utility/shared'\r\nimport Card from '../../components/Card'\r\nimport GameCard from '../../components/GameCard'\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport ProgressBar from '../../components/Progress'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport Alert from '../../components/Alert'\r\nimport Reload from '../../icons/Reload'\r\nimport BoltIcon from '../../assets/bolt.png'\r\nimport CardsSvg from '../../icons/Cards'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport SidebarButton from '../../components/SidebarButton'\r\nimport Replace from '../../icons/Replace'\r\nimport PlusMinus from '../../icons/PlusAndMinus'\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport {\r\n    resetPowerPokersCardState,\r\n    powerPokersGameInventory\r\n} from '../../actions/powerPokerActions'\r\nimport { isEmpty, isEqual } from 'lodash'\r\nimport classes from './pokerHands.module.scss'\r\n\r\nconst INITIAL_STATE = {\r\n    collectedCards: [{}, {}, {}, {}, {}],\r\n    activeCard: {}\r\n}\r\nconst TOTAL_ROUNDS = 3;\r\nconst TOTAL_CARDS = 5;\r\nconst MAX_ROUND_TIME = 5;\r\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\r\nconst REPLACE_ALL_SPEED_TIME = 1;\r\nlet _round = 1;\r\nlet _currentCard = 0;\r\nconst cardsArr = [{}, {}, {}, {}, {}]\r\nlet time = MAX_ROUND_TIME;\r\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\r\n\r\nfunction PowerRoyalsGame(props) {\r\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\r\n    const [count, setCount] = useState(MAX_ROUND_TIME)\r\n    const [completedChallengeText, setCompletedChallengeText] = useState()\r\n    const [currentRound, setCurrentRound] = useState(_round)\r\n    const [currentCard, setCurrentCard] = useState(_currentCard)\r\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\r\n    const [showResetTimer, setResetTimerState] = useState(false)\r\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\r\n    const [isGameCompleted, setGameCompleted] = useState(false)\r\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\r\n    const [isCurrentFailed, setIsCurrentRoundFailed] = useState(false)\r\n\r\n    const dispatch = useDispatch();\r\n    const {inventory = {}} = useSelector(state => state.powerPoker)\r\n\r\n    const {\r\n        replace = 0, replaceAll = 0, newHands = 0,\r\n        powerMatch = 0, increaseOrDecrease = 0\r\n    } = inventory || {}\r\n    \r\n    useEffect(() => {\r\n        dispatch(resetPowerPokersCardState())\r\n        resetGameState()\r\n\r\n        return () => resetGameState()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let timeOut = gameStart();\r\n\r\n        if(isGameCompleted) clearInterval(timeOut)\r\n        \r\n        return function cleanup() {\r\n            return clearInterval(timeOut && timeOut)\r\n        }\r\n    }, [currentCard, currentRound, completedChallengeText, isCurrentFailed])\r\n\r\n    const gameStart = () => {\r\n        let timeOut = null\r\n        if (_currentCard < TOTAL_CARDS) {\r\n            if (!isReplaceAll)\r\n                time = MAX_ROUND_TIME;\r\n            else\r\n                time = REPLACE_ALL_SPEED_TIME\r\n            setResetTimerState(false)\r\n            timeOut = setInterval(() => {\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                    if (!isReplaceAll)\r\n                        time = MAX_ROUND_TIME;\r\n                    else\r\n                        time = REPLACE_ALL_SPEED_TIME\r\n                    setCount(time)\r\n\r\n                    _currentCard += 1;\r\n                    setCurrentCard(_currentCard)\r\n                    updateCardState()\r\n\r\n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\r\n                }\r\n            }, 1000)\r\n        } else {\r\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n            timeOut = setInterval(() => {\r\n                setIsReplaceAllState(false)\r\n                if (time !== 0) {\r\n                    time--;\r\n                    setCount(time)\r\n                } else {\r\n                    if (currentRound < TOTAL_ROUNDS) {\r\n                        setResetTimerState(true)\r\n                        if (resetAllBtnTime !== 0) {\r\n                            resetAllBtnTime--;\r\n                            setResetBtnCountDown(resetAllBtnTime)\r\n                        } else {\r\n                            _round += 1;\r\n                            setCurrentRound(_round)\r\n                            setCurrentCard(0)\r\n                            resetGameState()\r\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n                            setResetBtnCountDown(resetAllBtnTime)\r\n                            setResetTimerState(false)\r\n                        }\r\n                    } else {\r\n                        setResetTimerState(false)\r\n                        setIsReplaceAllState(false)\r\n                        clearInterval(timeOut)\r\n                    }\r\n                }\r\n            }, 1000)\r\n        }\r\n\r\n        return timeOut\r\n    }\r\n\r\n    const resetGameState = () => {\r\n        for (let i = 0; i < 5; i++) {\r\n            cardsArr[i] = {}\r\n        }\r\n\r\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\r\n        _currentCard = 0;\r\n        setCardsState(INITIAL_STATE)\r\n        setCompletedChallengeText(null)\r\n        setIsCurrentRoundFailed(false)\r\n        setCurrentCard(_currentCard)\r\n        setCount(MAX_ROUND_TIME)\r\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\r\n        setResetTimerState(false)\r\n        setSelectedRoundCard(null)\r\n        setIsReplaceAllState(false)\r\n    }\r\n\r\n    const updateCardState = () => {\r\n        let card = getRandomCard()\r\n\r\n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\r\n            setSelectedRoundCard(card)\r\n        }\r\n\r\n        cardsArr[currentCard] = card\r\n\r\n        if (hasCardAlreadyExists(card)?.length > 1) {\r\n            return updateCardState()\r\n        }\r\n\r\n        challengeCompleted()\r\n\r\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: card })\r\n    }\r\n\r\n    //if the card of same rank and suit is already exists then get any other random card\r\n    const hasCardAlreadyExists = (card) => cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\r\n\r\n    const challengeCompleted = () => {\r\n        //Note: This poker hand is from Highiest to lowest, and the sequence must be below sequence\r\n        \r\n        if (_currentCard !== cardsArr?.length) { return null }\r\n\r\n        if (hasRoyalFlush()) {\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Royal Flush! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasStraightFlushSameSuit()) {\r\n            //Straight Completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Straight Flush! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasFoureOfAKindFlush()) {\r\n            //4 of a kind completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Four Of A Kind! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasFullHouseFlush()) {\r\n            //Full House Completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Full House! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasFlush()) {\r\n            //fluch completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Flush! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasStraightFlushDiffSuit()) {\r\n            //straight flush diff suit completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Straight! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasThreeOfAKindFlush()) {\r\n            //three of a kind compeleted\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Three Of A Kind! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasTwoPairFlush()) {\r\n            //two pair compeleted\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>Two Pair! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n        else if (hasPairFlush()) {\r\n            //Pair completed\r\n            setIsCurrentRoundFailed(false)\r\n            setCompletedChallengeText(<p>1 Pair! challenge completed</p>)\r\n\r\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\r\n        }\r\n\r\n        setIsCurrentRoundFailed(true)\r\n        setCompletedChallengeText(<p>Sorry, you did not win on this hand.</p>)\r\n\r\n        return setGameCompleted(false)\r\n    }\r\n\r\n    const updateInventory = (inventoryValue, actionType) => {\r\n        const _inventory = inventory;\r\n\r\n        switch (actionType) {\r\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\r\n                _inventory.increaseOrDecrease = inventoryValue\r\n                break\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\r\n                _inventory.powerMatch = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\r\n                _inventory.replace = inventoryValue\r\n                break;\r\n            \r\n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\r\n                _inventory.newHands = inventoryValue\r\n                break;\r\n        }\r\n\r\n        dispatch(powerPokersGameInventory(_inventory))\r\n    }\r\n\r\n    const onReplaceAll = () => {\r\n        let _newHands = newHands\r\n        if (_newHands <= 0) return\r\n\r\n        _newHands -= 1\r\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\r\n        resetGameState()\r\n        setIsReplaceAllState(true)\r\n        setCount(REPLACE_ALL_SPEED_TIME)\r\n        time = REPLACE_ALL_SPEED_TIME\r\n    }\r\n\r\n    const onIncrease = (card, cardIndex) => {\r\n        const { rank = 0, suit = 0 } = card || {}\r\n        let _increaseOrDecrease = increaseOrDecrease\r\n\r\n        if (increaseOrDecrease <= 0) {\r\n            return\r\n        }\r\n        \r\n        _increaseOrDecrease -= 1;\r\n\r\n        let _rank = rank\r\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\r\n            _rank += 1;\r\n        }\r\n        \r\n        const newCard = {\r\n            suit: suit,\r\n            rank: _rank\r\n        }\r\n        cardsArr[cardIndex] = newCard\r\n\r\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\r\n            newCard.rank += 1;\r\n            cardsArr[cardIndex] = newCard\r\n        }\r\n\r\n        challengeCompleted()\r\n        \r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\r\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n    }\r\n\r\n    const onDecrease = (card, cardIndex) => {\r\n        const { rank = 0, suit = 0 } = card || {}\r\n        let _increaseOrDecrease = increaseOrDecrease\r\n\r\n        if (increaseOrDecrease <= 0) {\r\n            return\r\n        }\r\n\r\n        _increaseOrDecrease -= 1\r\n\r\n        let _rank = rank\r\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\r\n            _rank -= 1;\r\n        }\r\n        \r\n        const newCard = {\r\n            suit: suit,\r\n            rank: _rank\r\n        }\r\n        cardsArr[cardIndex] = newCard\r\n\r\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\r\n            if (CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\r\n                newCard.rank -= 1;\r\n            }\r\n            cardsArr[cardIndex] = newCard\r\n        }\r\n\r\n        challengeCompleted()\r\n        \r\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\r\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\r\n    }\r\n\r\n    const onReplace = (card, cardIndex) => {\r\n        let _replace = replace\r\n        if (replace <= 0) {\r\n            return\r\n        }\r\n\r\n        _replace -= 1\r\n\r\n        let newCard = getRandomCard();\r\n        \r\n        if (currentCard === 1 && card === cardsState?.activeCard) {\r\n            setSelectedRoundCard(newCard)\r\n        }\r\n        \r\n        cardsArr[cardIndex] = newCard\r\n        \r\n        if (hasCardAlreadyExists(newCard)?.length > 1) { \r\n            newCard = getRandomCard()\r\n            cardsArr[cardIndex] = newCard\r\n        }\r\n\r\n        challengeCompleted()\r\n        \r\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\r\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\r\n    }\r\n\r\n    const hasStraightFlushDiffSuit = () => {\r\n        //Five cards in a sequence, but not of the same suit.\r\n        let hasFlush = cardsArr?.every((c, i, ar) => {\r\n            return !i || ar[i - 1]?.rank > c?.rank\r\n        })\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasFullHouseFlush = () => {\r\n        //Three of a kind with a pair.\r\n        let hasFlush = false;\r\n        const threeOfAKind = getCardsRankPairs(cardsArr)\r\n        Object.entries(threeOfAKind).forEach(([key, val]) => {\r\n            if (val % 2 === 0 && val % 3 === 0) {\r\n                hasFlush = true\r\n            }\r\n        })\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasFlush = () => {\r\n        //Any five cards of the same suit, but not in a sequence.\r\n        const cards = cardsArr?.filter(c => c?.suit === cardsArr[0]?.suit);\r\n        if (cards?.length === 5) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    const hasStraightFlushSameSuit = () => {\r\n        //Five cards in a sequence, all in the same suit.\r\n        const flushCards = cardsArr?.filter(c => c?.suit === selectedRoundCard?.suit)\r\n        let hasFlush = false;\r\n        if (flushCards?.length >= 5) {\r\n            //all same suit cards\r\n            hasFlush = cardsArr?.every((c, i, ar) => {\r\n                if(ar[0]?.rank > ar[1]?.rank)\r\n                    return !i || ar[i - 1]?.rank > c?.rank //highest to lowest\r\n                \r\n                return !i || ar[i - 1]?.rank < c?.rank //lowest to highest\r\n            })\r\n        }\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasThreeOfAKindFlush = () => {\r\n        //Three cards of the same rank.\r\n        let hasFlush = false;\r\n        const counts = getCardsRankPairs(cardsArr)\r\n        Object.entries(counts).forEach(([key, val]) => {\r\n            if (val % 3 === 0) {\r\n                hasFlush = true\r\n            }\r\n        })\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasTwoPairFlush = () => {\r\n        //two pairs\r\n        let pairsCount = 0;\r\n        const counts = getCardsRankPairs(cardsArr)\r\n        Object.entries(counts).forEach(([key, val]) => {\r\n            if (val % 2 === 0) {\r\n                pairsCount ++\r\n            }\r\n        })\r\n\r\n        return pairsCount === 2 ? true : false\r\n    }\r\n\r\n    const hasPairFlush = () => {\r\n        //Two cards of the same rank.\r\n        let hasFlush = false\r\n        const counts = getCardsRankPairs(cardsArr)\r\n        Object.entries(counts).forEach(([key, val]) => {\r\n            if (val % 2 === 0) {\r\n                hasFlush = true\r\n            }\r\n        })\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasFoureOfAKindFlush = () => {\r\n        //foure cards of same rank\r\n        let hasFlush = false\r\n        const counts = getCardsRankPairs(cardsArr)\r\n        Object.entries(counts).forEach(([key, val]) => {\r\n            if(val % 4 === 0) {\r\n                hasFlush = true\r\n            }\r\n        })\r\n\r\n        return hasFlush\r\n    }\r\n\r\n    const hasRoyalFlush = () => {\r\n        //A, K, Q, J, 10, all the same suit.\r\n        const _royalFlush = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : cardsArr[0]?.suit)\r\n        if (isEqual(cardsArr, _royalFlush)) {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className={classes.__card_game_content}>\r\n                <div className={classes.__card_game_content_left}>\r\n                    <PageHeader title=\"Power Poker\" seconds={6}/>\r\n                    <div className={classes._card_game_content_top}>\r\n                        <div className={classes._card_game_content_header_text}>\r\n                            <p>\r\n                                Welcome to <span>Power Poker!</span> Use Powers to make winning hands! Can you get a Royal Flush? You have the Power!\r\n                            </p>\r\n                        </div>\r\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\r\n                        <p className={classes.__card_game_card_counter}>\r\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\r\n                        </p>\r\n                        <p className={classes.__card_game_round_counter}>\r\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\r\n                        </p>\r\n                        <span className={classes.__card_divider} />\r\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\r\n                        <ProgressBar\r\n                            progress={count}\r\n                            maxProgress={5}\r\n                            size={62}\r\n                            strokeWidth={4}\r\n                            circleOneStroke='grey'\r\n                            circleTwoStroke='#fff'/>\r\n                    </div>\r\n\r\n                    <div className={classes.__card_game_content_body}>\r\n                        <Card>\r\n                            <div className={`${classes.__card_game_content_cards}`}>\r\n                                {cardsState?.collectedCards?.map((c, index) => (\r\n                                    isEmpty(c) ?\r\n                                        <GameCard key={index + ''}\r\n                                            isCompleted={false}\r\n                                            showCardPopu={false}\r\n                                            isSelected={false}\r\n                                            activeCard={null}\r\n                                            showCardPopup={false}\r\n                                            time={0}\r\n                                            showIncrementOrDecrementPower={false}\r\n                                            showPowerMatchPower={false}\r\n                                            showReplacePower={false}\r\n                                            onDecrease={() => { }}\r\n                                            onReplace={() => { }}\r\n                                            onPowerMatch={() => { }}\r\n                                            onIncrease={() => { }}\r\n                                        />\r\n                                        :\r\n                                        <GameCard\r\n                                            key={index + ''}\r\n                                            showCardPopup={!isReplaceAll && true}\r\n                                            isCompleted={false}\r\n                                            card={cardsState?.collectedCards?.[index]}\r\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\r\n                                            activeCard={cardsState?.activeCard}\r\n                                            time={time}\r\n                                            inventory={inventory}\r\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\r\n                                            showPowerMatchPower={false}\r\n                                            showReplacePower={replace > 0}\r\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\r\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\r\n                                            onPowerMatch={() => { }}\r\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\r\n                                        /> \r\n                                    ))}\r\n                            </div> \r\n                        </Card>\r\n\r\n                        {\r\n                            currentRound === 1 && currentCard === 0 && time > 0 &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\r\n                                </>\r\n                        }\r\n                        \r\n                        {\r\n                            completedChallengeText &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => completedChallengeText} success={!isCurrentFailed} danger={isCurrentFailed} />\r\n                                </>\r\n                        }\r\n\r\n                        {\r\n                            isGameCompleted &&\r\n                                <>\r\n                                    <br />\r\n                                    <Alert renderMsg={() => <p>You have won the game!</p>} success />\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Sidebar>\r\n                    <div className={classes.__sidebar_header}>\r\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\r\n                    </div>\r\n\r\n                    <div className={classes.__sidebar_button_wrapper}>\r\n                        <SidebarButton\r\n                            success={replace > 0 ? true : false}\r\n                            primary={replace <= 0 ? true : false}\r\n                            title=\"Power Card\"\r\n                            toolText={`${replace} left`}\r\n                            icon={<Replace style={{ height: 'auto' }} />}\r\n                        />\r\n\r\n                        \r\n                        <SidebarButton\r\n                            success={increaseOrDecrease > 0 ? true : false}\r\n                            primary={increaseOrDecrease <= 0 ? true : false}\r\n                            title=\"Power Up/Down\"\r\n                            toolText={`${increaseOrDecrease} left`}\r\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\r\n                        />\r\n                    </div>\r\n                </Sidebar>\r\n            </div>\r\n            <Footer isBlack/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(PowerRoyalsGame)","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\LandingPage\\index.js",["876","877","878"],"import { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport classes from './index.module.scss';\r\nimport Header from '../../components/Header/Header';\r\nimport Footer from '../../components/Footer/Footer';\r\nimport HomePageContentHeader from '../../components/HomePageContentHeader';\r\nimport PowerPickCard from '../../components/PowerpickCard';\r\nimport AmericanFootballTicket from '../../icons/AmericanFootballTicket';\r\nimport ShapeIcon from '../../icons/Shape';\r\nimport AmericanFootballCup from '../../icons/AmericanFootballCup';\r\nimport MegaPhone from '../../icons/MegaPhone';\r\nimport powerplayLargeicon from '../../assets/powerPlayIcon2.png'\r\nimport Modal from '../../components/Modal';\r\nimport { socket } from '../../config/server_connection';\r\nimport { validateEmail } from '../../utility/shared';\r\nimport { CONSTANTS } from '../../utility/constants';\r\nimport { isEmpty } from 'lodash';\r\nimport { landingPageLoading, landingPageDone } from '../../actions/landingPageActions';\r\nimport Alert from '../../components/Alert';\r\n\r\nlet _socket = null;\r\n\r\nconst LandingPage = props => {\r\n    const [email, setEmail] = useState();\r\n    const [showModal, setModalState] = useState(false)\r\n    const isMobileOrTablet = useMediaQuery({\r\n        query: '(max-width: 540px)'\r\n    })\r\n\r\n    const { loading, done, message } = useSelector((state) => state.landingPage);\r\n    const dispatch = useDispatch();\r\n\r\n    let scrollRef = useRef();\r\n    \r\n    useEffect(() => { \r\n        _socket = socket()\r\n        \r\n        return function cleanUp() {\r\n            _socket = null;\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        _socket?.on(CONSTANTS.SOCKET_EVENTS.LANDING_PAGE_EMAIL.EMIT, (email) => {\r\n            const { error = false, message = \"\", success = false } = email || {};\r\n            \r\n            return dispatch(landingPageDone(message));\r\n        });\r\n     }, [_socket])\r\n\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!validateEmail(email) || isEmpty(email)) {\r\n            //invalid email\r\n            console.log('invalid email')\r\n            return;\r\n        }\r\n\r\n        _socket?.emit(CONSTANTS.SOCKET_EVENTS.LANDING_PAGE_EMAIL.ON, {\r\n            email: email\r\n        })\r\n        dispatch(landingPageLoading());\r\n\r\n        // setModalState(false)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper} ref={scrollRef}>\r\n            <Header hasMenu={false} />\r\n            <HomePageContentHeader\r\n                buttonTitle=\"Notify me of launch!\"\r\n                footerTitle={<>Sign up to be notified and <span>receive 100 Power Tokens!</span></>}\r\n                onButtonClick={() => setModalState(true)}\r\n                showBtnBg\r\n\r\n            />\r\n\r\n            <div className={classes.landing_page_body}>\r\n                <h2 className={classes.landing_page_body_title}>\r\n                    Live-Play Promotional Contests\r\n                </h2>\r\n                <div className={classes.landing_page_content}>\r\n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\r\n                        <div className={classes.landing_page_cards}>\r\n                            <AmericanFootballTicket size={132} />\r\n                            <p>\r\n                                Our live-play sponsored contests are not only exciting, but also <span>free to play.</span>\r\n                            </p>\r\n                        </div>\r\n                    </PowerPickCard>\r\n                \r\n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\r\n                        <div className={classes.landing_page_cards}>\r\n                            <ShapeIcon />\r\n                            <p className={classes.p_60}>\r\n                                We have <span>a wide variety</span> of contests to choose from including sports based promotional contests.\r\n                        </p>\r\n                        </div>\r\n                    </PowerPickCard>\r\n                \r\n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\r\n                        <div className={classes.landing_page_cards}>\r\n                            <AmericanFootballCup />\r\n                            <p className={classes.p_40}>\r\n                                Enter for your chance to <span>win great prizes</span> from our sponsors.\r\n                        </p>\r\n                        </div>\r\n                    </PowerPickCard>\r\n                \r\n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\r\n                        <div className={classes.landing_page_cards}>\r\n                            <MegaPhone />\r\n                            <p>\r\n                                Register to <span>be notified</span> and be among the first to play when we launch!\r\n                        </p>\r\n                        </div>\r\n                    </PowerPickCard>\r\n                </div>\r\n\r\n                <Link to=\"#\" onClick={() => setModalState(true)} className={classes.landing_page_btn}>\r\n                            Notify me of launch!\r\n                    </Link>\r\n\r\n                <div className={classes.landing_page_footer}>\r\n                    <h2 className={classes.landing_page_footer_title}>Earn Power Tokens!</h2>\r\n                    <div className={classes.landing_page_footer_bottom}>\r\n                        <div className={classes.landing_page_footer_left}>\r\n                            <p>\r\n                                By entering our contests, you can earn and win Power Tokens!\r\n                            </p>\r\n                            <h2>\r\n                                What is the Power Token?\r\n                            </h2>\r\n                            <p className={classes.p1}>\r\n                                The Power token (PWRS) is a registered crypt-currency coin on the Ethereum Network.  <span>We will be holding some contests where you can win Powers. <br /> It’s like we are giving you super powers!</span>\r\n                            </p>    \r\n\r\n                            <h3>\r\n                                We are giving Power to the People! Sign-up today and  <span>get 100 tokens!</span>\r\n                            </h3>\r\n                        </div>\r\n                        {\r\n                            !isMobileOrTablet &&\r\n                                <img src={powerplayLargeicon} alt=\"power-games\" width=\"397\" height=\"397\" className={classes.landing_page_footer_right} />\r\n\r\n                        }\r\n                    </div>\r\n\r\n                    <Link to=\"#\" onClick={() => setModalState(true)} className={classes.landing_page_btn}>\r\n                        Notify me of launch!\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <Footer isBlack logoOnly={true} />\r\n            <Modal visible={showModal}>\r\n                <div className={classes.modal_body}>\r\n                    <form className={classes.news_alert_form} onSubmit={onFormSubmit}>\r\n                        <label>\r\n                            I want in! Notify me!\r\n                        </label>\r\n                        <div className={classes.news_alert_form_input}>\r\n                            <input type=\"email\" placeholder=\"Your e-mail\" onChange={(e) => {\r\n                                setEmail(e?.target?.value)\r\n                            }} required />\r\n                            <button type=\"submit\" disabled={loading}>\r\n                                {\r\n                                    loading ?\r\n                                        'Loading...'\r\n                                        :\r\n                                        'NOTIFY ME'\r\n                                }\r\n                            </button>\r\n                            {\r\n                                done &&\r\n                                <Alert renderMsg={() => <p style={{padding: 0, margin: 0}}>{ message }</p>} />\r\n                            }\r\n                        </div>\r\n                    </form>\r\n\r\n                    {\r\n                        console.log(loading, ': loading')\r\n                    }\r\n\r\n                    <button className={classes.modal_close} onClick={() => setModalState(false)} />\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\TermsOfUse\\index.js",["879"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from '../../components/Header/Header'\r\nimport PageHeader from '../../components/PageHeader'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport \"./index.css\";\r\nimport * as Constants from \"../../global/constants.js\";\r\nclass TermsOfUse extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      content: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=1\")\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          result = result.records;\r\n          this.setState({\r\n            content: result[0].content\r\n          });\r\n        },\r\n        error => {\r\n          this.setState({\r\n            hasError: true,\r\n            error: error\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div className=\"container-fluid _faq_wrap\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h1>Terms Of Use</h1>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <div\r\n                  className=\"_faq_cont\"\r\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(TermsOfUse);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\AccountPage\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ProtectedRoute\\index.js",["880","881"],"import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { isEmpty } from 'lodash';\r\nimport {  getLocalStorage } from '../../utility/shared';\r\nimport { CONSTANTS } from '../../utility/constants';\r\n\r\nfunction ProtectedRoute({ component: Component, ...rest }) {\r\n    const { use: { token = '' } = {} } = useSelector((state) => state?.auth);\r\n    let isAuthenticated = getLocalStorage(CONSTANTS.LOCAL_STORAGE_KEYS.USER)\r\n    \r\n    return <Route {...rest} render={(props) => {\r\n        return (\r\n            isAuthenticated ?\r\n                <Component {...props} />\r\n                :\r\n                <Redirect to={{\r\n                    pathname: '/login',\r\n                    state: {from: props?.location}\r\n                }} />\r\n            )\r\n        }} />\r\n}\r\n\r\nexport default React.memo(ProtectedRoute)\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\LivePowerPlay.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\InteractiveContests.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\utility\\Scrollbar.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenterTable.js",["882","883","884","885","886","887"],"import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Line } from 'rc-progress';\r\n\r\nimport classes from './MyGameCenter.module.scss';\r\nimport Billards from '../../icons/Billards';\r\nimport CasinoChips from '../../icons/CasinoChips';\r\nimport Stadium from '../../icons/Stadium';\r\nimport PowerPlayIcon from '../../assets/powerplay-icon.png';\r\nimport './table.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport Info from '../../icons/Info';\r\nimport SuperBall from '../../icons/SuperBall';\r\nimport SuperBall2 from '../../icons/SuperBall2';\r\nimport Ball from '../../icons/Ball';\r\nimport ButtonDropdown from '../../components/ButtonDropdown2'\r\nimport MyGameCenterTableRow from './MyGameCenterTableRow';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nconst listItems = [\r\n    { title: 'In Progress', value: 'in_progress' },\r\n    { title: 'Up Coming', value: 'upcoming' },\r\n    { title: 'Completed Game', value: 'com_game' }\r\n]\r\n\r\nconst MyGameCenterTable = props => {\r\n    // const [isMobileDevice, setMobileDevice] = useState(false);\r\n    const [selectedMenu, setSelectedMenu] = useState(listItems[0].value)\r\n    // const responsiveHandler = maxWidth => setMobileDevice(maxWidth.matches);\r\n    const isMobileDevice = useMediaQuery({query: '(max-width: 1024px)'})\r\n    useEffect(() => {\r\n        // const maxWidth = window.matchMedia(\"(max-width: 1200px)\");\r\n        // responsiveHandler(maxWidth);\r\n        // maxWidth.addEventListener('change', responsiveHandler);\r\n        // return () => maxWidth.removeEventListener('change', responsiveHandler);\r\n    }, [])\r\n    return (\r\n        <div className='__table-wrapper __mb-6'>\r\n            <div className='__flex'>\r\n                <div className='__badges-wrapper __live-power-play-badges-wrapper __ml-a __text-in-one-line __mediam'>\r\n                    <Link to='/' className='__outline-badge __active __f1'><Stadium />Live sports</Link>\r\n                    <Link to='/' className='__outline-badge __f1'><Billards />Power Match</Link>\r\n                    <Link to='/' className='__outline-badge __f1'><CasinoChips />Parlay Games</Link>\r\n                    <Link to='/' className='__outline-badge __f1'>Show All</Link>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={`__h6 __mt-2 __mb-1 ${classes.__header}`}>\r\n                My Entries\r\n                 {\r\n                    !isMobileDevice\r\n                        ?\r\n                        <div className={classes.__header_r}>\r\n                            <Link>\r\n                                In Progress\r\n                            </Link>\r\n\r\n                            <Link className={classes.active}>\r\n                                Upcoming\r\n                            </Link>\r\n\r\n                            <Link>\r\n                                Completed Games\r\n                            </Link>\r\n                        </div>\r\n                        :\r\n                        <ButtonDropdown elements={listItems} selected={listItems[0]} onChange={(e) => {\r\n                            setSelectedMenu(e?.target?.value)\r\n                            }} isActive styles={{margin: '0 5px', border: 'none'}} />\r\n                 }\r\n            </div>\r\n            \r\n            <div className={classes.table}>\r\n                <div className={classes.table_main}>\r\n                    <div className={classes.table_header}>\r\n                        <div>Type</div>\r\n                        <div>Contest</div>\r\n                        <div>Entries (min)</div>\r\n                        <div>Total Prizes</div>\r\n                        <div className={classes.row_small}>Free Paid</div>\r\n                        <div className={classes.row_small}>Status</div>\r\n                        <div className={classes.row_small}>Action</div>\r\n                    </div>\r\n                    <div className={classes.table_body}>\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n\r\n                        <MyGameCenterTableRow\r\n                            type={{ typeTitle: 'MLB Chase The Ace', typeDateTime: 'Oct 24, 2020 | 8:00PM ET', Icon: isMobileDevice ? <SuperBall2 /> : <Ball /> }}\r\n                            contest='CTA $15k WTA '\r\n                            entries={{ entriesTitle: <p>58,589 <span>of 200,000</span></p>, entiresValue: 40 }}\r\n                            totalPrizes={{ totalPrize: 800, firstPlacePrize: 500 }}\r\n                            freePaid={1000}\r\n                            status={{ statusTitle: 'Starts in:', statusTime: '3:00:04' }}\r\n                            isMobile={isMobileDevice}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyGameCenterTable;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\InteractiveContests.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\utility\\shared.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Header\\Header.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Footer\\Footer.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Trophy.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Phone.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Search.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Document.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Trash.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PointsIcon.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PIcon.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ContestRules\\ContestRules.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Contest\\Contest.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\bingoActions.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\ui\\Select\\Select.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\ui\\CheckBox\\CheckBox.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\ui\\Input\\Input.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPlays\\PowerPlays.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\global\\constants.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGame\\BingoGame.js",["888"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport BingoGameBall from '..//BingoGameBall/BingoGameBall';\r\nimport './BingoGame.scss';\r\n\r\n/**\r\n * \r\n * @param {numbers} props,\r\n * numbers = [[], [], [], [], []] \r\n */\r\nconst BingoGame = props => {\r\n    const { targetNumbers = [], drawnNumbers = [] } = props || {};\r\n    return (\r\n        <div className='__bingo-game-1 __center'>\r\n            <div className='__game-wrapper'>\r\n                <div>B</div>\r\n                <div>I</div>\r\n                <div>N</div>\r\n                <div>G</div>\r\n                <div>O</div>\r\n                {\r\n                    targetNumbers && targetNumbers?.map((numbers, index) => {\r\n                        return numbers?.map((number, key) => {\r\n                            console.log(key, index);\r\n                            \r\n                            return (\r\n                                key === 2 && index === 2 ? <BingoGameBall key={key + \" - \" + index} active>Free</BingoGameBall> : <BingoGameBall key={key + \" - \" + index}>{number}</BingoGameBall>\r\n                            )\r\n                        })\r\n                    })\r\n                }\r\n                {/* <BingoGameBall>2</BingoGameBall>\r\n                <BingoGameBall>17</BingoGameBall>\r\n                <BingoGameBall>43</BingoGameBall>\r\n                <BingoGameBall>46</BingoGameBall>\r\n                <BingoGameBall>74</BingoGameBall>\r\n                <BingoGameBall>7</BingoGameBall>\r\n                <BingoGameBall>34</BingoGameBall>\r\n                <BingoGameBall>19</BingoGameBall>\r\n                <BingoGameBall>17</BingoGameBall>\r\n                <BingoGameBall>59</BingoGameBall>\r\n                <BingoGameBall>10</BingoGameBall>\r\n                <BingoGameBall>26</BingoGameBall>\r\n                <BingoGameBall active>Free</BingoGameBall>\r\n                <BingoGameBall>28</BingoGameBall>\r\n                <BingoGameBall>45</BingoGameBall>\r\n                <BingoGameBall>9</BingoGameBall>\r\n                <BingoGameBall>29</BingoGameBall>\r\n                <BingoGameBall>20</BingoGameBall>\r\n                <BingoGameBall>67</BingoGameBall>\r\n                <BingoGameBall>22</BingoGameBall>\r\n                <BingoGameBall>14</BingoGameBall>\r\n                <BingoGameBall>33</BingoGameBall>\r\n                <BingoGameBall>53</BingoGameBall>\r\n                <BingoGameBall>72</BingoGameBall>\r\n                <BingoGameBall>66</BingoGameBall> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nBingoGame.propTypes = {\r\n    targetNumbers: PropTypes.array,\r\n    drawnNumbers: PropTypes.object,\r\n}\r\n\r\nexport default React.memo(BingoGame);","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGame2\\BingoGame2.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ReverseTimer\\ReverseTimer.js",["889"],"import React, { useEffect, useState } from 'react';\r\nimport './ReverseTimer.scss';\r\n\r\nconst ReverseTimer = props => {\r\n    const { maxSec = 5, className } = props;\r\n    const [currentSec, setCurrentSec] = useState(maxSec);\r\n    useEffect(() => {\r\n        let initialTimer = maxSec;\r\n        const timer = setInterval(() => {\r\n            if (initialTimer <= 0) return clearInterval(timer);\r\n            setCurrentSec(--initialTimer);\r\n        }, 1000);\r\n        return () => clearInterval(currentSec);\r\n    }, [])\r\n    return (\r\n        <div className={`base-timer __relative ${className}`}>\r\n            <svg viewBox=\"0 0 100 100\" className='__primary-color'>\r\n                <g className=\"base-timer__circle\">\r\n                    <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n                    <path\r\n                        strokeDasharray={`${(maxSec - currentSec) / maxSec * 283} 283`}\r\n                        className=\"base-timer__path-remaining\"\r\n                        d=\"\r\n                        M 50, 50\r\n                        m -45, 0\r\n                        a 45,45 0 1,0 90,0\r\n                        a 45,45 0 1,0 -90,0\r\n                    \"\r\n                    ></path>\r\n                </g>\r\n            </svg>\r\n            <div className='__absolute __time-left __center'>\r\n                <span className='__h5 __bold'>{currentSec}</span>\r\n                <div className='__smaller'>Sec</div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ReverseTimer;","E:\\workspace\\John House\\PowerplayGames\\src\\config\\urls.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\config\\http.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\landingPageActions.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\utility\\constants.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\MegaPhone.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\config\\server_connection.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AmericanFootballCup.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Shape.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AmericanFootballTicket.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\HomePageContentHeader\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Card\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Button\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Progress\\index.js",["890"],"import React, { useEffect, useState, useRef } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport classes from './progressBar.module.scss';\r\n\r\nconst ProgressBar = props => {\r\n    const [offset, setOffset] = useState(0);\r\n    const circleRef = useRef(null);\r\n    const {\r\n        size = 0,\r\n        progress = 0,\r\n        maxProgress = 0,\r\n        strokeWidth = 0,\r\n        circleOneStroke = 0,\r\n        circleTwoStroke = 0,\r\n    } = props || {};\r\n\r\n    const center = size / 2;\r\n    const radius = size / 2 - strokeWidth / 2;\r\n    const circumference = 2 * Math.PI * radius;\r\n\r\n    useEffect(() => {\r\n        const progressOffset = ((maxProgress - progress) / maxProgress) * circumference;\r\n        setOffset(progressOffset);\r\n        circleRef.current.style = 'transition: stroke-dashoffset 850ms ease-in-out;';\r\n    }, [setOffset, circumference, progress, offset]);\r\n\r\n    return (\r\n        <>\r\n            <svg\r\n                className={classes.__svg}\r\n                width={size}\r\n                height={size}\r\n                style={{height: 'auto'}}\r\n            >\r\n                <circle\r\n                    className={classes.__svg_circle_bg}\r\n                    stroke={circleOneStroke}\r\n                    cx={center}\r\n                    cy={center}\r\n                    r={radius}\r\n                    strokeWidth={strokeWidth}\r\n                />\r\n                <defs>\r\n                    <linearGradient id=\"gradient\" x1={0} y1={0} x2={0} y2={maxProgress}>\r\n                        <stop offset={0} stopColor=\"#e3610a\" />\r\n                        <stop offset={maxProgress} stopColor={circleTwoStroke} />\r\n                    </linearGradient>\r\n                </defs>\r\n                <circle\r\n                    className={classes.__svg_circle}\r\n                    ref={circleRef}\r\n                    stroke=\"url(#gradient)\"\r\n                    cx={center}\r\n                    cy={center}\r\n                    r={radius}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={circumference}\r\n                    strokeDashoffset={offset}\r\n                    transform={`rotate(-90 ${center} ${center})`}\r\n                />\r\n                <text x={center} y={center} className={classes.__svg_circle_text}>\r\n                            {progress}\r\n                    </text>\r\n                    <text className={classes.__svg_circle_text_2} x={center} y={center + 20}>\r\n                            Sec\r\n                    </text>\r\n            </svg>\r\n        </>\r\n    )\r\n}\r\n\r\nProgressBar.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    progress: PropTypes.number.isRequired,\r\n    strokeWidth: PropTypes.number.isRequired,\r\n    circleOneStroke: PropTypes.string.isRequired,\r\n    circleTwoStroke: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ProgressBar;","E:\\workspace\\John House\\PowerplayGames\\src\\pages\\PowerCenter\\PowerPlayGridRow.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SuperBall.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Hockeys.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\PowerPlayGridRow.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Clock.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Crown.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Calender.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\LeftArrow.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\authActions.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Eye.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\BasketBall.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Ball.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\MyGameCenter\\MyGameCenterTableRow.js",["891","892"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nimport classes from './MyGameCenter.module.scss';\r\nimport PowerPlayIcon from '../../assets/powerplay-icon.png';\r\nimport Info from '../../icons/Info';\r\nimport { setNumberComma } from '../../utility/shared';\r\n\r\nconst MAX_FILL_BAR_VALUE = 60;\r\n\r\nfunction MyGameCenterTableRow(props) {\r\n    const [isActionActive, setActionState] = useState(false);\r\n    \r\n    const {\r\n        type: { Icon = <></>, typeTitle = '', typeDateTime = '' } = {}, contest = '', entries: { entriesTitle = '', entiresValue = 0 } = {},\r\n        totalPrizes: { totalPrize = 0, firstPlacePrize = 0 } = {}, freePaid = 0, status: { statusTitle = '', statusTime = '' } = {},\r\n        isMobile = false,\r\n    } = props || {};\r\n\r\n    const _entiresValue = () => {\r\n        let val = entiresValue || 0;\r\n\r\n        val = Math.round(val * 60 / 100);\r\n\r\n        return val;\r\n    }\r\n\r\n    const RenderRowPC = () => (\r\n        <div className={classes.table_row}>\r\n            <div>\r\n                <div className={classes.td_icon}>\r\n                    {Icon}\r\n                </div>\r\n                <div>\r\n                    <p>{ typeTitle }</p>\r\n                    <span>\r\n                        { typeDateTime } <Info />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div><strong>{ contest }</strong></div>\r\n            <div className={classes.row_column}>\r\n                {entriesTitle}\r\n                <div className={classes.progress}>\r\n                    <span>{entiresValue}% FULL</span>\r\n                    <div className={classes.progress_bar_bg}>\r\n                        <div className={classes.progress_bar} style={{width: `${_entiresValue()}px`}}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={classes.row_column}>\r\n                <p>${ setNumberComma(totalPrize) }</p>\r\n                <span>1st place: ${firstPlacePrize}</span>\r\n            </div>\r\n            <div className={classes.row_small}>\r\n                <img src={PowerPlayIcon} alt='' />\r\n                <p className={classes.m_l_4}>{ setNumberComma(freePaid) }</p>\r\n            </div>\r\n            <div className={`${classes.row_small} ${classes.row_column}`}>\r\n                <p>{ statusTitle }</p>\r\n                <span>{ statusTime }</span>\r\n            </div>\r\n            <div className={classes.row_small}>\r\n                <button className={isActionActive && classes.active} onClick={() => setActionState(!isActionActive)}><p>...</p></button>\r\n                {\r\n                    isActionActive &&\r\n                    <div className={classes.action} onMouseLeave={() => setActionState(false)}>\r\n                        <Link to=\"#\">Make picks</Link>\r\n                        <Link to=\"#\">Live-Play</Link>\r\n                        <Link to=\"#\">Exit Game</Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const RenderRowMobile = () => (\r\n        <div className={classes.table_row}>\r\n            <div className={classes.table_mobile_cl}>\r\n                <div className={classes.table_mobile_cl_l}>\r\n                    <div className={classes.td_icon}>\r\n                        {Icon}\r\n                    </div>\r\n\r\n                    <div className={classes.table_mobile_cl_l_1}>\r\n                        <p>{ typeTitle }</p>\r\n                        <strong>{ contest }</strong>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={classes.table_mobile_cl_r}>\r\n                    <p>{ statusTitle }</p>\r\n                    <p className={classes.p_16}>{ statusTime }</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.div_span}>\r\n                <span>\r\n                    { typeDateTime } <Info size={11} />\r\n                </span>\r\n            </div>\r\n            \r\n            <div className={`${classes.table_mobile_cl} ${classes.margin_top_10}`}>\r\n                <div className={classes.table_mobile_cl_l_1}>\r\n                    {entriesTitle}\r\n                    <div className={classes.progress}>\r\n                        <span className={classes.table_mobile_cl_p_small}>{entiresValue}% FULL</span>\r\n                        <div className={classes.progress_bar_bg}>\r\n                            <div className={classes.progress_bar} style={{width: `${_entiresValue()}px`}}></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.table_mobile_cl_r}>\r\n                    <p className={classes.table_mobile_cl_p_small}>Total Prizes:</p>\r\n                    <p className={classes.p_16}>${ setNumberComma(totalPrize) }</p>\r\n                    <p className={classes.table_mobile_cl_p_small}>1st place: ${firstPlacePrize}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.table_mobile_cl}>\r\n                <div className={classes.table_mobile_cl_l_1}>\r\n                    <p className={classes.table_mobile_cl_p_small}>FREE PAID</p>\r\n                    <div className={classes.table_mobile_cl_l_2}>\r\n                        <img src={PowerPlayIcon} alt='' />\r\n                        <p className={classes.m_l_4}>{ setNumberComma(freePaid) }</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={classes.table_mobile_cl_r}>\r\n                    <button className={`${classes.button}`} onClick={() => setActionState(!isActionActive)}>\r\n                        <p>Select Action</p>\r\n                        <i className={`${classes.arrow} ${classes.down}`}></i>\r\n                    </button>\r\n                    {\r\n                        isActionActive &&\r\n                        <div className={classes.action} onMouseLeave={() => setActionState(false)}>\r\n                            <Link to=\"#\">Make picks</Link>\r\n                            <Link to=\"#\">Live-Play</Link>\r\n                            <Link to=\"#\">Exit Game</Link>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        !isMobile ? <RenderRowPC /> : <RenderRowMobile />\r\n    )\r\n}\r\n\r\nMyGameCenterTableRow.propTypes = {\r\n    type: PropTypes.object,\r\n    contest: PropTypes.string,\r\n    entries: PropTypes.object,\r\n    totalPrizes: PropTypes.object,\r\n    freePaid: PropTypes.number,\r\n    status: PropTypes.object,\r\n    isMobile: PropTypes.bool,\r\n}\r\n\r\nexport default MyGameCenterTableRow\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SuperBall2.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Info.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Stadium.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CasinoChips.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Alert\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Billards.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Elite8\\SelectNumbers.js",["893","894"],"import React from \"react\";\r\nimport \"./index.css\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Component } from \"react\";\r\nimport groupImage from \"../../assets/elite8/group-34.png\";\r\n\r\nclass SelectNumbers extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //state valiable 'selected'\r\n    this.state = { selected: [] };\r\n    this.myRef = React.createRef();\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <div id = \"btn-pick-div\" className=\"PickNumbers-wrapper\">\r\n          <div className=\"PickNumbers-left\">\r\n            <div className=\"PickNumbers-header\"> Pick Your Numbers </div>\r\n            <div className=\"PickNumbers-header-sub\">\r\n              Select 8 numbers in total by clicking the the lottery balls below.\r\n            </div>\r\n            <div className=\"all-PickNumbers-box\">{this.initBalls()}</div>\r\n          </div>\r\n          <div className=\"PickNumbers-right\">\r\n            <div className=\"PickNumbers-right-heading\">\r\n              You can use <span className=\"orange-text\"> Powerplays </span> to\r\n              edit your selections during the live draw!\r\n            </div>\r\n            <div className=\"PickNumbers-right-img\">\r\n              <img src={groupImage} />\r\n            </div>\r\n            <div className=\"PickNumbers-right-balls\">\r\n              <div className=\"PickNumbers-right-balls-div\">\r\n                {this.initSelectedBalls()}\r\n              </div>\r\n            </div>\r\n            {this.SubmitMyPicksBtn()}\r\n          </div>\r\n        </div>\r\n        <div className=\"elite8-about\">\r\n          <div className=\"elite8-about-wrapper\">\r\n            <div className=\"elite8-about-heading\">Elite8</div>\r\n            <div className=\"elite8-about-subheading\">\r\n              Our platform is designed for all PC and mobile devices, bringing\r\n              you access at any time, in any place, without boundaries.\r\n            </div>\r\n            <div className=\"elite8-about-table\">\r\n              <div className=\"elite8-about-solo\">\r\n                <div className=\"elite8-about-table-heading col1\">\r\n                  Live Draw Starts At\r\n                </div>\r\n                <div className=\"elite8-about-table-text\">\r\n                  9:00 pm EST on Feb 27th, 2020\r\n                </div>\r\n              </div>\r\n              <div className=\"elite8-about-solo\">\r\n                <div className=\"elite8-about-table-heading col2\">\r\n                  Deadline for choosing or modifying your picks\r\n                </div>\r\n                <div className=\"elite8-about-table-text\">\r\n                  One hour before the draw (8:00PM ET)\r\n                </div>\r\n              </div>\r\n              <div className=\"elite8-about-solo\">\r\n                <div className=\"elite8-about-table-heading col3\">\r\n                  Contest closes at\r\n                </div>\r\n                <div className=\"elite8-about-table-text\">\r\n                  8:00pm ET on April 26, 2020.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"elite8-about-orange-bar\"> </div>\r\n            <div className=\"elite8-about-list-wrapper\">\r\n              <div className=\"elite8-about-list\">\r\n                <div className=\"list-col1\">\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    Thirty (30) prizes available to be won.\r\n                  </div>\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    One entry per person.\r\n                  </div>\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    Open to residents of Canada (excluding Quebec) &amp; United\r\n                    States who are over the age of majority.\r\n                  </div>\r\n                </div>\r\n                <div className=\"list-col2\">\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    Skill-testing question must be correctly answered to win.\r\n                  </div>\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    Odds of winning depend on participants use of Powerplays.{\" \"}\r\n                  </div>\r\n                  <div className=\"elite8-about-list-item\">\r\n                    <div className=\"elite8-about-list-oval\" />\r\n                    No purchase necessary.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <ContestRules />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  onBallClicked(number) {\r\n    // check if selected array has the number\r\n    if (this.state.selected.includes(number)) {\r\n      // if yes, remove the number from array\r\n      this.removeFromSelectedNumbers(number);\r\n    } else {\r\n      if (this.state.selected.length > 7)\r\n        return alert(\"Only 8 selections allowed\");\r\n      // if no, add the number in array\r\n      this.addToSelectedNumbers(number);\r\n    }\r\n  }\r\n\r\n  initBalls() {\r\n    var mArray = [];\r\n    // function for loop of Balls\r\n    for (let i = 1; i <= 48; i++) {\r\n      mArray.push(\r\n        <div\r\n          className=\"elite8-ball-wrapper\"\r\n          onClick={() => this.onBallClicked(i)}\r\n        >\r\n          <Ball number={i} isSelected={this.state.selected.includes(i)} />\r\n        </div>\r\n      );\r\n    }\r\n    return mArray;\r\n  }\r\n\r\n  initSelectedBalls() {\r\n    var mArray = [];\r\n    // function for loop of Balls isSelected={selected.includes(i)}\r\n    for (let i = 0; i < this.state.selected.length; i++) {\r\n      mArray.push(\r\n        <div className=\"space-div\">\r\n          <Ball number={this.state.selected[i]} isSelected={true} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return mArray;\r\n  }\r\n\r\n  addToSelectedNumbers(number) {\r\n    // tempArray.push(number);\r\n    //setSelected(selected.concat(number));\r\n    var oldArray = [...this.state.selected];\r\n    oldArray.push(number);\r\n    this.setState({ selected: oldArray });\r\n  }\r\n\r\n  removeFromSelectedNumbers(number) {\r\n    var oldArray = [...this.state.selected];\r\n    const index = oldArray.indexOf(number);\r\n    if (index > -1) {\r\n      oldArray.splice(index, 1);\r\n    }\r\n\r\n    this.setState({ selected: oldArray });\r\n  }\r\n\r\n  SubmitMyPicksBtn(props) {\r\n    return (\r\n      <button\r\n        className=\"c-pick-your-numbers-btn submit\"\r\n        onClick={(e) => {\r\n          let path = \"/elite8-draw\";\r\n          this.props.history.push({\r\n            pathname: path,\r\n            state: {\r\n              picks: this.state.selected,\r\n            },\r\n          });\r\n        }}\r\n      >\r\n        Submit My Picks\r\n      </button>\r\n    );\r\n  }\r\n} //react class ends\r\n\r\nfunction Ball(props) {\r\n  return (\r\n    <div className={\"elite8-ball \" + (props.isSelected ? \"selected\" : \"\")}>\r\n      {props.number}\r\n    </div>\r\n  );\r\n  //  else return <div className=\"elite8-ball\">{props.number}</div>;\r\n}\r\n\r\nfunction ContestRules(props) {\r\n  return <button className=\"contest-rules-btn\"> Contest Rules </button>;\r\n}\r\n\r\n//export default SelectNumbers;\r\nexport default withRouter(SelectNumbers);\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\ResultsInfoComponent\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\AccountInfoComponent\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\BalanceInfoComponent\\index.js",["895","896"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport classes from './index.module.scss';\r\nimport Button from '../Button';\r\nimport Ticket from '../../icons/Ticket';\r\nimport Token from '../../assets/token.png';\r\nimport Money from '../../icons/Money';\r\nimport ListItem from './ListItem';\r\nimport Modal from '../Modal';\r\nimport Input from '../Input';\r\nimport Checkbox from '../Checkbox';\r\nimport Select from '../Select';\r\nimport { getDays, getMonthDays, getYearsList } from '../../utility/shared';\r\nimport { CONSTANTS } from '../../utility/constants';\r\n\r\nconst ListTitle = (Icon, isSvg, title) => (\r\n    <span className={classes.list_left_side_1}>\r\n        {\r\n            Icon && isSvg ?\r\n                <Icon />\r\n                :\r\n                Icon && !isSvg &&\r\n                <img src={Icon} width={34} height={34} />\r\n        }\r\n        <span>{ title }</span>\r\n    </span>\r\n)\r\n\r\nconst ListHeader = (title, balance, btnTitle, onClick, Icon, isSvg) => {\r\n    return (\r\n        <div className={classes.list_container}>\r\n            <div className={classes.list_left_side}>\r\n                {ListTitle(Icon, isSvg, title)}\r\n                <span className={classes.span}>\r\n                    ${balance}\r\n                </span>\r\n            </div>\r\n\r\n            <div className={classes.list_right_side}>\r\n                <Button title={btnTitle} onClick={onClick} />\r\n                <span>Min. Amount: $100</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction BalanceInfoComponent(props) {\r\n    const [form, setForm] = useState({});\r\n    const [showModal, setModalState] = useState(false);\r\n    const [activeForm, setActiveForm] = useState(0);\r\n    \r\n    const { isMobile = false } = props || {};\r\n\r\n    const changeInputHandler = (e) => {\r\n        const { target: { value = '', name = '' } = {} } = e || {};\r\n        \r\n        setForm({ ...form, [name]: value })\r\n    }\r\n\r\n    const handleCheckBox = (e) => {\r\n        const { target: { checked = false, name = '' } = {} } = e || {};\r\n        \r\n        setForm({ ...form, [name]: checked })\r\n    }\r\n\r\n    const handleCountryRegion = (e) => {\r\n        const { name = '', value } = e || {}\r\n        setForm({ ...form, [name]: value });\r\n    }\r\n\r\n    const changeModalState = () => {\r\n        setModalState(!showModal)\r\n    }\r\n\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (isMobile && activeForm !== 2) {\r\n            let _active = activeForm;\r\n            setActiveForm(_active + 1);\r\n            return;\r\n        }\r\n\r\n        console.log('withdraw')\r\n    }\r\n\r\n    const handleBack = () => {\r\n        if (activeForm > 0) {\r\n            let _active = activeForm;\r\n            setActiveForm(_active - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.list_header_wrapper}>\r\n                {ListHeader('My Cash Balance', '1,750', 'Withdraw', changeModalState, Money, true)}\r\n                {ListHeader('My Token Balance', '1,750', 'Transfer to Wallet', () => { }, Token, false)}\r\n            </div>\r\n            <div className={classes.list_body}>\r\n                {ListTitle(Ticket, true, 'My non-cash prizes')}                \r\n                <ListItem title='3 nights stay at Fairmont Banff Springs' />\r\n                <ListItem title='10 free meals at Macdonald’s' claimed={false} />\r\n                <ListItem title=\"3 nights stay at Fairmont Banff Springs\" />\r\n            </div>\r\n\r\n            <Modal visible={showModal}>\r\n                <div className={classes.modal_container}>\r\n                    <div className={classes.modal_header}>\r\n                        <p>Withdraw Cash</p>\r\n                        <i className={classes.modal_close_icon} onClick={changeModalState}></i>\r\n                    </div>\r\n\r\n                    <div className={classes.modal_body}>\r\n                        <form onSubmit={handleFormSubmit}>\r\n                            <div className={`${isMobile && activeForm === 0 ? '' : classes.hidden}`}>\r\n                                <p className={`${classes.body_header} ${classes.margin_t_10}`}>Withdrawal Info</p>\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <div className={classes.form_amountInput}>\r\n                                        <label>Withdrawal amount <span>(min $100)</span></label>\r\n                                        <Input type=\"number\" value={form?.amount} name=\"amount\" onChange={changeInputHandler} icon=\"$\" white bordered required />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.form_Input_50} ${classes.margin_l_40}`}>\r\n                                        <label>Send funds to</label>\r\n                                        <Input type=\"email\" placeholder=\"Enter your paypal email here\" value={form?.funds} name=\"funds\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className={`${isMobile && activeForm === 1 ? '' : classes.hidden}`}>\r\n                                <p className={`${classes.body_header} ${classes.margin_t_10}`}>Billing Info</p>\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <div className={classes.form_Input_50}>\r\n                                        <label>Address line 1</label>\r\n                                        <Input type=\"text\" placeholder=\"Enter address here\" value={form?.addr1} name=\"addr1\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.form_Input_50} ${classes.margin_l_40}`}>\r\n                                        <label>Address line 2</label>\r\n                                        <Input type=\"text\" placeholder=\"Enter address here\" value={form?.addr2} name=\"addr2\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <div>\r\n                                        <label>Country</label>\r\n                                        <CountryDropdown classes={`${classes.form_dropdown_main} ${classes.form_dropdown}`} value={form?.country} onChange={(val) => handleCountryRegion({name: 'country', value: val})} required name=\"country\" valueType=\"short\" />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.margin_l_40}`}>\r\n                                        <label>Provinence</label>\r\n                                        <RegionDropdown classes={`${classes.form_dropdown_main} ${classes.form_dropdown}`} country={form?.country} value={form?.region} onChange={(val) => handleCountryRegion({name: 'region', value: val})} required name=\"region\" />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.margin_l_40}`}>\r\n                                        <label>Postal Code</label>\r\n                                        <Input type=\"number\" placeholder=\"Postal Code\" value={form?.postCode} name=\"postCode\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className={isMobile && activeForm === 2 ? '' : classes.hidden}>\r\n                                <p className={`${classes.body_header} ${classes.margin_t_10} ${classes.body_header_primary}`}>Personal Info</p>\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <div className={classes.form_Input_50}>\r\n                                        <label>First Name</label>\r\n                                        <Input type=\"text\" placeholder=\"First Name\" value={form?.fname} name=\"fname\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.form_Input_50} ${classes.margin_l_40}`}>\r\n                                        <label>Last Name</label>\r\n                                        <Input type=\"text\" placeholder=\"Last Name\" value={form?.lname} name=\"lname\" onChange={changeInputHandler} rounded white block bordered required />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <div className={classes.form_Input_50}>\r\n                                        <Select data={getDays()} value={form?.day} name=\"day\" onChange={changeInputHandler} label=\"Day\" white required />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.form_Input_50} ${classes.margin_l_40}`}>\r\n                                        <Select data={getMonthDays()} value={form?.month} name=\"month\" onChange={changeInputHandler} label=\"Month\" white required />\r\n                                    </div>\r\n\r\n                                    <div className={`${classes.form_Input_50} ${classes.margin_l_40}`}>\r\n                                    <Select data={getYearsList()} value={form?.year} name=\"year\" onChange={changeInputHandler} label=\"Year\" white required />\r\n                                    </div>\r\n                                </div>\r\n                                <div className={`${classes.form_control} ${classes.margin_t_10}`}>\r\n                                    <Checkbox checked={form?.termsAndConditions} onChange={handleCheckBox} name='termsAndConditions' label={<>I agree to PowerPlay Systems <Link to=\"#\">Terms and Conditions</Link></>} required />\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className={`${classes.form_control} ${classes.margin_t_10} ${classes.form_control_center}`}>\r\n                                {\r\n                                    isMobile && activeForm !== 0 &&\r\n                                    <Button title=\"Back\" block onClick={handleBack} bordered />\r\n                                }\r\n                                <div className={classes.button}>\r\n                                    <Button title={isMobile && activeForm !== 2 ? 'Next' : \"Withdraw Cash\"} block type={CONSTANTS.BUTTON_TYPE.SUBMIT} onClick={handleFormSubmit} />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nBalanceInfoComponent.propTypes = {\r\n    isMobile: PropTypes.bool,\r\n}\r\n\r\nexport default BalanceInfoComponent\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\PageHeader\\index.js",["897","898"],"import React from 'react';\r\nimport ProptTypes from 'prop-types';\r\n\r\nimport classes from './pageHeader.module.scss';\r\nimport PageHeaderCard from '../PageHeaderCard'\r\n\r\nfunction PageHeader(props) {\r\n    const { title = '', reward = 0, seconds = 12 } = props || {}\r\n    return (\r\n        <div className={classes.__page_header}>\r\n            <div className={classes.__page_header_leftside}>\r\n                <h1>{title}</h1>\r\n                <div className={classes.__page_header_leftside_sub}>    \r\n                    <p>\r\n                        Win <span>${reward}</span> <small>CAD</small>\r\n                    </p>\r\n                    {\r\n                        title == \"Chase The Ace\"\r\n                        ?\r\n                        <button className={classes.__page_header_btn_new}>See Contest Rules</button>\r\n                        :\r\n                        <button className={`__btn ${classes.__page_header_btn}`}>See Contest Rules</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={classes.__page_header_rightside}>\r\n                <PageHeaderCard title=\"Chase The Ace\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nPageHeader.propTypes = {\r\n    title: ProptTypes.string.isRequired,\r\n    reward: ProptTypes.number.isRequired,\r\n    seconds: ProptTypes.number,\r\n}\r\n\r\nPageHeader.defaultProps = {\r\n    title: 'Page title',\r\n    reward: 2000\r\n}\r\n\r\nexport default PageHeader\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Modal\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerpickCard\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\powerPokerActions.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\PlusAndMinus.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Replace.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Reload.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\config\\environment.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\powerRoyalsActions.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\BingoGameBall\\BingoGameBall.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\actions\\cardGameAction.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ButtonDropdown2\\index.js",["899","900"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classes from './index.module.scss'\r\n\r\nfunction ButtonDropdown(props) {\r\n    const [isVisible, setVisibleState] = useState(false)\r\n    const [_selected, setSelected] = useState({})\r\n    const { elements = [], selected = {}, onChange = () => { }, isActive = false, styles = {} } = props || {}\r\n\r\n    useEffect(() => {\r\n        if(!selected && elements.length)\r\n            onSelectListItem(elements[0])\r\n        else \r\n            onSelectListItem(selected)\r\n    }, [selected])\r\n\r\n    const toggleList = () => {\r\n        setVisibleState(!isVisible)\r\n    }\r\n\r\n    const onSelectListItem = (item) => {\r\n        setSelected(item)\r\n        setVisibleState(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.wrapper} style={styles}>\r\n            <div>\r\n                <button onClick={toggleList} className={classes.active}>\r\n                    {_selected?.title}\r\n                </button>\r\n                <i className={`${classes.arrow} ${classes.down}`}></i>\r\n            </div>\r\n\r\n        {\r\n            isVisible &&\r\n                <div className={classes.select_body}>\r\n                    {\r\n                        elements.length && elements.map((itm, index) => <button\r\n                            key={itm.title + index.toString()}\r\n                            onClick={() => {\r\n                                onSelectListItem(itm)\r\n                                onChange(itm)\r\n                            }}>\r\n                            {itm.title}</button>)\r\n                    }\r\n                </div>\r\n\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nButtonDropdown.propTypes = {\r\n    elements: PropTypes.array,\r\n    selected: PropTypes.object,\r\n    isActive: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    styles: PropTypes.object\r\n}\r\n\r\nexport default ButtonDropdown\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\AngleIcon.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\bingoReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\powerRoyalsGameReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\powerPokerReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\landingPageReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\cardGameReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\reducers\\authReducer\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Sidebar\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\SidebarButton\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\GameCard\\index.js",["901","902","903","904","905","906","907","908","909"],"import React, {useEffect, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport Replace from '../../icons/Replace'\r\nimport Plus from '../../icons/Plus'\r\nimport Minus from '../../icons/Minus'\r\nimport boltIcon from '../../assets/bolt.png'\r\nimport Tick from '../../icons/Tick'\r\nimport Cards from '../../icons/Cards/index'\r\nimport classes from \"./gameCard.module.scss\"\r\nimport ProgressBar from '../../components/Progress';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction GameCard(props) {\r\n\r\n    const [showPopup, setPopupState] = useState(false)\r\n    const [hasReplaced, setHasReplacedState] = useState(false)\r\n\r\n    const {\r\n        isSelected = false,\r\n        showCardPopup = false,\r\n        isCompleted = false,\r\n        image = '',\r\n        text = '',\r\n        styles = {},\r\n        card = {},\r\n        inventory: { replace = 0, powerMatch = 0, increaseOrDecrease = 0 } = {},\r\n        activeCard = {},\r\n        time = 0,\r\n        width = 0,\r\n        height = 0,\r\n        hoverShadow = false,\r\n        currentCard = 0,\r\n        cardIndex = 0,\r\n        start = false,\r\n        onStart = () => {},\r\n        showPowerMatchPower = false,\r\n        showReplacePower = false,\r\n        showIncrementOrDecrementPower = false,\r\n        onClick = () => { },\r\n        onIncrease = () => { },\r\n        onDecrease = () => { },\r\n        onPowerMatch = () => { },\r\n        onReplace = () => { },\r\n        myPowers = false,\r\n        showTimer = false,\r\n        gotAceWithPower = false\r\n    } = props || {}\r\n\r\n    useEffect(() => {\r\n        if (time <= 0) {\r\n            setHasReplacedState(false)\r\n            setPopupState(false)\r\n        } else if (!isCompleted && myPowers) {\r\n            setPopupState(true);\r\n        }\r\n    }, [time])\r\n\r\n    const toolTip = (id, tip) => {\r\n        return (\r\n            <ReactTooltip id={id} place=\"top\" textColor=\"#fff\" effect=\"solid\">\r\n                {tip}\r\n            </ReactTooltip>\r\n        );\r\n    }\r\n\r\n    const _onReplace = () => { \r\n        setHasReplacedState(true)\r\n    }\r\n\r\n    // Start Button\r\n    const renderStartButton = () => {\r\n        return (\r\n            <>\r\n                <p className={classes.__card_game_Next_card_drawn_in} style={{ width: 76}}>Click Start to Begin</p>\r\n                <div className={classes.__start_button_outer}>\r\n                    <div className={classes.__start_button} onClick={() => onStart()}>\r\n                        <p className={classes.__start_button_text}>Start</p>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={`${classes.__game_card_wrapper} ${hoverShadow && classes.shadow}`} style={styles} {...props}>\r\n            {\r\n                //if rank === 12 => \"A\"\r\n                isCompleted &&\r\n                <Tick style={{\r\n                    height: \"auto\",\r\n                    position: \"absolute\",\r\n                    alignSelf: \"center\",\r\n                    transform: `translate(25%, -25%)`\r\n                }}/>\r\n            }\r\n            {\r\n                isSelected\r\n                    ?\r\n                    <div className={classes.__game_card_selected} onClick={() => {\r\n                        if (showCardPopup && myPowers) {\r\n                            setPopupState(!showPopup)\r\n                        }\r\n                        onClick()\r\n                    }} onBlur={() => {\r\n                        setPopupState(false)\r\n                        }}>\r\n                        {\r\n                            image ?\r\n                                <div className={classes.__game_card_selected}>\r\n                                    <img src={image} style={{width: '100%', height: '100%'}}/>\r\n                                </div>\r\n                                :\r\n                                <Cards card={card} width={width || 130} height={height || 195} />\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <div className={classes.__game_card_container}>    \r\n                        {\r\n                            showTimer\r\n                            ?\r\n                                start\r\n                                ?\r\n                                    cardIndex !== currentCard\r\n                                    ?\r\n                                        <div className={classes.__question_mark}>\r\n                                            <span>?</span>                                \r\n                                        </div>\r\n                                    :\r\n                                    <>\r\n                                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\r\n                                        <ProgressBar\r\n                                            progress={time}\r\n                                            maxProgress={5}\r\n                                            size={62}\r\n                                            strokeWidth={4}\r\n                                            circleOneStroke='grey'\r\n                                            circleTwoStroke='#fff'\r\n                                        />\r\n                                    </>\r\n                                :\r\n                                cardIndex == 0\r\n                                ?\r\n                                renderStartButton()\r\n                                :\r\n                                <div className={classes.__question_mark}>\r\n                                    <span>?</span>                                \r\n                                </div>\r\n                            :\r\n                            <div className={classes.__question_mark}>\r\n                                <span>?</span>                                \r\n                            </div>\r\n                        }\r\n                    </div>\r\n            }\r\n            {\r\n                showPopup && activeCard === card && time > 0 && !gotAceWithPower &&\r\n                <div className={classes.__game_card_popup_container}>\r\n                    <div className={classes.__game_card_popup}>\r\n                        {\r\n                            isCompleted ?\r\n                                <span>No action required</span>\r\n                                :\r\n                                <>\r\n                                    {\r\n                                        showReplacePower || showPowerMatchPower || showIncrementOrDecrementPower\r\n                                            ?\r\n                                            <>\r\n                                                {toolTip(\"newCard\", \"New Card\")}\r\n                                                {\r\n                                                    showReplacePower && !hasReplaced &&\r\n                                                    <button className={classes.__btn__} onClick={() => {\r\n                                                        onReplace()\r\n                                                        _onReplace()\r\n                                                    }}\r\n                                                    data-tip data-for=\"newCard\">\r\n                                                        <Replace style={{height: 'auto'}} size={39}/>\r\n                                                    </button>\r\n                                                }    \r\n                                                    {toolTip(\"powerMatch\", \"Power Match\")}\r\n                                                {\r\n                                                    showPowerMatchPower &&\r\n                                                    <button className={classes.__btn__} onClick={onPowerMatch} data-tip data-for=\"powerMatch\">\r\n                                                        <img src={boltIcon} width={40} height={40}/>\r\n                                                    </button>\r\n                                                }\r\n\r\n                                                {\r\n                                                    showIncrementOrDecrementPower &&\r\n                                                    <>\r\n                                                        {toolTip(\"powerUp\", \"Power Up\")}\r\n                                                        <button className={classes.__btn__} data-tip data-for=\"powerUp\">\r\n                                                            <Plus style={{height: 'auto'}} size={39} onClick={onIncrease}/>\r\n                                                        </button>\r\n\r\n                                                        {toolTip(\"powerDown\", \"Power Down\")}\r\n                                                        <button className={classes.__btn__} data-tip data-for=\"powerDown\">\r\n                                                            <Minus style={{height: 'auto'}} size={39} onClick={onDecrease}/>\r\n                                                        </button>                                                        \r\n                                                    </>\r\n                                                }\r\n                                                \r\n                                            </>\r\n                                            :\r\n                                            <span>All your Powers have been used</span>\r\n                                    }\r\n                                </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nGameCard.propTypes = {\r\n    isSelected: PropTypes.bool,\r\n    showCardPopup: PropTypes.bool,\r\n    isCompleted: PropTypes.bool,\r\n    image: PropTypes.string,\r\n    text: PropTypes.string,\r\n    styles: PropTypes.object,\r\n    onClick: PropTypes.func,\r\n    card: PropTypes.object,\r\n    inventory: PropTypes.object,\r\n    activeCard: PropTypes.object,\r\n    showPowerMatchPower: PropTypes.bool,\r\n    showReplacePower: PropTypes.bool,\r\n    showIncrementOrDecrementPower: PropTypes.bool,\r\n    time: PropTypes.number,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number,\r\n    hoverShadow: PropTypes.bool,\r\n    onIncrease: PropTypes.func,\r\n    onDecrease: PropTypes.func,\r\n    onPowerMatch: PropTypes.func,\r\n    onReplace: PropTypes.func\r\n}\r\n\r\nexport default GameCard\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\BalanceInfoComponent\\ListItem.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Money.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Ticket.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Input\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CheckIcon.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Munch.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\LottoBall\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\PageHeaderCard\\index.js",["910","911"],"import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classes from \"./pageHeaderCard.module.scss\"\r\nimport Card from '../Card'\r\nimport Time from '../../icons/Time'\r\nimport 'react-responsive-modal/styles.css';\r\nimport { Modal } from 'react-responsive-modal';\r\nimport boltIcon from '../../assets/bolt.png';\r\nimport ReplaceIcon from '../../icons/Replace';\r\nimport PlusMinusIcon from '../../icons/PlusAndMinus';\r\n\r\nfunction PageHeaderCard(props) {\r\n    const { title = '' } = props || {}\r\n    const [ howDoIWinModal, setHowDoIWinModal ] = useState(false);\r\n\r\n    const onOpenModal = () => setHowDoIWinModal(true);\r\n    const onCloseModal = () => setHowDoIWinModal(false);\r\n\r\n    const renderHowDoIWinModal = () => {\r\n        return (\r\n            <div>\r\n              <Modal \r\n                open={howDoIWinModal} \r\n                onClose={onCloseModal} \r\n                center \r\n                focusTrapped={false} \r\n                styles={{modal: {borderRadius: 12}}}>\r\n                <h1 className={classes.__how_do_i_win_modal_title}>Chase The Ace</h1>\r\n                \r\n                <h3 className={classes.__how_do_i_win_modal_heading}>How Do I Win?</h3>\r\n                <p className={classes.__how_do_i_win_modal_text}>\r\n                    In this exciting multi-round contest, you must achieve five Aces in one hand in order to move on to the Chase the Ace round. Find the Ace of Spades in the Chase the Ace round and you win!\r\n                </p>\r\n                \r\n                <h3 className={classes.__how_do_i_win_modal_heading}>How can I get five Aces?</h3>\r\n                <p className={classes.__how_do_i_win_modal_text}>\r\n                    The game is played with two full decks so it is possible to be dealt five Aces. We decided to make it more interesting by providing Powers to help you win! You will be dealt three hands per game.\r\n                </p>\r\n                \r\n                <h3 className={classes.__how_do_i_win_modal_heading}>How do I use Powers?</h3>\r\n                <p className={classes.__how_do_i_win_modal_text}>\r\n                    If you get a card other than and Ace, you can use your Powers by clicking on the active card before the timer runs out. This will activate Powers for that card.\r\n                </p>\r\n                \r\n                <h3 className={classes.__how_do_i_win_modal_heading}>What Powers do I have?</h3>\r\n                <p className={classes.__how_do_i_win_modal_text}>Chase the Ace will have three Powers available:</p>\r\n                \r\n                <div className={classes.__how_do_i_win_modal_powers}>\r\n                    <ReplaceIcon style={{ height: 'auto' }} width=\"26\" height=\"26\" />\r\n                    <p className={classes.__how_do_i_win_modal_power_text}>\r\n                        <b>New Card</b> - swap your current card for a random new card from the deck\r\n                    </p>\r\n                </div> \r\n \r\n                <div className={classes.__how_do_i_win_modal_powers}>\r\n                    <PlusMinusIcon style={{ height: 'auto' }} width=\"26\" height=\"26\" />\r\n                    <p className={classes.__how_do_i_win_modal_power_text}>\r\n                        <b>Power Up/Down</b> - Use this power to increase the value of a card. If you get a deuce, use Power Down to make it an Ace!\r\n                    </p>\r\n                </div>\r\n\r\n                <div className={classes.__how_do_i_win_modal_powers}>\r\n                    <img src={boltIcon} width=\"26\" height=\"26\" />\r\n                    <p className={classes.__how_do_i_win_modal_power_text}>\r\n                        <b>Power Match</b> - The most powerful Power! Use this Power to turn and card into an Ace!\r\n                    </p>\r\n                </div>\r\n\r\n                <h3 className={classes.__how_do_i_win_modal_heading}>What is the 'Chase the Ace' round?</h3>\r\n                <p className={classes.__how_do_i_win_modal_text}>\r\n                    If you make a hand of 5 aces, you will then move on to the Chase the Ace round. In this round you will be presented with a full deck of cards face down. Pick the Ace of Spades and you win! Pick any other card and it will remain visible. Your odds get better each time you make it in!\r\n                </p>\r\n              </Modal>\r\n            </div>\r\n          );\r\n    }\r\n\r\n    const { seconds = 12 } = props || {}\r\n    return (\r\n        <Card>\r\n            <div className={classes.__card_header}>\r\n                <small>Jackpot</small>\r\n            </div>\r\n            <div className={classes.__card_body}>               \r\n                <div className={classes.__card_body_left}>\r\n                    <div className={classes.__card_body_top}>\r\n                        <h1>$2000</h1><span>CAD</span>\r\n                    </div>\r\n                    <p>\r\n                        Odds of winning depend on <br />\r\n                        <strong>Powerplay usage</strong>\r\n                    </p>\r\n                </div>\r\n                <div className={classes.__divider} />\r\n                <div className={classes.__card_body_right}>\r\n                    {\r\n                        title == \"Chase The Ace\"\r\n                        ?\r\n                        <span className={classes.__span} onClick={onOpenModal}>How do I win?</span>\r\n                        :\r\n                        <span>Live Draw in Progress</span>\r\n                    } \r\n                    {\r\n                        howDoIWinModal\r\n                        &&\r\n                        renderHowDoIWinModal()\r\n                    } \r\n                    <div className={classes.__card_body_right_bottom}>\r\n                        <Time size={25} style={{height: 'auto', marginRight: 10}} />\r\n                        <p>\r\n                        Pay attention, you will have <br />\r\n                        {seconds} seconds to match each card.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nPageHeaderCard.propTypes = {\r\n    seconds: PropTypes.number\r\n}\r\n\r\nexport default PageHeaderCard\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\TimerClock\\TimerClock.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\LiveGame\\LiveGame.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ShareButton\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Link\\index.js",["912"],"import React from 'react';\r\n\r\nimport classes from './link.module.scss';\r\n\r\nconst Link = (props) => {\r\n    const {title = '', onClick = () => {}, styles={}} = props || {};\r\n\r\n    return (\r\n        <a onClick={onClick} className={classes.__link} style={styles}>\r\n            {title}\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default Link;","E:\\workspace\\John House\\PowerplayGames\\src\\components\\SidebarLockItem\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Cell\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPickInfoCard\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\ButtonDropdown\\index.js",["913"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport classes from './index.module.scss'\r\n\r\nfunction ButtonDropdown(props) {\r\n    const [isVisible, setVisibleState] = useState(false)\r\n    const [_selected, setSelected] = useState({})\r\n    const { elements = [], selected = {}, onChange = () => { }, isActive = false, styles = {} } = props || {}\r\n\r\n    useEffect(() => {\r\n        if(!selected && elements.length)\r\n            onSelectListItem(elements[0])\r\n        else \r\n            onSelectListItem(selected)\r\n    }, [selected])\r\n\r\n    const toggleList = () => {\r\n        setVisibleState(!isVisible)\r\n    }\r\n\r\n    const onSelectListItem = (item) => {\r\n        setSelected(item)\r\n        setVisibleState(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`${classes.select_container_1} ${isActive && classes.selected}`} style={styles}>\r\n            <div className={classes.select_header}>\r\n                <button onClick={toggleList}>\r\n                    <span>NCCA</span> <br /> {_selected?.title}\r\n                </button>\r\n            </div>\r\n\r\n        {\r\n            isVisible &&\r\n                <div className={classes.select_body}>\r\n                    {\r\n                        elements.length && elements.map((itm, index) => <button\r\n                            key={itm.title + index.toString()}\r\n                            className={`${index !== elements.length - 1 && classes.divider} ${index === 0 && classes.borderRadiusTop} \r\n                            ${index === elements.length - 1 && classes.borderRadiusBottom}`} onClick={() => {\r\n                                onSelectListItem(itm)\r\n                                onChange(itm)\r\n                            }}>\r\n                            {itm.title}</button>)\r\n                    }\r\n                </div>\r\n\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nButtonDropdown.propTypes = {\r\n    elements: PropTypes.array,\r\n    selected: PropTypes.object,\r\n    isActive: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    styles: PropTypes.object\r\n}\r\n\r\nexport default ButtonDropdown\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\components\\Checkbox\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Select\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Accordian\\index.js",["914","915","916"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classes from './index.module.scss';\r\nimport ResultCard from './ResultCard';\r\n\r\nfunction Accordian(props) {\r\n    const { title = '', visible = false, cash = '', cashTitle = '', Icon = '', isSvg = false, onClick = () => { }, isMobile = false } = props || {}\r\n    \r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.accoridan_bar} onClick={onClick}>\r\n                <span>{title}</span>\r\n                <span className={classes.accoridan_bar_right}>\r\n                    <span>\r\n                        <span>{cashTitle}</span>\r\n                        <span className={classes.amount}>{cash}</span>\r\n                    </span>\r\n                    {\r\n                        Icon && isSvg ?\r\n                            <Icon />\r\n                            :\r\n                            Icon &&\r\n                            <img src={Icon} />\r\n                    }\r\n                    <i className={`${classes.arrow} ${visible ? classes.up : classes.down}`} />\r\n                </span>\r\n            </div>\r\n\r\n            {\r\n                visible &&\r\n                <ResultCard isMobile={isMobile} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nAccordian.propTypes = {\r\n    title: PropTypes.string,\r\n    visible: PropTypes.bool,\r\n    cash: PropTypes.any,\r\n    cashTitle: PropTypes.string,\r\n    Icon: PropTypes.any,\r\n    isSvg: PropTypes.bool,\r\n    onClick: PropTypes.func,\r\n    isMobile: PropTypes.bool\r\n}\r\n\r\nexport default Accordian\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Plus.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Minus.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Tick.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\index.js",["917"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { CONSTANTS } from '../../utility/constants'\r\nimport Clubs from './Club/Clubs';\r\nimport Spade from './Spade/Spades';\r\nimport Hearts from './Hearts/Hearts';\r\nimport Diamonds from './Diamond/Diamonds';\r\n\r\nfunction Cards(props) {\r\n    const {\r\n        card: { suit = 0, rank = 0 } = {},\r\n        width = 0,\r\n        height = 0\r\n    } = props || {}\r\n    \r\n    const renderCard = (suit, rank) => {\r\n        let _rank = CONSTANTS.CARD_RANKS[rank]\r\n        switch (suit) {\r\n            case CONSTANTS.CARD_SUITS.DIAMOND:\r\n                return <Diamonds style={{height: 'auto'}} width={width || 130} height={height || 195} value={`${_rank}`} />\r\n\r\n            case CONSTANTS.CARD_SUITS.CLUB:\r\n                return <Clubs style={{height: 'auto', margin: '0', padding: '0'}} width={width || 130} height={height || 195} value={`${_rank}`} />\r\n\r\n            case CONSTANTS.CARD_SUITS.HEART:\r\n                return <Hearts style={{height: 'auto'}} width={width || 130} height={height || 195} value={`${_rank}`} />\r\n\r\n            case CONSTANTS.CARD_SUITS.SPADE:\r\n                return <Spade style={{height: 'auto'}} width={width || 130} height={height || 195} value={`${_rank}`} />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n          {renderCard(suit, rank)}  \r\n        </>\r\n    )\r\n}\r\n\r\nCards.propTypes = {\r\n    card: PropTypes.object,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number\r\n}\r\n\r\nexport default Cards\r\n\r\n","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Time.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellHigh.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellMedium.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellLow.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\CellVeryLow.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Calendar2.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Stadium2.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Pinnacle.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\PowerPickInfoCard\\Games.js",["918","919"],"import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport NoPick from '../NoPick'\r\nimport Cell from '../Cell'\r\nimport Button from '../Button'\r\nimport NoPickIcon from '../../icons/NoPick'\r\nimport { redirectTo } from '../../utility/shared'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nfunction Games(props) {\r\n    const {\r\n        isNoPick = false,\r\n        cellTitle = '',\r\n        isPowerUp = false,\r\n        isCell = false,\r\n        mediumCell = false,\r\n        highCell = false,\r\n        lowCell = false,\r\n        veryLowCell = false,\r\n        onPowerUp = () => { }\r\n    } = props || {}\r\n    const isTableOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\r\n    const history = useHistory()\r\n    return (\r\n        <>\r\n            {\r\n                isNoPick &&\r\n                    <NoPick icon={<NoPickIcon style={{height: 'auto'}} size={isTableOrMobile && 33} />} />\r\n            }\r\n            \r\n            {\r\n                isCell &&\r\n                    <Cell high={highCell} medium={mediumCell} low={lowCell} veryLow={veryLowCell} text={cellTitle} size={isTableOrMobile && 33} />\r\n            }\r\n\r\n            {\r\n                isPowerUp &&\r\n                <Button title=\"POWER UP!\" onClick={() => {\r\n                    onPowerUp()\r\n                    history.push(\"/power-up\")\r\n                }} styles={{ width: '100px', fontSize: '13px' }} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nGames.propTypes = {\r\n    isNoPick: PropTypes.bool,\r\n    isCell: PropTypes.bool,\r\n    isPowerUp: PropTypes.bool,\r\n    cellTitle: PropTypes.string,\r\n    mediumCell: PropTypes.bool,\r\n    highCell: PropTypes.bool,\r\n    lowCell: PropTypes.bool,\r\n    veryLowCell: PropTypes.bool,\r\n    onPowerUp: PropTypes.func\r\n}\r\n\r\nexport default Games","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Clock2.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Accordian\\ResultCard.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\Clubs.js",["920"],"import React from 'react';\r\nimport ClubAce from './ClubAce';\r\n\r\nimport { ClubIcons } from './ClubIcons'\r\nimport ClubJack from './ClubJack';\r\nimport ClubKing from './ClubKing';\r\nimport ClubQueen from './ClubQueen';\r\n\r\nconst Clubs = props => {\r\n    const renderCards = (value) => {\r\n        let _value = value.toString();\r\n        switch(_value) {\r\n            case \"2\":\r\n                return ClubIcons.twos()\r\n            \r\n            case \"3\":\r\n                return ClubIcons.threes()\r\n            \r\n            case \"4\":\r\n                return ClubIcons.fours()\r\n            \r\n            case \"5\":\r\n                return ClubIcons.fives()\r\n            \r\n            case \"6\":\r\n                return ClubIcons.sixs()\r\n            \r\n            case \"7\":\r\n                return ClubIcons.sevens()\r\n            \r\n            case \"8\":\r\n                return ClubIcons.eights()\r\n            \r\n            case \"9\":\r\n                return ClubIcons.nines()\r\n            \r\n            case \"10\":\r\n                return ClubIcons.tens()\r\n            \r\n            case \"J\":\r\n                return <ClubJack />\r\n            \r\n            case \"K\":\r\n                return <ClubKing />\r\n            \r\n            case \"A\":\r\n                return <ClubAce />\r\n            \r\n            case \"Q\":\r\n                return <ClubQueen />\r\n                \r\n        }\r\n    }\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\r\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\r\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\r\n                {\r\n                    renderCards(props?.value)\r\n                }\r\n            </g>\r\n            {\r\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\r\n                <>\r\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\r\n                        {props?.value}\r\n                    </text>\r\n\r\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\r\n                        {props?.value}\r\n                    </text>\r\n                </>\r\n            }\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Clubs;","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\Hearts.js",["921"],"import React from 'react';\r\n\r\nimport { HeartsIcons } from './HeartsIcons'\r\nimport HeartJack from './HeartJack'\r\nimport HeartKing from './HeartKing';\r\nimport HeartQueen from './HeartQueen';\r\nimport HeartAce from './HeartAce';\r\n\r\nconst Hearts = props => {\r\n    const renderCards = (value) => {\r\n        let _value = value.toString();\r\n        switch(_value) {\r\n            case \"2\":\r\n                return HeartsIcons.twos()\r\n            \r\n            case \"3\":\r\n                return HeartsIcons.threes()\r\n            \r\n            case \"4\":\r\n                return HeartsIcons.fours()\r\n            \r\n            case \"5\":\r\n                return HeartsIcons.fives()\r\n            \r\n            case \"6\":\r\n                return HeartsIcons.sixs()\r\n            \r\n            case \"7\":\r\n                return HeartsIcons.sevens()\r\n            \r\n            case \"8\":\r\n                return HeartsIcons.eights()\r\n            \r\n            case \"9\":\r\n                return HeartsIcons.nines()\r\n            \r\n            case \"10\":\r\n                return HeartsIcons.tens()\r\n            \r\n            case \"J\":\r\n                return <HeartJack />\r\n            \r\n            case \"K\":\r\n                return <HeartKing />\r\n            \r\n            case \"A\":\r\n                return <HeartAce />\r\n            \r\n            case \"Q\":\r\n                return <HeartQueen />\r\n                \r\n        }\r\n    }\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\r\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\r\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\r\n                {\r\n                    renderCards(props?.value)\r\n                }\r\n            </g>\r\n            {\r\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\r\n                <>\r\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"15\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\r\n                        {props?.value}\r\n                    </text>\r\n\r\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-90\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\r\n                        {props?.value}\r\n                    </text>\r\n                </>\r\n            }\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Hearts;","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\Spades.js",["922"],"import React from 'react';\r\n\r\nimport { SpadeNumbers } from './SpadeIconNumbers'\r\nimport SpadeKing from './SpadeKing';\r\nimport SpadeJack from './SpadeJack';\r\nimport SpadeQueen from './SpadeQueen';\r\nimport SpadeAce from './SpadeAce';\r\n\r\nconst Spades = props => {\r\n    const renderCards = (value) => {\r\n        let _value = value.toString();\r\n        switch(_value) {\r\n            case \"2\":\r\n                return SpadeNumbers.twos()\r\n            \r\n            case \"3\":\r\n                return SpadeNumbers.threes()\r\n            \r\n            case \"4\":\r\n                return SpadeNumbers.fours()\r\n            \r\n            case \"5\":\r\n                return SpadeNumbers.fives()\r\n            \r\n            case \"6\":\r\n                return SpadeNumbers.sixs()\r\n            \r\n            case \"7\":\r\n                return SpadeNumbers.sevens()\r\n            \r\n            case \"8\":\r\n                return SpadeNumbers.eights()\r\n            \r\n            case \"9\":\r\n                return SpadeNumbers.nines()\r\n            \r\n            case \"10\":\r\n                return SpadeNumbers.tens()\r\n            \r\n            case \"J\":\r\n                return <SpadeJack />\r\n            \r\n            case \"K\":\r\n                return <SpadeKing />\r\n            \r\n            case \"A\":\r\n                return <SpadeAce />\r\n            \r\n            case \"Q\":\r\n                return <SpadeQueen />\r\n                \r\n        }\r\n    }\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\r\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\r\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\r\n                {\r\n                    renderCards(props?.value)\r\n                }\r\n            </g>\r\n            {\r\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\r\n                <>\r\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\r\n                        {props?.value}\r\n                    </text>\r\n\r\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\r\n                        {props?.value}\r\n                    </text>\r\n                </>\r\n            }\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spades;","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\Diamonds.js",["923"],"import React from 'react';\r\nimport DiamondAce from './DiamondAce';\r\n\r\nimport { DiamondIcons } from './DiamondIcons'\r\nimport DiamondJack from './DiamondJack';\r\nimport DiamondKing from './DiamondKing'\r\nimport DiamondQueen from './DiamondQueen';\r\n\r\nconst Diamonds = props => {\r\n    const renderCards = (value) => {\r\n        let _value = value.toString();\r\n        switch(_value) {\r\n            case \"2\":\r\n                return DiamondIcons.twos()\r\n            \r\n            case \"3\":\r\n                return DiamondIcons.threes()\r\n            \r\n            case \"4\":\r\n                return DiamondIcons.fours()\r\n            \r\n            case \"5\":\r\n                return DiamondIcons.fives()\r\n            \r\n            case \"6\":\r\n                return DiamondIcons.sixs()\r\n            \r\n            case \"7\":\r\n                return DiamondIcons.sevens()\r\n            \r\n            case \"8\":\r\n                return DiamondIcons.eights()\r\n            \r\n            case \"9\":\r\n                return DiamondIcons.nines()\r\n            \r\n            case \"10\":\r\n                return DiamondIcons.tens()\r\n            \r\n            case \"J\":\r\n                return <DiamondJack />\r\n            \r\n            case \"K\":\r\n                return <DiamondKing />\r\n            \r\n            case \"A\":\r\n                return <DiamondAce />\r\n            \r\n            case \"Q\":\r\n                return <DiamondQueen />\r\n                \r\n        }\r\n    }\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\r\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\r\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\r\n                {\r\n                    renderCards(props?.value)\r\n                }\r\n            </g>\r\n            {\r\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\r\n                <>\r\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\r\n                        {props?.value}\r\n                    </text>\r\n\r\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\r\n                        {props?.value}\r\n                    </text>\r\n                </>\r\n            }\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Diamonds;","E:\\workspace\\John House\\PowerplayGames\\src\\icons\\NoPick.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubAce.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubIcons.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubKing.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubJack.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartsIcons.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartKing.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartJack.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartAce.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Hearts\\HeartQueen.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeIconNumbers.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeKing.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeJack.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeQueen.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Spade\\SpadeAce.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondAce.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondIcons.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondJack.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondKing.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Diamond\\DiamondQueen.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Cards\\Club\\ClubQueen.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\NoPick\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\pages\\Baseball\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Doc.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\components\\Header3\\index.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\SearchIcon.js",[],"E:\\workspace\\John House\\PowerplayGames\\src\\icons\\Tick2.js",[],{"ruleId":"924","replacedBy":"925"},{"ruleId":"926","replacedBy":"927"},{"ruleId":"928","severity":1,"message":"929","line":1,"column":8,"nodeType":"930","messageId":"931","endLine":1,"endColumn":13},{"ruleId":"928","severity":1,"message":"932","line":2,"column":23,"nodeType":"930","messageId":"931","endLine":2,"endColumn":33},{"ruleId":"928","severity":1,"message":"933","line":3,"column":10,"nodeType":"930","messageId":"931","endLine":3,"endColumn":21},{"ruleId":"928","severity":1,"message":"934","line":3,"column":23,"nodeType":"930","messageId":"931","endLine":3,"endColumn":34},{"ruleId":"935","severity":1,"message":"936","line":26,"column":8,"nodeType":"937","endLine":26,"endColumn":14,"suggestions":"938"},{"ruleId":"928","severity":1,"message":"939","line":10,"column":8,"nodeType":"930","messageId":"931","endLine":10,"endColumn":20},{"ruleId":"928","severity":1,"message":"940","line":31,"column":13,"nodeType":"930","messageId":"931","endLine":31,"endColumn":22},{"ruleId":"935","severity":1,"message":"941","line":44,"column":9,"nodeType":"937","endLine":44,"endColumn":11,"suggestions":"942"},{"ruleId":"943","severity":1,"message":"944","line":114,"column":104,"nodeType":"945","messageId":"946","endLine":114,"endColumn":105,"fix":"947"},{"ruleId":"928","severity":1,"message":"948","line":2,"column":10,"nodeType":"930","messageId":"931","endLine":2,"endColumn":14},{"ruleId":"949","severity":1,"message":"950","line":75,"column":33,"nodeType":"951","endLine":75,"endColumn":82},{"ruleId":"949","severity":1,"message":"950","line":87,"column":33,"nodeType":"951","endLine":87,"endColumn":78},{"ruleId":"928","severity":1,"message":"952","line":22,"column":12,"nodeType":"930","messageId":"931","endLine":22,"endColumn":20},{"ruleId":"953","severity":1,"message":"954","line":97,"column":37,"nodeType":"955","messageId":"956","endLine":97,"endColumn":43},{"ruleId":"953","severity":1,"message":"954","line":105,"column":37,"nodeType":"955","messageId":"956","endLine":105,"endColumn":43},{"ruleId":"953","severity":1,"message":"954","line":113,"column":37,"nodeType":"955","messageId":"956","endLine":113,"endColumn":43},{"ruleId":"953","severity":1,"message":"954","line":121,"column":37,"nodeType":"955","messageId":"956","endLine":121,"endColumn":43},{"ruleId":"949","severity":1,"message":"950","line":223,"column":37,"nodeType":"951","endLine":223,"endColumn":87},{"ruleId":"928","severity":1,"message":"957","line":10,"column":8,"nodeType":"930","messageId":"931","endLine":10,"endColumn":19},{"ruleId":"935","severity":1,"message":"958","line":28,"column":8,"nodeType":"937","endLine":28,"endColumn":10,"suggestions":"959"},{"ruleId":"928","severity":1,"message":"957","line":10,"column":8,"nodeType":"930","messageId":"931","endLine":10,"endColumn":19},{"ruleId":"928","severity":1,"message":"960","line":13,"column":8,"nodeType":"930","messageId":"931","endLine":13,"endColumn":14},{"ruleId":"928","severity":1,"message":"961","line":39,"column":7,"nodeType":"930","messageId":"931","endLine":39,"endColumn":19},{"ruleId":"928","severity":1,"message":"962","line":53,"column":12,"nodeType":"930","messageId":"931","endLine":53,"endColumn":17},{"ruleId":"928","severity":1,"message":"963","line":54,"column":26,"nodeType":"930","messageId":"931","endLine":54,"endColumn":41},{"ruleId":"928","severity":1,"message":"964","line":56,"column":12,"nodeType":"930","messageId":"931","endLine":56,"endColumn":29},{"ruleId":"928","severity":1,"message":"965","line":57,"column":12,"nodeType":"930","messageId":"931","endLine":57,"endColumn":26},{"ruleId":"935","severity":1,"message":"966","line":79,"column":8,"nodeType":"937","endLine":79,"endColumn":10,"suggestions":"967"},{"ruleId":"935","severity":1,"message":"968","line":90,"column":8,"nodeType":"937","endLine":90,"endColumn":42,"suggestions":"969"},{"ruleId":"928","severity":1,"message":"970","line":150,"column":9,"nodeType":"930","messageId":"931","endLine":150,"endColumn":24},{"ruleId":"971","severity":1,"message":"972","line":255,"column":9,"nodeType":"973","messageId":"974","endLine":271,"endColumn":10},{"ruleId":"928","severity":1,"message":"975","line":277,"column":11,"nodeType":"930","messageId":"931","endLine":277,"endColumn":23},{"ruleId":"976","severity":1,"message":"977","line":350,"column":21,"nodeType":"978","endLine":350,"endColumn":79},{"ruleId":"976","severity":1,"message":"977","line":356,"column":21,"nodeType":"978","endLine":356,"endColumn":79},{"ruleId":"928","severity":1,"message":"979","line":410,"column":11,"nodeType":"930","messageId":"931","endLine":410,"endColumn":39},{"ruleId":"980","severity":1,"message":"981","line":539,"column":14,"nodeType":"982","messageId":"956","endLine":539,"endColumn":16},{"ruleId":"980","severity":1,"message":"981","line":571,"column":57,"nodeType":"982","messageId":"956","endLine":571,"endColumn":59},{"ruleId":"980","severity":1,"message":"981","line":745,"column":126,"nodeType":"982","messageId":"956","endLine":745,"endColumn":128},{"ruleId":"949","severity":1,"message":"950","line":784,"column":33,"nodeType":"951","endLine":784,"endColumn":89},{"ruleId":"949","severity":1,"message":"950","line":793,"column":33,"nodeType":"951","endLine":793,"endColumn":86},{"ruleId":"928","severity":1,"message":"983","line":4,"column":8,"nodeType":"930","messageId":"931","endLine":4,"endColumn":18},{"ruleId":"928","severity":1,"message":"983","line":4,"column":8,"nodeType":"930","messageId":"931","endLine":4,"endColumn":18},{"ruleId":"928","severity":1,"message":"983","line":4,"column":8,"nodeType":"930","messageId":"931","endLine":4,"endColumn":18},{"ruleId":"928","severity":1,"message":"983","line":4,"column":8,"nodeType":"930","messageId":"931","endLine":4,"endColumn":18},{"ruleId":"928","severity":1,"message":"984","line":18,"column":10,"nodeType":"930","messageId":"931","endLine":18,"endColumn":18},{"ruleId":"928","severity":1,"message":"985","line":18,"column":20,"nodeType":"930","messageId":"931","endLine":18,"endColumn":29},{"ruleId":"949","severity":1,"message":"950","line":88,"column":11,"nodeType":"951","endLine":88,"endColumn":64},{"ruleId":"949","severity":1,"message":"950","line":101,"column":13,"nodeType":"951","endLine":101,"endColumn":69},{"ruleId":"949","severity":1,"message":"950","line":108,"column":13,"nodeType":"951","endLine":108,"endColumn":71},{"ruleId":"949","severity":1,"message":"950","line":109,"column":13,"nodeType":"951","endLine":109,"endColumn":73},{"ruleId":"949","severity":1,"message":"950","line":118,"column":13,"nodeType":"951","endLine":118,"endColumn":78},{"ruleId":"949","severity":1,"message":"950","line":125,"column":13,"nodeType":"951","endLine":125,"endColumn":81},{"ruleId":"949","severity":1,"message":"950","line":145,"column":13,"nodeType":"951","endLine":145,"endColumn":64},{"ruleId":"949","severity":1,"message":"950","line":157,"column":11,"nodeType":"951","endLine":157,"endColumn":29},{"ruleId":"986","severity":1,"message":"987","line":164,"column":3,"nodeType":"988","messageId":"989","endLine":166,"endColumn":4},{"ruleId":"928","severity":1,"message":"990","line":18,"column":7,"nodeType":"930","messageId":"931","endLine":18,"endColumn":26},{"ruleId":"928","severity":1,"message":"991","line":19,"column":7,"nodeType":"930","messageId":"931","endLine":19,"endColumn":20},{"ruleId":"935","severity":1,"message":"992","line":43,"column":6,"nodeType":"937","endLine":43,"endColumn":8,"suggestions":"993"},{"ruleId":"935","severity":1,"message":"994","line":49,"column":6,"nodeType":"937","endLine":49,"endColumn":42,"suggestions":"995"},{"ruleId":"980","severity":1,"message":"981","line":53,"column":27,"nodeType":"982","messageId":"956","endLine":53,"endColumn":29},{"ruleId":"935","severity":1,"message":"996","line":78,"column":6,"nodeType":"937","endLine":78,"endColumn":25,"suggestions":"997"},{"ruleId":"928","severity":1,"message":"998","line":80,"column":12,"nodeType":"930","messageId":"931","endLine":80,"endColumn":21},{"ruleId":"980","severity":1,"message":"981","line":101,"column":21,"nodeType":"982","messageId":"956","endLine":101,"endColumn":23},{"ruleId":"980","severity":1,"message":"981","line":219,"column":28,"nodeType":"982","messageId":"956","endLine":219,"endColumn":30},{"ruleId":"935","severity":1,"message":"936","line":27,"column":8,"nodeType":"937","endLine":27,"endColumn":28,"suggestions":"999"},{"ruleId":"928","severity":1,"message":"1000","line":4,"column":10,"nodeType":"930","messageId":"931","endLine":4,"endColumn":25},{"ruleId":"928","severity":1,"message":"1001","line":4,"column":27,"nodeType":"930","messageId":"931","endLine":4,"endColumn":36},{"ruleId":"928","severity":1,"message":"1002","line":4,"column":38,"nodeType":"930","messageId":"931","endLine":4,"endColumn":47},{"ruleId":"928","severity":1,"message":"1003","line":6,"column":9,"nodeType":"930","messageId":"931","endLine":6,"endColumn":18},{"ruleId":"928","severity":1,"message":"1004","line":6,"column":44,"nodeType":"930","messageId":"931","endLine":6,"endColumn":62},{"ruleId":"928","severity":1,"message":"1005","line":28,"column":10,"nodeType":"930","messageId":"931","endLine":28,"endColumn":24},{"ruleId":"928","severity":1,"message":"964","line":51,"column":12,"nodeType":"930","messageId":"931","endLine":51,"endColumn":29},{"ruleId":"928","severity":1,"message":"965","line":52,"column":12,"nodeType":"930","messageId":"931","endLine":52,"endColumn":26},{"ruleId":"928","severity":1,"message":"1006","line":60,"column":13,"nodeType":"930","messageId":"931","endLine":60,"endColumn":27},{"ruleId":"928","severity":1,"message":"1007","line":65,"column":22,"nodeType":"930","messageId":"931","endLine":65,"endColumn":32},{"ruleId":"935","severity":1,"message":"966","line":74,"column":8,"nodeType":"937","endLine":74,"endColumn":10,"suggestions":"1008"},{"ruleId":"935","severity":1,"message":"941","line":82,"column":8,"nodeType":"937","endLine":82,"endColumn":72,"suggestions":"1009"},{"ruleId":"928","severity":1,"message":"1010","line":192,"column":11,"nodeType":"930","messageId":"931","endLine":192,"endColumn":22},{"ruleId":"971","severity":1,"message":"972","line":199,"column":9,"nodeType":"973","messageId":"974","endLine":215,"endColumn":10},{"ruleId":"928","severity":1,"message":"975","line":220,"column":11,"nodeType":"930","messageId":"931","endLine":220,"endColumn":23},{"ruleId":"971","severity":1,"message":"972","line":368,"column":9,"nodeType":"973","messageId":"974","endLine":380,"endColumn":10},{"ruleId":"971","severity":1,"message":"972","line":402,"column":9,"nodeType":"973","messageId":"974","endLine":417,"endColumn":10},{"ruleId":"928","severity":1,"message":"960","line":13,"column":8,"nodeType":"930","messageId":"931","endLine":13,"endColumn":14},{"ruleId":"928","severity":1,"message":"1011","line":14,"column":8,"nodeType":"930","messageId":"931","endLine":14,"endColumn":16},{"ruleId":"928","severity":1,"message":"964","line":49,"column":12,"nodeType":"930","messageId":"931","endLine":49,"endColumn":29},{"ruleId":"928","severity":1,"message":"965","line":50,"column":12,"nodeType":"930","messageId":"931","endLine":50,"endColumn":26},{"ruleId":"928","severity":1,"message":"1007","line":60,"column":22,"nodeType":"930","messageId":"931","endLine":60,"endColumn":32},{"ruleId":"928","severity":1,"message":"1012","line":61,"column":9,"nodeType":"930","messageId":"931","endLine":61,"endColumn":19},{"ruleId":"935","severity":1,"message":"1013","line":69,"column":8,"nodeType":"937","endLine":69,"endColumn":10,"suggestions":"1014"},{"ruleId":"935","severity":1,"message":"1015","line":79,"column":8,"nodeType":"937","endLine":79,"endColumn":76,"suggestions":"1016"},{"ruleId":"971","severity":1,"message":"972","line":257,"column":9,"nodeType":"973","messageId":"974","endLine":273,"endColumn":10},{"ruleId":"928","severity":1,"message":"975","line":278,"column":11,"nodeType":"930","messageId":"931","endLine":278,"endColumn":23},{"ruleId":"928","severity":1,"message":"1017","line":48,"column":21,"nodeType":"930","messageId":"931","endLine":48,"endColumn":26},{"ruleId":"928","severity":1,"message":"1018","line":48,"column":50,"nodeType":"930","messageId":"931","endLine":48,"endColumn":57},{"ruleId":"935","severity":1,"message":"1019","line":52,"column":9,"nodeType":"937","endLine":52,"endColumn":18,"suggestions":"1020"},{"ruleId":"928","severity":1,"message":"983","line":4,"column":8,"nodeType":"930","messageId":"931","endLine":4,"endColumn":18},{"ruleId":"928","severity":1,"message":"1021","line":5,"column":10,"nodeType":"930","messageId":"931","endLine":5,"endColumn":17},{"ruleId":"928","severity":1,"message":"1022","line":10,"column":20,"nodeType":"930","messageId":"931","endLine":10,"endColumn":25},{"ruleId":"928","severity":1,"message":"1023","line":1,"column":38,"nodeType":"930","messageId":"931","endLine":1,"endColumn":46},{"ruleId":"928","severity":1,"message":"1024","line":2,"column":10,"nodeType":"930","messageId":"931","endLine":2,"endColumn":14},{"ruleId":"928","severity":1,"message":"1025","line":8,"column":8,"nodeType":"930","messageId":"931","endLine":8,"endColumn":21},{"ruleId":"928","severity":1,"message":"1026","line":11,"column":8,"nodeType":"930","messageId":"931","endLine":11,"endColumn":12},{"ruleId":"928","severity":1,"message":"1027","line":12,"column":8,"nodeType":"930","messageId":"931","endLine":12,"endColumn":17},{"ruleId":"928","severity":1,"message":"1028","line":27,"column":12,"nodeType":"930","messageId":"931","endLine":27,"endColumn":24},{"ruleId":"928","severity":1,"message":"1029","line":13,"column":33,"nodeType":"930","messageId":"931","endLine":13,"endColumn":45},{"ruleId":"935","severity":1,"message":"1030","line":14,"column":8,"nodeType":"937","endLine":14,"endColumn":10,"suggestions":"1031"},{"ruleId":"935","severity":1,"message":"1032","line":26,"column":8,"nodeType":"937","endLine":26,"endColumn":52,"suggestions":"1033"},{"ruleId":"928","severity":1,"message":"1034","line":4,"column":10,"nodeType":"930","messageId":"931","endLine":4,"endColumn":23},{"ruleId":"928","severity":1,"message":"1035","line":11,"column":7,"nodeType":"930","messageId":"931","endLine":11,"endColumn":25},{"ruleId":"928","severity":1,"message":"1036","line":4,"column":10,"nodeType":"930","messageId":"931","endLine":4,"endColumn":19},{"ruleId":"949","severity":1,"message":"950","line":34,"column":15,"nodeType":"951","endLine":34,"endColumn":39},{"ruleId":"928","severity":1,"message":"985","line":1,"column":17,"nodeType":"930","messageId":"931","endLine":1,"endColumn":26},{"ruleId":"949","severity":1,"message":"950","line":26,"column":17,"nodeType":"951","endLine":26,"endColumn":58},{"ruleId":"928","severity":1,"message":"1037","line":8,"column":37,"nodeType":"930","messageId":"931","endLine":8,"endColumn":44},{"ruleId":"980","severity":1,"message":"981","line":18,"column":31,"nodeType":"982","messageId":"956","endLine":18,"endColumn":33},{"ruleId":"928","severity":1,"message":"1038","line":9,"column":65,"nodeType":"930","messageId":"931","endLine":9,"endColumn":73},{"ruleId":"935","severity":1,"message":"1039","line":16,"column":8,"nodeType":"937","endLine":16,"endColumn":18,"suggestions":"1040"},{"ruleId":"928","severity":1,"message":"1041","line":13,"column":10,"nodeType":"930","messageId":"931","endLine":13,"endColumn":16},{"ruleId":"928","severity":1,"message":"1042","line":25,"column":9,"nodeType":"930","messageId":"931","endLine":25,"endColumn":13},{"ruleId":"928","severity":1,"message":"1043","line":28,"column":22,"nodeType":"930","messageId":"931","endLine":28,"endColumn":29},{"ruleId":"928","severity":1,"message":"1012","line":28,"column":35,"nodeType":"930","messageId":"931","endLine":28,"endColumn":45},{"ruleId":"928","severity":1,"message":"1044","line":28,"column":51,"nodeType":"930","messageId":"931","endLine":28,"endColumn":69},{"ruleId":"935","severity":1,"message":"1045","line":58,"column":8,"nodeType":"937","endLine":58,"endColumn":14,"suggestions":"1046"},{"ruleId":"949","severity":1,"message":"950","line":112,"column":37,"nodeType":"951","endLine":112,"endColumn":95},{"ruleId":"980","severity":1,"message":"981","line":143,"column":43,"nodeType":"982","messageId":"956","endLine":143,"endColumn":45},{"ruleId":"949","severity":1,"message":"950","line":185,"column":57,"nodeType":"951","endLine":185,"endColumn":101},{"ruleId":"949","severity":1,"message":"950","line":64,"column":21,"nodeType":"951","endLine":64,"endColumn":66},{"ruleId":"980","severity":1,"message":"981","line":98,"column":31,"nodeType":"982","messageId":"956","endLine":98,"endColumn":33},{"ruleId":"1047","severity":1,"message":"1048","line":9,"column":9,"nodeType":"951","endLine":9,"endColumn":72},{"ruleId":"935","severity":1,"message":"1039","line":16,"column":8,"nodeType":"937","endLine":16,"endColumn":18,"suggestions":"1049"},{"ruleId":"928","severity":1,"message":"985","line":1,"column":17,"nodeType":"930","messageId":"931","endLine":1,"endColumn":26},{"ruleId":"928","severity":1,"message":"984","line":1,"column":28,"nodeType":"930","messageId":"931","endLine":1,"endColumn":36},{"ruleId":"949","severity":1,"message":"950","line":24,"column":29,"nodeType":"951","endLine":24,"endColumn":47},{"ruleId":"971","severity":1,"message":"972","line":19,"column":9,"nodeType":"973","messageId":"974","endLine":31,"endColumn":10},{"ruleId":"928","severity":1,"message":"1050","line":10,"column":10,"nodeType":"930","messageId":"931","endLine":10,"endColumn":20},{"ruleId":"928","severity":1,"message":"1051","line":11,"column":10,"nodeType":"930","messageId":"931","endLine":11,"endColumn":18},{"ruleId":"971","severity":1,"message":"972","line":12,"column":9,"nodeType":"973","messageId":"974","endLine":52,"endColumn":10},{"ruleId":"971","severity":1,"message":"972","line":12,"column":9,"nodeType":"973","messageId":"974","endLine":52,"endColumn":10},{"ruleId":"971","severity":1,"message":"972","line":12,"column":9,"nodeType":"973","messageId":"974","endLine":52,"endColumn":10},{"ruleId":"971","severity":1,"message":"972","line":12,"column":9,"nodeType":"973","messageId":"974","endLine":52,"endColumn":10},"no-native-reassign",["1052"],"no-negated-in-lhs",["1053"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["1054"],"'ReverseTimer' is defined but never used.","'bingoGame' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'gameStart'. Either include it or remove the dependency array.",["1055"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"1056","text":"1057"},"'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'selected' is assigned a value but never used.","no-dupe-keys","Duplicate key 'margin'.","ObjectExpression","unexpected","'ProgressBar' is defined but never used.","React Hook useEffect has a missing dependency: 'generateCards'. Either include it or remove the dependency array.",["1058"],"'Reload' is defined but never used.","'TOTAL_ROUNDS' is assigned a value but never used.","'count' is assigned a value but never used.","'setCurrentRound' is assigned a value but never used.","'resetBtnCountDown' is assigned a value but never used.","'showResetTimer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'resetGameState'. Either include them or remove the dependency array.",["1059"],"React Hook useEffect has missing dependencies: 'gameCompleted' and 'gameStart'. Either include them or remove the dependency array.",["1060"],"'resetAllBtnTime' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onReplaceAll' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'renderSideBarPinnacleSection' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'PageHeader' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'TOTAL_NUMBERS_DRAWN' is assigned a value but never used.","'ACTIVE_NUMBER' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.location.state.picks'. Either include it or remove the dependency array.",["1061"],"React Hook useEffect has a missing dependency: 'getTotalMatched'. Either include it or remove the dependency array.",["1062"],"React Hook useEffect has missing dependencies: 'counter' and 'drawnNumbersArray.length'. Either include them or remove the dependency array.",["1063"],"'startGame' is defined but never used.",["1064"],"'DragDropContext' is defined but never used.","'Draggable' is defined but never used.","'Droppable' is defined but never used.","'flushList' is defined but never used.","'hasPowerRoyalsCard' is defined but never used.","'differenceWith' is defined but never used.","'collectedCards' is assigned a value but never used.","'replaceAll' is assigned a value but never used.",["1065"],["1066"],"'_redirectTo' is assigned a value but never used.","'BoltIcon' is defined but never used.","'powerMatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1067"],"React Hook useEffect has missing dependencies: 'gameStart' and 'isGameCompleted'. Either include them or remove the dependency array.",["1068"],"'error' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like '_socket' aren't valid dependencies because mutating them doesn't re-render the component.",["1069"],"'isEmpty' is defined but never used.","'token' is assigned a value but never used.","'Fragment' is defined but never used.","'Line' is defined but never used.","'PowerPlayIcon' is defined but never used.","'Info' is defined but never used.","'SuperBall' is defined but never used.","'selectedMenu' is assigned a value but never used.","'drawnNumbers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentSec' and 'maxSec'. Either include them or remove the dependency array.",["1070"],"React Hook useEffect has a missing dependency: 'maxProgress'. Either include it or remove the dependency array.",["1071"],"'useMediaQuery' is defined but never used.","'MAX_FILL_BAR_VALUE' is assigned a value but never used.","'Component' is defined but never used.","'seconds' is assigned a value but never used.","'isActive' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array.",["1072"],"'render' is defined but never used.","'text' is assigned a value but never used.","'replace' is assigned a value but never used.","'increaseOrDecrease' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isCompleted' and 'myPowers'. Either include them or remove the dependency array.",["1073"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1074"],"'redirectTo' is defined but never used.","'Redirect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1075","fix":"1076"},{"desc":"1077","fix":"1078"},[4037,4048],"\r\n        .",{"desc":"1079","fix":"1080"},{"desc":"1081","fix":"1082"},{"desc":"1083","fix":"1084"},{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},{"desc":"1089","fix":"1090"},{"desc":"1091","fix":"1092"},{"desc":"1081","fix":"1093"},{"desc":"1094","fix":"1095"},{"desc":"1096","fix":"1097"},{"desc":"1098","fix":"1099"},{"desc":"1096","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1105","fix":"1109"},"Update the dependencies array to be: [props, user]",{"range":"1110","text":"1111"},"Update the dependencies array to be: [gameStart]",{"range":"1112","text":"1113"},"Update the dependencies array to be: [generateCards]",{"range":"1114","text":"1115"},"Update the dependencies array to be: [dispatch, resetGameState]",{"range":"1116","text":"1117"},"Update the dependencies array to be: [currentCard, currentRound, gameCompleted, gameStart, start]",{"range":"1118","text":"1119"},"Update the dependencies array to be: [props.location.state.picks]",{"range":"1120","text":"1121"},"Update the dependencies array to be: [myPickedNumbers, drawnNumbersArray, getTotalMatched]",{"range":"1122","text":"1123"},"Update the dependencies array to be: [counter, drawnNumbersArray.length, latestDrawnNumber]",{"range":"1124","text":"1125"},"Update the dependencies array to be: [loggedIn, authUser, props]",{"range":"1126","text":"1127"},{"range":"1128","text":"1117"},"Update the dependencies array to be: [currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",{"range":"1129","text":"1130"},"Update the dependencies array to be: [dispatch]",{"range":"1131","text":"1132"},"Update the dependencies array to be: [currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]",{"range":"1133","text":"1134"},{"range":"1135","text":"1132"},"Update the dependencies array to be: [currentSec, maxSec]",{"range":"1136","text":"1137"},"Update the dependencies array to be: [setOffset, circumference, progress, offset, maxProgress]",{"range":"1138","text":"1139"},"Update the dependencies array to be: [elements, selected]",{"range":"1140","text":"1141"},"Update the dependencies array to be: [isCompleted, myPowers, time]",{"range":"1142","text":"1143"},{"range":"1144","text":"1141"},[943,949],"[props, user]",[1690,1692],"[gameStart]",[1072,1074],"[generateCards]",[3637,3639],"[dispatch, resetGameState]",[3902,3936],"[currentCard, currentRound, gameCompleted, gameStart, start]",[1444,1446],"[props.location.state.picks]",[1603,1639],"[myPickedNumbers, drawnNumbersArray, getTotalMatched]",[2337,2356],"[counter, drawnNumbersArray.length, latestDrawnNumber]",[1157,1177],"[loggedIn, authUser, props]",[3000,3002],[3175,3239],"[currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",[2757,2759],"[dispatch]",[2996,3064],"[currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]",[2018,2027],[510,512],"[currentSec, maxSec]",[830,874],"[setOffset, circumference, progress, offset, maxProgress]",[561,571],"[elements, selected]",[1788,1794],"[isCompleted, myPowers, time]",[561,571]]