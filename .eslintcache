[{"/home/sulaiman/Desktop/workspace/PowerplayGames/src/index.js":"1","/home/sulaiman/Desktop/workspace/PowerplayGames/src/App.js":"2","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reportWebVitals.js":"3","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/ScrollToTop.js":"4","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SponserAContestPage/SponserAContestPage.js":"5","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerCenter.js":"6","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPlaySponsorsPage/PowerPlaySponsorsPage.js":"7","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/HomePage/HomePage.js":"8","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SelectTeams/SelectTeams.js":"9","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoPreGame/BingoPreGame.js":"10","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerBetLive/PowerBetLive.js":"11","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/CardGame/index.js":"12","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/LivePowerPlay.js":"13","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/Scrollbar.js":"14","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/InteractiveContests.js":"15","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Phone.js":"16","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Document.js":"17","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trophy.js":"18","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Search.js":"19","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trash.js":"20","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Munch.js":"21","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CheckIcon.js":"22","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header/Header.js":"23","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Footer/Footer.js":"24","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header2/Header2.js":"25","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Contest/Contest.js":"26","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ContestRules/ContestRules.js":"27","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/LiveGame/LiveGame.js":"28","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Reload.js":"29","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards.js":"30","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Billards.js":"31","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CasinoChips.js":"32","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium.js":"33","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerPlayGridRow.js":"34","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ball.js":"35","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/BasketBall.js":"36","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Hockeys.js":"37","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall.js":"38","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calender.js":"39","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock.js":"40","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Crown.js":"41","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/LeftArrow.js":"42","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Card/index.js":"43","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/GameCard/index.js":"44","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeader/index.js":"45","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Alert/index.js":"46","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Sidebar/index.js":"47","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Progress/index.js":"48","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Info.js":"49","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shuffle.js":"50","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Arrow.js":"51","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowDown.js":"52","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Tick.js":"53","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowUp.js":"54","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeaderCard/index.js":"55","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/SidebarButton/index.js":"56","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Time.js":"57","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPicks/index.js":"58","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerpickCard/index.js":"59","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/ChaseACard/index.js":"60","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/shared.js":"61","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown/index.js":"62","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock2.js":"63","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calendar2.js":"64","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium2.js":"65","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Pinnacle.js":"66","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Cell/index.js":"67","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellHigh.js":"68","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellMedium.js":"69","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellLow.js":"70","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellVeryLow.js":"71","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/index.js":"72","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Button/index.js":"73","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AngleIcon.js":"74","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Input/Input.js":"75","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Eye.js":"76","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/NoPick.js":"77","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/GetUserInfoPage/GetUserInfoPage.js":"78","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Select/Select.js":"79","/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/CheckBox/CheckBox.js":"80","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/constants.js":"81","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Replace.js":"82","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PlusAndMinus.js":"83","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Plus.js":"84","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Minus.js":"85","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/Games.js":"86","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeIconNumbers.js":"87","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeJack.js":"88","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeAce.js":"89","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeKing.js":"90","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeQueen.js":"91","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerUpPage/PowerUpPage.js":"92","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/TimerClock/TimerClock.js":"93","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/FAQ/index.js":"94","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Privacy/index.js":"95","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TrustAndSafety/index.js":"96","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountSecurity/index.js":"97","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TermsOfUse/index.js":"98","/home/sulaiman/Desktop/workspace/PowerplayGames/src/global/constants.js":"99","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/NoPick/index.js":"100","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/Hearts.js":"101","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartsIcons.js":"102","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/Spades.js":"103","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartJack.js":"104","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartKing.js":"105","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartQueen.js":"106","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartAce.js":"107","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/Diamonds.js":"108","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondIcons.js":"109","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondJack.js":"110","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondKing.js":"111","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondQueen.js":"112","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondAce.js":"113","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/Clubs.js":"114","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubIcons.js":"115","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubJack.js":"116","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubKing.js":"117","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubQueen.js":"118","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubAce.js":"119","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/index.js":"120","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ReverseTimer/ReverseTimer.js":"121","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGameBall/BingoGameBall.js":"122","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoInProgressGame/BingoInProgressGame.js":"123","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPlays/PowerPlays.js":"124","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame/BingoGame.js":"125","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame2/BingoGame2.js":"126","/home/sulaiman/Desktop/workspace/PowerplayGames/src/store.js":"127","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducer.js":"128","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/index.js":"129","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/cardGameReducer/index.js":"130","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/cardGameAction.js":"131","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Login/index.js":"132","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Input/index.js":"133","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/RoyalGame/index.js":"134","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerRoyalsGameReducer/index.js":"135","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerRoyalsActions.js":"136","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPoker/index.js":"137","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerPokerActions.js":"138","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerPokerReducer/index.js":"139","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/HomePageContentHeader/index.js":"140","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/LandingPage/index.js":"141","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballTicket.js":"142","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shape.js":"143","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballCup.js":"144","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/MegaPhone.js":"145","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Modal/index.js":"146","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountPage/index.js":"147","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/AccountInfoComponent/index.js":"148","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/index.js":"149","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ticket.js":"150","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Money.js":"151","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/ListItem.js":"152","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ResultsInfoComponent/index.js":"153","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/index.js":"154","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/ResultCard.js":"155","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/server_connection.js":"156","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/environment.js":"157","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/authReducer/index.js":"158","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/authActions.js":"159","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ProtectedRoute/index.js":"160"},{"size":598,"mtime":1609871632195,"results":"161","hashOfConfig":"162"},{"size":3645,"mtime":1611935303376,"results":"163","hashOfConfig":"162"},{"size":362,"mtime":1609871632203,"results":"164","hashOfConfig":"162"},{"size":288,"mtime":1609871632219,"results":"165","hashOfConfig":"162"},{"size":2131,"mtime":1609871632203,"results":"166","hashOfConfig":"162"},{"size":1999,"mtime":1609871632199,"results":"167","hashOfConfig":"162"},{"size":9873,"mtime":1609871632199,"results":"168","hashOfConfig":"162"},{"size":8942,"mtime":1611493715505,"results":"169","hashOfConfig":"162"},{"size":12705,"mtime":1610130428459,"results":"170","hashOfConfig":"162"},{"size":3977,"mtime":1609964161766,"results":"171","hashOfConfig":"162"},{"size":17752,"mtime":1609871632199,"results":"172","hashOfConfig":"162"},{"size":25401,"mtime":1611165300414,"results":"173","hashOfConfig":"162"},{"size":7812,"mtime":1611580070045,"results":"174","hashOfConfig":"162"},{"size":989,"mtime":1609871632219,"results":"175","hashOfConfig":"162"},{"size":9311,"mtime":1610130428459,"results":"176","hashOfConfig":"162"},{"size":1899,"mtime":1609871632195,"results":"177","hashOfConfig":"162"},{"size":1763,"mtime":1609871632195,"results":"178","hashOfConfig":"162"},{"size":1774,"mtime":1609871632195,"results":"179","hashOfConfig":"162"},{"size":784,"mtime":1609871632195,"results":"180","hashOfConfig":"162"},{"size":1035,"mtime":1609871632195,"results":"181","hashOfConfig":"162"},{"size":3363,"mtime":1609871632195,"results":"182","hashOfConfig":"162"},{"size":1054,"mtime":1609871632191,"results":"183","hashOfConfig":"162"},{"size":2799,"mtime":1611933760252,"results":"184","hashOfConfig":"162"},{"size":2017,"mtime":1611728958115,"results":"185","hashOfConfig":"162"},{"size":1026,"mtime":1609871632151,"results":"186","hashOfConfig":"162"},{"size":6463,"mtime":1609871632147,"results":"187","hashOfConfig":"162"},{"size":1770,"mtime":1609871632147,"results":"188","hashOfConfig":"162"},{"size":3644,"mtime":1609871632151,"results":"189","hashOfConfig":"162"},{"size":976,"mtime":1609871632195,"results":"190","hashOfConfig":"162"},{"size":13867,"mtime":1609871632179,"results":"191","hashOfConfig":"162"},{"size":1701,"mtime":1609871632179,"results":"192","hashOfConfig":"162"},{"size":6083,"mtime":1609871632191,"results":"193","hashOfConfig":"162"},{"size":2233,"mtime":1609871632195,"results":"194","hashOfConfig":"162"},{"size":3264,"mtime":1609871632199,"results":"195","hashOfConfig":"162"},{"size":8044,"mtime":1609871632179,"results":"196","hashOfConfig":"162"},{"size":1500,"mtime":1609871632179,"results":"197","hashOfConfig":"162"},{"size":2003,"mtime":1609871632195,"results":"198","hashOfConfig":"162"},{"size":1926,"mtime":1609871632195,"results":"199","hashOfConfig":"162"},{"size":2249,"mtime":1609871632179,"results":"200","hashOfConfig":"162"},{"size":975,"mtime":1609871632191,"results":"201","hashOfConfig":"162"},{"size":2442,"mtime":1609871632195,"results":"202","hashOfConfig":"162"},{"size":1018,"mtime":1609871632195,"results":"203","hashOfConfig":"162"},{"size":358,"mtime":1609871632147,"results":"204","hashOfConfig":"162"},{"size":6845,"mtime":1610904589977,"results":"205","hashOfConfig":"162"},{"size":1148,"mtime":1610469067232,"results":"206","hashOfConfig":"162"},{"size":449,"mtime":1610130479904,"results":"207","hashOfConfig":"162"},{"size":385,"mtime":1609871632167,"results":"208","hashOfConfig":"162"},{"size":2722,"mtime":1609871632155,"results":"209","hashOfConfig":"162"},{"size":885,"mtime":1609871632195,"results":"210","hashOfConfig":"162"},{"size":1496,"mtime":1608897280860,"results":"211","hashOfConfig":"162"},{"size":841,"mtime":1608891255247,"results":"212","hashOfConfig":"162"},{"size":674,"mtime":1609528813866,"results":"213","hashOfConfig":"162"},{"size":908,"mtime":1609871632195,"results":"214","hashOfConfig":"162"},{"size":670,"mtime":1609528813866,"results":"215","hashOfConfig":"162"},{"size":1533,"mtime":1610469067232,"results":"216","hashOfConfig":"162"},{"size":917,"mtime":1609871632167,"results":"217","hashOfConfig":"162"},{"size":2363,"mtime":1609871632195,"results":"218","hashOfConfig":"162"},{"size":12966,"mtime":1609871632199,"results":"219","hashOfConfig":"162"},{"size":463,"mtime":1609871632155,"results":"220","hashOfConfig":"162"},{"size":9105,"mtime":1610469067236,"results":"221","hashOfConfig":"162"},{"size":2763,"mtime":1611933492104,"results":"222","hashOfConfig":"162"},{"size":2041,"mtime":1609964195139,"results":"223","hashOfConfig":"162"},{"size":1439,"mtime":1609871632195,"results":"224","hashOfConfig":"162"},{"size":2735,"mtime":1609871632179,"results":"225","hashOfConfig":"162"},{"size":2924,"mtime":1609871632195,"results":"226","hashOfConfig":"162"},{"size":2329,"mtime":1609871632195,"results":"227","hashOfConfig":"162"},{"size":1496,"mtime":1609871632147,"results":"228","hashOfConfig":"162"},{"size":2699,"mtime":1609871632191,"results":"229","hashOfConfig":"162"},{"size":3125,"mtime":1609871632191,"results":"230","hashOfConfig":"162"},{"size":2912,"mtime":1609871632191,"results":"231","hashOfConfig":"162"},{"size":2433,"mtime":1609871632191,"results":"232","hashOfConfig":"162"},{"size":6794,"mtime":1609871632155,"results":"233","hashOfConfig":"162"},{"size":1153,"mtime":1611737153767,"results":"234","hashOfConfig":"162"},{"size":675,"mtime":1609871632179,"results":"235","hashOfConfig":"162"},{"size":935,"mtime":1609871632219,"results":"236","hashOfConfig":"162"},{"size":1010,"mtime":1609871632195,"results":"237","hashOfConfig":"162"},{"size":776,"mtime":1609871632195,"results":"238","hashOfConfig":"162"},{"size":6160,"mtime":1609871632199,"results":"239","hashOfConfig":"162"},{"size":416,"mtime":1609871632219,"results":"240","hashOfConfig":"162"},{"size":426,"mtime":1609871632219,"results":"241","hashOfConfig":"162"},{"size":1024,"mtime":1611933523660,"results":"242","hashOfConfig":"162"},{"size":2394,"mtime":1609871632195,"results":"243","hashOfConfig":"162"},{"size":1285,"mtime":1609871632195,"results":"244","hashOfConfig":"162"},{"size":1191,"mtime":1609871632195,"results":"245","hashOfConfig":"162"},{"size":876,"mtime":1609871632195,"results":"246","hashOfConfig":"162"},{"size":1793,"mtime":1609871632155,"results":"247","hashOfConfig":"162"},{"size":36404,"mtime":1609871632191,"results":"248","hashOfConfig":"162"},{"size":100076,"mtime":1609871632191,"results":"249","hashOfConfig":"162"},{"size":41211,"mtime":1609871632187,"results":"250","hashOfConfig":"162"},{"size":91068,"mtime":1609871632191,"results":"251","hashOfConfig":"162"},{"size":118781,"mtime":1609871632191,"results":"252","hashOfConfig":"162"},{"size":4471,"mtime":1611931549967,"results":"253","hashOfConfig":"162"},{"size":685,"mtime":1609871632175,"results":"254","hashOfConfig":"162"},{"size":1550,"mtime":1609871632199,"results":"255","hashOfConfig":"162"},{"size":1537,"mtime":1609871632203,"results":"256","hashOfConfig":"162"},{"size":1568,"mtime":1609871632203,"results":"257","hashOfConfig":"162"},{"size":1570,"mtime":1609871632195,"results":"258","hashOfConfig":"162"},{"size":1556,"mtime":1609871632203,"results":"259","hashOfConfig":"162"},{"size":49,"mtime":1609871632179,"results":"260","hashOfConfig":"162"},{"size":517,"mtime":1609871632151,"results":"261","hashOfConfig":"162"},{"size":2546,"mtime":1609871632187,"results":"262","hashOfConfig":"162"},{"size":18436,"mtime":1609871632187,"results":"263","hashOfConfig":"162"},{"size":2556,"mtime":1609871632191,"results":"264","hashOfConfig":"162"},{"size":124201,"mtime":1609871632187,"results":"265","hashOfConfig":"162"},{"size":95518,"mtime":1609871632187,"results":"266","hashOfConfig":"162"},{"size":106845,"mtime":1609871632187,"results":"267","hashOfConfig":"162"},{"size":1466,"mtime":1609871632183,"results":"268","hashOfConfig":"162"},{"size":2585,"mtime":1609871632183,"results":"269","hashOfConfig":"162"},{"size":12085,"mtime":1610290651049,"results":"270","hashOfConfig":"162"},{"size":85000,"mtime":1609871632183,"results":"271","hashOfConfig":"162"},{"size":55469,"mtime":1609871632183,"results":"272","hashOfConfig":"162"},{"size":102173,"mtime":1609871632183,"results":"273","hashOfConfig":"162"},{"size":1112,"mtime":1609871632183,"results":"274","hashOfConfig":"162"},{"size":2511,"mtime":1609871632183,"results":"275","hashOfConfig":"162"},{"size":49571,"mtime":1609871632179,"results":"276","hashOfConfig":"162"},{"size":103481,"mtime":1609871632179,"results":"277","hashOfConfig":"162"},{"size":103648,"mtime":1609871632179,"results":"278","hashOfConfig":"162"},{"size":99788,"mtime":1609871632183,"results":"279","hashOfConfig":"162"},{"size":2638,"mtime":1609871632179,"results":"280","hashOfConfig":"162"},{"size":1449,"mtime":1610290651049,"results":"281","hashOfConfig":"162"},{"size":1489,"mtime":1609871632163,"results":"282","hashOfConfig":"162"},{"size":1110,"mtime":1609964161750,"results":"283","hashOfConfig":"162"},{"size":3954,"mtime":1609964161766,"results":"284","hashOfConfig":"162"},{"size":3204,"mtime":1609871653252,"results":"285","hashOfConfig":"162"},{"size":1722,"mtime":1609871653252,"results":"286","hashOfConfig":"162"},{"size":1953,"mtime":1609964161710,"results":"287","hashOfConfig":"162"},{"size":215,"mtime":1609871632203,"results":"288","hashOfConfig":"162"},{"size":156,"mtime":1609871659436,"results":"289","hashOfConfig":"162"},{"size":351,"mtime":1611928739192,"results":"290","hashOfConfig":"162"},{"size":873,"mtime":1610290651053,"results":"291","hashOfConfig":"162"},{"size":549,"mtime":1609865705924,"results":"292","hashOfConfig":"162"},{"size":5191,"mtime":1611935821117,"results":"293","hashOfConfig":"162"},{"size":1059,"mtime":1611928739192,"results":"294","hashOfConfig":"162"},{"size":21946,"mtime":1611165300414,"results":"295","hashOfConfig":"162"},{"size":933,"mtime":1610457354281,"results":"296","hashOfConfig":"162"},{"size":656,"mtime":1610372082062,"results":"297","hashOfConfig":"162"},{"size":22805,"mtime":1611247507597,"results":"298","hashOfConfig":"162"},{"size":661,"mtime":1610993404516,"results":"299","hashOfConfig":"162"},{"size":934,"mtime":1611073163415,"results":"300","hashOfConfig":"162"},{"size":2624,"mtime":1611728466684,"results":"301","hashOfConfig":"162"},{"size":7517,"mtime":1611728466684,"results":"302","hashOfConfig":"162"},{"size":3836,"mtime":1611385615349,"results":"303","hashOfConfig":"162"},{"size":5161,"mtime":1611387041847,"results":"304","hashOfConfig":"162"},{"size":3674,"mtime":1611386691456,"results":"305","hashOfConfig":"162"},{"size":2828,"mtime":1611386915097,"results":"306","hashOfConfig":"162"},{"size":406,"mtime":1611588644128,"results":"307","hashOfConfig":"162"},{"size":2177,"mtime":1611740592887,"results":"308","hashOfConfig":"162"},{"size":1361,"mtime":1611733883949,"results":"309","hashOfConfig":"162"},{"size":1984,"mtime":1611740069965,"results":"310","hashOfConfig":"162"},{"size":3296,"mtime":1611737506028,"results":"311","hashOfConfig":"162"},{"size":3326,"mtime":1611737709187,"results":"312","hashOfConfig":"162"},{"size":746,"mtime":1611740000736,"results":"313","hashOfConfig":"162"},{"size":434,"mtime":1611746791183,"results":"314","hashOfConfig":"162"},{"size":1474,"mtime":1611743048213,"results":"315","hashOfConfig":"162"},{"size":993,"mtime":1611743495627,"results":"316","hashOfConfig":"162"},{"size":209,"mtime":1611923747350,"results":"317","hashOfConfig":"162"},{"size":165,"mtime":1611916779320,"results":"318","hashOfConfig":"162"},{"size":955,"mtime":1611926683354,"results":"319","hashOfConfig":"162"},{"size":456,"mtime":1611926830764,"results":"320","hashOfConfig":"162"},{"size":870,"mtime":1611935579030,"results":"321","hashOfConfig":"162"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},"1mum3mx",{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"324"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"324"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"375"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"324"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"324"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"428"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"431"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"434"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"434"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"324"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"324"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"324"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"324"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"324"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"324"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"324"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"324"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"324"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"324"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"324"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"324"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"324"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"324"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"324"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"324"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"324"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"324"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"324"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"324"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"324"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"324"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"324"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"324"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"324"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sulaiman/Desktop/workspace/PowerplayGames/src/index.js",[],["675","676"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/App.js",["677"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reportWebVitals.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/ScrollToTop.js",["678","679"],"import React, { useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom'\n\nconst ScrollToTop = props => {\n    const location = useLocation();\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [location])\n    return null;\n}\n\nexport default ScrollToTop;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SponserAContestPage/SponserAContestPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerCenter.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPlaySponsorsPage/PowerPlaySponsorsPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/HomePage/HomePage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/SelectTeams/SelectTeams.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoPreGame/BingoPreGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerBetLive/PowerBetLive.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/CardGame/index.js",["680","681","682","683","684","685","686"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {GetAceCardIndex, hasMaxAceCards, redirectTo} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport { IsAceCard, getRandomCard } from '../../utility/shared'\nimport { setCardState, resetCardState, cardGameInventory } from '../../actions/cardGameAction'\nimport classes from './cardGamePage.module.scss'\n\nconst TOTAL_ROUNDS = 5;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = []\nconst aceCardsArr = []\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction CardGame(props) {\n    const [cardsState, setCardsState] = useState({})\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n\n    const dispatch = useDispatch();\n    const { collectedAceCards = [],\n        inventory = {}\n    } = useSelector(state => state.cardGame)\n\n    const { replace = 0, replaceAll = 0, powerMatch = 0, increaseOrDecrease = 0 } = inventory || {}\n    \n    useEffect(() => { \n        dispatch(resetCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n        gameCompleted(timeOut);\n        \n        return function clearnup() {\n            return clearInterval(timeOut)\n        }\n    }, [currentCard, currentRound])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if(!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            timeOut = setInterval(() => {\n                gameCompleted(timeOut)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if(!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n                    if(currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                gameCompleted(timeOut)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                            resetList(aceCardsArr)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetList = (list = []) => {\n        while (list?.length > 0) {\n            list.pop()\n        }\n    }\n\n    const resetGameState = () => {\n        resetList(cardsArr)\n        resetList(aceCardsArr)\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState({})\n        setCurrentCard(_currentCard)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setIsReplaceAllState(false)\n        dispatch(setCardState([]))\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n\n        let isCardAceCompleted = updateAceCard(card)\n        if (isCardAceCompleted) {\n            //recursive call\n            return updateCardState()\n        }\n        cardsArr.push(card)\n\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n    }\n\n    const updateAceCard = (card) => {\n        if (IsAceCard(card)) {\n            const _collectedAceCards = collectedAceCards;\n            if (_collectedAceCards?.length && _collectedAceCards?.length > 0) {\n                const _aceCardInfo = _collectedAceCards?.filter(_card => _card.suit === card.suit)[0]\n                if (_aceCardInfo) {\n                    const { suit = 0, aceCards = 0 } = _aceCardInfo || {}\n                    let _aceCards = aceCards\n                    if (_aceCards === CONSTANTS.MAX_ACE_PER_CARD) {\n                        //ace cards for current suit is completed\n                        //select random card\n                        updateCardState()\n                        return true;\n                    } else {\n                        _aceCards += 1;\n                    }\n\n                    const _aceCard = {\n                        suit: suit,\n                        aceCards: _aceCards,\n                    }\n                    let cardIndex = _collectedAceCards?.indexOf(_aceCardInfo)\n                    aceCardsArr[cardIndex] = _aceCard\n                    dispatch(setCardState(aceCardsArr))   \n                } else {\n                    const _aceCard = {\n                        suit: card.suit,\n                        aceCards: 1\n                    }\n    \n                    aceCardsArr.push(_aceCard)\n                    dispatch(setCardState(aceCardsArr))\n                }\n            } else {\n                //no ace card is available in state\n                //store new ace cards to state\n                const _aceCard = {\n                    suit: card.suit,\n                    aceCards: 1\n                }\n\n                aceCardsArr.push(_aceCard)\n                dispatch(setCardState(aceCardsArr))\n            }\n        }\n\n        return false\n    }\n\n    const updateCards = (index, card) => {\n        cardsArr[index] = card\n        let isAceCompleted = updateAceCard(card)\n        if (!isAceCompleted) {\n            setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n        }\n    }\n\n    const gameCompleted = (timeOut = setInterval(null, 0)) => {\n        if (getAceCards() >= CONSTANTS.MAX_ACE_CARDS) {\n            return clearTimeout(timeOut)\n        }\n    }\n\n    const _redirectTo = (path = '/') => {\n        redirectTo(props, {path})\n    }\n\n    const getAceCards = () => {\n        let totalAces = 0;\n        if (collectedAceCards.length) {\n            totalAces = collectedAceCards?.reduce((c1, c2) => {\n                return c1 + (c2['aceCards'] || 0)\n            }, 0)\n        }\n\n        return totalAces;\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL:\n                _inventory.replaceAll = inventoryValue\n                break;\n        }\n\n        dispatch(cardGameInventory(_inventory))\n    }\n\n    \n    const onReplaceAll = () => {\n        let _replaceAll = replaceAll\n        \n        if (_replaceAll <= 0) return\n\n        _replaceAll -= 1\n        updateInventory(_replaceAll, CONSTANTS.CARD_POP_ACTIONS.REPLACE_ALL)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (cardIndex, card) => {\n        const { suit = 0, rank = 0 } = card || {}\n        let _rank = rank\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\n            return;\n        }\n\n        if (_rank !== GetAceCardIndex()) {\n            _rank += 1;\n        }\n        \n        const _card = {\n            suit: suit,\n            rank: _rank,\n        }\n\n        let _increase = increaseOrDecrease;\n        _increase -= 1;\n\n        //update the cards array in parent component\n        updateCards(cardIndex, _card)\n        updateInventory(_increase, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onReplace = (cardIndex, card) => {\n        const { rank = 0 } = card || {}\n        if (replace <= 0 || cardsState?.activeCard !== card)\n        return;\n\n        let _replace = replace;\n        _replace -= 1;\n\n        let newCard = getRandomCard();\n        if (newCard?.rank === rank) {\n            newCard = getRandomCard();\n        }\n        updateCards(cardIndex, newCard)\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n    }\n\n    const onPowerMatch = (cardIndex, card) => {\n        const { suit = 0 } = card || {}\n        if (powerMatch <= 0 || getMaxAceCardsForCardSuit(card) || cardsState?.activeCard !== card) return\n\n        let _powerMatch = powerMatch;\n        _powerMatch -= 1;\n\n        const _aceCard = {\n            suit: suit,\n            rank: GetAceCardIndex(),\n        }\n\n        updateCards(cardIndex, _aceCard)\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\n    }\n\n    const onDecrease = (cardIndex, card) => {\n        const { suit = 0, rank = 0 } = card || {}\n        let _rank = rank\n        if (getMaxAceCardsForCardSuit(card) || increaseOrDecrease <= 0 || cardsState?.activeCard !== card) {\n            return;\n        }\n\n        if (_rank > 0) {\n            _rank -= 1;\n        } else {\n            _rank = GetAceCardIndex()\n        }\n        \n        const _card = {\n            suit: suit,\n            rank: _rank,\n        }\n\n        let _decrease = increaseOrDecrease;\n        _decrease -= 1;\n\n        //update the cards array in parent component\n        updateCards(cardIndex, _card)\n        updateInventory(_decrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const getMaxAceCardsForCardSuit = (card) => {\n        const { suit = 0 } = card || {}\n        const aceCard = collectedAceCards?.filter(_card => _card?.suit === suit)[0];\n        const { aceCards = 0 } = aceCard || {}\n        if (aceCards && hasMaxAceCards(aceCards)) {\n            return true\n        }\n\n        return false\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Chase The Ace\"/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Chase the Ace!</span> Your goal is to obtain 5 Aces in order to advance\n                                to the next round! Find the Ace of Spades and win! User your <span>Powers</span> wisely!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>Hand <span>{currentRound}</span> of { TOTAL_ROUNDS }</p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={classes.__card_game_content_cards}>\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[0]?.rank] === \"A\"}\n                                    card={cardsState?.collectedCards?.[0]}\n                                    isSelected={cardsState?.collectedCards?.[0] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.collectedCards?.[0]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(0, cardsState?.collectedCards?.[0])}\n                                    onDecrease={() => onDecrease(0, cardsState?.collectedCards?.[0])}\n                                    onPowerMatch={() => onPowerMatch(0, cardsState?.collectedCards?.[0])}\n                                    onReplace={() => onReplace(0, cardsState?.collectedCards?.[0])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[1]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[1]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[1] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[1]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(1, cardsState?.collectedCards?.[1])}\n                                    onDecrease={() => onDecrease(1, cardsState?.collectedCards?.[1])}\n                                    onPowerMatch={() => onPowerMatch(1, cardsState?.collectedCards?.[1])}\n                                    onReplace={() => onReplace(1, cardsState?.collectedCards?.[1])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[2]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[2]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[2] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[2]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(2, cardsState?.collectedCards?.[2])}\n                                    onDecrease={() => onDecrease(2, cardsState?.collectedCards?.[2])}\n                                    onPowerMatch={() => onPowerMatch(2, cardsState?.collectedCards?.[2])}\n                                    onReplace={() => onReplace(2, cardsState?.collectedCards?.[2])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[3]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[3]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[3] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsArr[3]) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(3, cardsState?.collectedCards?.[3])}\n                                    onDecrease={() => onDecrease(3, cardsState?.collectedCards?.[3])}\n                                    onPowerMatch={() => onPowerMatch(3, cardsState?.collectedCards?.[3])}\n                                    onReplace={() => onReplace(3, cardsState?.collectedCards?.[3])}\n                                />\n                                <GameCard\n                                    showCardPopup={!isReplaceAll && true}\n                                    card={cardsState?.collectedCards?.[4]}\n                                    isCompleted={CONSTANTS.CARD_RANKS[cardsArr[4]?.rank] === \"A\"}\n                                    isSelected={cardsState?.collectedCards?.[4] && true}\n                                    activeCard={cardsState?.activeCard}\n                                    showPowerMatchPower={!getMaxAceCardsForCardSuit(cardsState?.activeCard) && powerMatch > 0}\n                                    showReplacePower={replace > 0}\n                                    showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                    time={time}\n                                    inventory={inventory}\n                                    onIncrease={() => onIncrease(4, cardsState?.collectedCards?.[4])}\n                                    onDecrease={() => onDecrease(4, cardsState?.collectedCards?.[4])}\n                                    onPowerMatch={() => onPowerMatch(4, cardsState?.collectedCards?.[4])}\n                                    onReplace={() => onReplace(4, cardsState?.collectedCards?.[4])}\n                                />\n                            </div>\n                            {/* <button className={`${classes.__reload_btn} ${showResetTimer && classes.active}`} onClick={onReplaceAll}\n                                disabled={!showResetTimer}\n                            >\n                                {\n                                    showResetTimer &&\n                                    <span style={{ position: 'absolute', top: '-15px', left: '50%', color: '#fff', transform: 'translateX(-50%)' }}>{ resetBtnCountDown }</span>\n\n                                }\n                                <Reload size={48} className={classes.__reload_svg_icon}/>\n                            </button> */}\n                        </Card>\n                    </div>\n\n                    <div className={classes.__card_game_content_footer}>\n                        {\n                            currentCard === 0 && time > 0 &&\n                                <>\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n                        {\n                            getAceCards() >= CONSTANTS.MAX_ACE_CARDS ?\n                                <>\n                                    <Alert success renderMsg={() => (<p>Congratulations on <strong>{ getAceCards() || 0 }</strong> Aces!</p>)} />\n                                    <button className={`__btn ${classes.__card_game_footer_btn}`}\n                                        onClick={() => _redirectTo('/chase-a-card')}>\n                                        Chase The Ace!\n                                    </button>\n                                </>\n                                :\n                                currentRound === TOTAL_ROUNDS && time <= 0 && cardsArr.length >= CONSTANTS.MAX_ACE_CARDS\n                                    ?\n                                    <Alert danger renderMsg={() => (<p>Sorry, you did not get 5 Aces. The next draw will be tomorrow at 8:00PM</p>)} />\n                                    :\n                                    <Alert primary renderMsg={() => (<p>Round { currentRound } in Progress: Aces = <strong>{getAceCards() || 0}</strong></p>)} />\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                        <div className={classes.__sidebar_header_balance}>\n                            <span>My Balance</span>\n                            <span className={classes.__sidebar_balance_text}>$0.00</span>\n                        </div>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        {/* <SidebarButton\n                            success={replaceAll > 0 ? true : false}\n                            primary={replaceAll <= 0 ? true : false}\n                            title=\"Replace All\"\n                            toolText={`${replaceAll} left`}\n                            icon={<div\n                                className={classes.__sidebar_reload_btn}>\n                                <Reload bgColor={\"#0ff\"} style={{height: 'auto'}}/>\n                            </div>}\n                        /> */}\n\n                        <SidebarButton\n                            success={powerMatch > 0 ? true : false}\n                            primary={powerMatch <= 0 ? true : false}\n                            title=\"Power Match\"\n                            toolText={`${powerMatch} left`}\n                            icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\n                        />\n\n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Move\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n\n                        {/* <SidebarButton\n                            primary\n                            title=\"Decrease\"\n                            toolText=\"$.25\"\n                            icon={<ArrowDown style={{height: 'auto'}}/>}\n                        /> */}\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nCardGame.propTypes = {}\n\nexport default withRouter(CardGame)\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/LivePowerPlay.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/Scrollbar.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/InteractiveContests.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Phone.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Document.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trophy.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Search.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Trash.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Munch.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CheckIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header/Header.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Footer/Footer.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Header2/Header2.js",[],["687","688"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Contest/Contest.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ContestRules/ContestRules.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/LiveGame/LiveGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Reload.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Billards.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CasinoChips.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerCenter/PowerPlayGridRow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ball.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/BasketBall.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Hockeys.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/SuperBall.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calender.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Crown.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/LeftArrow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Card/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/GameCard/index.js",["689","690","691","692","693"],"import React, {useEffect, useState} from 'react'\nimport PropTypes from 'prop-types'\n\nimport Replace from '../../icons/Replace'\nimport Plus from '../../icons/Plus'\nimport Minus from '../../icons/Minus'\nimport boltIcon from '../../assets/bolt.png'\nimport Tick from '../../icons/Tick'\nimport Cards from '../../icons/Cards/index'\nimport classes from \"./gameCard.module.scss\"\n\nfunction GameCard(props) {\n\n    const [showPopup, setPopupState] = useState(false)\n    const [hasReplaced, setHasReplacedState] = useState(false)\n\n    const {\n        isSelected = false,\n        showCardPopup = false,\n        isCompleted = false,\n        image = '',\n        styles = {},\n        card = {},\n        inventory: { replace = 0, powerMatch = 0, increaseOrDecrease = 0 } = {},\n        activeCard = {},\n        time = 0,\n        width = 0,\n        height = 0,\n        hoverShadow = false,\n        showPowerMatchPower = false,\n        showReplacePower = false,\n        showIncrementOrDecrementPower = false,\n        onClick = () => { },\n        onIncrease = () => { },\n        onDecrease = () => { },\n        onPowerMatch = () => { },\n        onReplace = () => { }\n    } = props || {}\n\n    useEffect(() => {\n        if (time <= 0) {\n            setHasReplacedState(false)\n            setPopupState(false)\n        }\n    }, [time])\n\n    const _onReplace = () => { \n        setHasReplacedState(true)\n    }\n\n    return (\n        <div className={`${classes.__game_card_wrapper} ${hoverShadow && classes.shadow}`} style={styles} {...props}>\n            {\n                //if rank === 12 => \"A\"\n                isCompleted &&\n                <Tick style={{\n                    height: \"auto\",\n                    position: \"absolute\",\n                    alignSelf: \"center\",\n                    transform: `translate(25%, -25%)`\n                }}/>\n            }\n            {\n                isSelected\n                    ?\n                    <div className={classes.__game_card_selected} onClick={() => {\n                        if (showCardPopup) {\n                            setPopupState(!showPopup)\n                        }\n                        onClick()\n                    }} onBlur={() => {\n                        setPopupState(false)\n                        }}>\n                        {\n                            image ?\n                                <div className={classes.__game_card_selected}>\n                                    <img src={image} style={{width: '100%', height: '100%'}}/>\n                                </div>\n                                :\n                                <Cards card={card} width={width || 130} height={height || 195} />\n                        }\n                    </div>\n                    :\n                    <div className={classes.__game_card_container}>\n                        <span>?</span>\n                    </div>\n            }\n            {\n                showPopup && activeCard === card && time > 0 &&\n                <div className={classes.__game_card_popup_container}>\n                    <div className={classes.__game_card_popup}>\n                        {\n                            isCompleted ?\n                                <span>No action required</span>\n                                :\n                                <>\n                                    {\n                                        showReplacePower || showPowerMatchPower || showIncrementOrDecrementPower\n                                            ?\n                                            <>\n                                                {\n                                                    showReplacePower && !hasReplaced &&\n                                                    <button className={classes.__btn__} onClick={() => {\n                                                        onReplace()\n                                                        _onReplace()\n                                                    }}>\n                                                        <Replace style={{height: 'auto'}} size={39}/>\n                                                    </button>\n                                                }    \n\n                                                {\n                                                    showPowerMatchPower &&\n                                                    <button className={classes.__btn__} onClick={onPowerMatch}>\n                                                        <img src={boltIcon} width={40} height={40}/>\n                                                    </button>\n                                                }\n\n                                                {\n                                                    showIncrementOrDecrementPower &&\n                                                    <>\n                                                        <button className={classes.__btn__}>\n                                                            <Plus style={{height: 'auto'}} size={39} onClick={onIncrease}/>\n                                                        </button>\n\n                                                        <button className={classes.__btn__}>\n                                                            <Minus style={{height: 'auto'}} size={39} onClick={onDecrease}/>\n                                                        </button>\n                                                    </>\n                                                }\n                                            </>\n                                            :\n                                            <span>All your Powers have been used</span>\n                                    }\n                                </>\n                        }\n                    </div>\n                </div>\n            }\n        </div>\n    )\n}\n\nGameCard.propTypes = {\n    isSelected: PropTypes.bool,\n    showCardPopup: PropTypes.bool,\n    isCompleted: PropTypes.bool,\n    image: PropTypes.string,\n    styles: PropTypes.object,\n    onClick: PropTypes.func,\n    card: PropTypes.object,\n    inventory: PropTypes.object,\n    activeCard: PropTypes.object,\n    showPowerMatchPower: PropTypes.bool,\n    showReplacePower: PropTypes.bool,\n    showIncrementOrDecrementPower: PropTypes.bool,\n    time: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    hoverShadow: PropTypes.bool,\n    onIncrease: PropTypes.func,\n    onDecrease: PropTypes.func,\n    onPowerMatch: PropTypes.func,\n    onReplace: PropTypes.func\n}\n\nexport default GameCard\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeader/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Alert/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Sidebar/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Progress/index.js",["694"],"import React, { useEffect, useState, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\nimport classes from './progressBar.module.scss';\n\nconst ProgressBar = props => {\n    const [offset, setOffset] = useState(0);\n    const circleRef = useRef(null);\n    const {\n        size = 0,\n        progress = 0,\n        maxProgress = 0,\n        strokeWidth = 0,\n        circleOneStroke = 0,\n        circleTwoStroke = 0,\n    } = props || {};\n\n    const center = size / 2;\n    const radius = size / 2 - strokeWidth / 2;\n    const circumference = 2 * Math.PI * radius;\n\n    useEffect(() => {\n        const progressOffset = ((maxProgress - progress) / maxProgress) * circumference;\n        setOffset(progressOffset);\n        circleRef.current.style = 'transition: stroke-dashoffset 850ms ease-in-out;';\n    }, [setOffset, circumference, progress, offset]);\n\n    return (\n        <>\n            <svg\n                className={classes.__svg}\n                width={size}\n                height={size}\n            >\n                <circle\n                    className={classes.__svg_circle_bg}\n                    stroke={circleOneStroke}\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                />\n                <defs>\n                    <linearGradient id=\"gradient\" x1={0} y1={0} x2={0} y2={maxProgress}>\n                        <stop offset={0} stopColor=\"#e3610a\" />\n                        <stop offset={maxProgress} stopColor={circleTwoStroke} />\n                    </linearGradient>\n                </defs>\n                <circle\n                    className={classes.__svg_circle}\n                    ref={circleRef}\n                    stroke=\"url(#gradient)\"\n                    cx={center}\n                    cy={center}\n                    r={radius}\n                    strokeWidth={strokeWidth}\n                    strokeDasharray={circumference}\n                    strokeDashoffset={offset}\n                    transform={`rotate(-90 ${center} ${center})`}\n                />\n                <text x={center} y={center} className={classes.__svg_circle_text}>\n                            {progress}\n                    </text>\n                    <text className={classes.__svg_circle_text_2} x={center} y={center + 20}>\n                            Sec\n                    </text>\n            </svg>\n        </>\n    )\n}\n\nProgressBar.propTypes = {\n    size: PropTypes.number.isRequired,\n    progress: PropTypes.number.isRequired,\n    strokeWidth: PropTypes.number.isRequired,\n    circleOneStroke: PropTypes.string.isRequired,\n    circleTwoStroke: PropTypes.string.isRequired\n}\n\nexport default ProgressBar;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Info.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shuffle.js",[],["695","696"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Arrow.js",[],["697","698"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowDown.js",[],["699","700"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Tick.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/ArrowUp.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PageHeaderCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/SidebarButton/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Time.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPicks/index.js",["701","702","703","704","705","706"],"import React, { useState } from 'react'\nimport { useMediaQuery } from 'react-responsive'\n\nimport Headers from '../../components/Header/Header'\nimport Sidebar from '../../components/Sidebar'\nimport Footer from '../../components/Footer/Footer'\nimport PowerPickCard from '../../components/PowerpickCard'\nimport ButtonDropdown from '../../components/ButtonDropdown'\nimport classes from './index.module.scss'\nimport PowerPickInfoCard from '../../components/PowerPickInfoCard'\nimport PlayerImage from '../../assets/player.png'\nimport Button from '../../components/Button'\nimport AngleIcon from '../../icons/AngleIcon'\nimport Cell from '../../components/Cell'\n\nconst listItems = [\n    { title: 'Football', value: 'football' },\n    { title: 'Basketball', value: 'basketball' }\n]\n\nfunction PowerPicksPage() {\n    const [selected, setSelected] = useState('')\n    const isTableOrMobile = useMediaQuery({query: '(max-width: 1224px)'})\n    return (\n        <>\n            <Headers />\n            <div className={classes.wrapper}>\n                <div className={classes.page_left}>\n                    <div className={classes.header}>\n                        <div className={classes.header_top}>\n                            <h1><span className={classes.h1_orange}>Power</span><span>Picks</span></h1>\n                            <p>Power up your sports bets with our proven winning system!</p>\n                        </div>\n\n                        <div className={classes.header_bottom}>\n                            {\n                                !isTableOrMobile ?\n                                    <>\n                                        <PowerPickCard shadow>\n                                            <p>Spread</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n\n                                        <PowerPickCard shadow>\n                                            <p>Winner</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n\n                                        <PowerPickCard shadow>\n                                            <p>Over/Under</p>\n                                            <span>54%</span>\n                                        </PowerPickCard>\n                                    </>\n                                    :\n                                    <div className={classes.header_bottom_mobile}>\n                                    <PowerPickCard shadow styles={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', fontSize: '16px'}}>\n                                        <div>\n                                            <p>Spread</p>\n                                            <span>54%</span>\n                                        </div>\n\n                                        <div>\n                                            <p>Winner</p>\n                                            <span>54%</span>\n                                        </div>\n\n                                        <div>\n                                            <p>Over/Under</p>\n                                            <span>54%</span>\n                                        </div>\n                                        </PowerPickCard>\n                                    </div>    \n                            }\n                        </div>\n                    </div>\n\n                    <div className={classes.content_left}>\n                        <div className={classes.content_header}>\n                            <div className={classes.content_header_left}>\n                                <p>Show Decimal Odds</p>\n                                {\n                                    isTableOrMobile &&\n                                        <p>Confidence Levels</p>\n                                }\n                            </div>\n\n                            <div className={classes.content_header_right}>\n                                <ButtonDropdown elements={listItems} selected={listItems[0]} onChange={(e) => {\n                                    setSelected(e?.target?.value)\n                                    }} isActive styles={{margin: '0 5px'}} />\n                                \n                                <Button title=\"NHL\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"NBA\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"NFL\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n\n                                <Button title=\"MLB\" styles={{\n                                    width: isTableOrMobile ? '98%' : '90px',\n                                    backgroundColor: '#303133',\n                                    border: '1px solid #fff',\n                                    borderRadius: '12px', margin: '0 4px',\n                                    margin: '0 3px'\n                                }} />\n                            </div>\n                        </div>\n                    \n                        <div className={classes.content_body}>\n                            {\n                                !isTableOrMobile ?\n                                    <PowerPickCard styles={{width: '100%'}}>\n                                        <PowerPickInfoCard\n                                            showHeader\n                                            game1={{\n                                                isCell: true,\n                                                cellTitle: \"Bengals +3.5\",\n                                                highCell: true,\n                                             }}\n                                            game2={{\n                                                isCell: true,\n                                                cellTitle: \"Saints to Win\",\n                                                mediumCell: true,\n                                            }}\n                                            game3={{\n                                                isCell: true,\n                                                cellTitle: \"U 45.5\",\n                                                veryLowCell: true,\n                                            }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                    </PowerPickCard>\n                                    :\n                                    <>\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isCell: true,\n                                                cellTitle: \"Bengals +3.5\",\n                                                highCell: true,\n                                            }}\n                                            game2={{\n                                                isCell: true,\n                                                cellTitle: \"Saints to Win\",\n                                                mediumCell: true,\n                                            }}\n                                            game3={{\n                                                isCell: true,\n                                                cellTitle: \"U 45.5\",\n                                                veryLowCell: true,\n                                            }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                        <PowerPickInfoCard\n                                            game1={{\n                                                isPowerUp: true,\n                                             }}\n                                             game2={{\n                                                isPowerUp: true,\n                                             }}\n                                             game3={{\n                                                isPowerUp: true,\n                                             }}\n                                        />\n                                    </>\n                            }\n                        </div>\n                        <div className={classes.content_body_footer}>\n                            <strong>Log in to reveal <span>More Picks!</span> </strong>\n                            <Button title=\"Log in\" icon={null} block style={{width: isTableOrMobile ? '80%' : '30%', height: '52px'}} />\n\n                            {\n                                !isTableOrMobile &&\n                                <div className={classes.content_body_footer_bottom}>\n                                    <AngleIcon style={{height: 'auto', position: 'absolute', bottom: '10px', left: '20px', zIndex: '-1'}} />\n                                    <img src={PlayerImage} width={316} height={330} />\n                                </div>\n                            }\n                        </div>\n                    </div>\n                </div>\n\n                {\n                    !isTableOrMobile &&\n                        <div className={classes.page_sidebar}>\n                        <Sidebar styles={{width: '18%'}}>\n                            <div className={classes.sidebar}>\n                                <h2>Confidence Level</h2>\n                                <Cell high text=\"HIGH\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell medium text=\"MEDIUM\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell low text=\"LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                                <Cell veryLow text=\"VERY LOW\" styles={{ display: 'flex', justifyContent: 'center', padding: 0, margin: 0 }} />\n                            </div>\n                        </Sidebar>\n                        </div>\n                }\n            </div>\n            <Footer isBlack />\n        </>\n    )\n}\n\nexport default PowerPicksPage\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerpickCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/ChaseACard/index.js",["707","708"],"import React, {useState, useEffect} from 'react'\n\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport CardsSvg from '../../icons/Cards'\nimport CardBack from '../../assets/card_back.png'\nimport ProgressBar from '../../components/Progress'\nimport { CONSTANTS } from '../../utility/constants'\nimport Alert from '../../components/Alert'\nimport classes from './cardGamePage.module.scss'\nimport { redirectTo } from '../../utility/shared'\n\n// const MAX_TIMER = 5;\n\nfunction ChaseACard(props) {\n    // const [timer, setTimer] = useState(MAX_TIMER)\n    const [cards, setCards] = useState([])\n    const [hasWon, setHasWonState] = useState(false)\n    const [hasCardSelected, setHasCardSelected] = useState(false)\n    const [spadeCardIndex, setSpadeCardIndex] = useState(null)\n\n    useEffect(() => {\n        resetAllState()\n        generateCards()\n    }, [])\n\n    // useEffect(() => {\n    //     let timeOut = null\n    //     if (timer > 0 && hasCardSelected) {\n    //     let _timer = timer\n    //         timeOut = setInterval(() => { \n    //             _timer -= 1\n    //             setTimer(_timer)\n    //         }, 1000)\n    //     } else {\n    //         clearInterval(timeOut)\n    //     }\n\n    //     return () => {\n    //         return clearInterval(timeOut)\n    //     }\n    //  }, [timer, hasCardSelected])\n\n    function resetAllState() {\n        // setTimer(MAX_TIMER)\n        setCards([])\n        setSpadeCardIndex(null)\n        setHasCardSelected(false)\n        setHasWonState(false)\n    }\n\n    function onCardClick (card, index) {\n        if(hasWon || hasCardSelected) return\n\n        const { isSelected = false, card: { suit, rank } = {} } = card || {}\n        \n        let _isSelected = isSelected\n        _isSelected = true;\n        card.isSelected = _isSelected\n\n        const _selectedCards = [...cards]\n        _selectedCards[index] = card\n\n        setHasCardSelected(true)\n        setCards(_selectedCards)\n\n        if (suit === CONSTANTS.CARD_SUITS.SPADE && CONSTANTS.CARD_RANKS[rank] === \"A\") {\n            return setHasWonState(true)\n        }\n     }\n\n    function generateCards() {\n        const _cards = []\n        for (let suit = 1; suit <= 4; suit++) {\n            for (let rank = 0; rank < 13; rank++) {\n                const _card = {}\n                _card.card = card(suit, rank)\n                _card.isSelected = false\n                _cards.push(_card)\n            }\n        }\n\n        shuffleCards(_cards)\n        let spadeOfAceIndex = _cards.findIndex(_card => _card?.card?.suit === CONSTANTS.CARD_SUITS.SPADE && _card?.card?.rank === 12)\n        setSpadeCardIndex(spadeOfAceIndex)\n        setCards(_cards)\n    }\n\n    function shuffleCards(cards = []) {\n        for (let i = cards.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [cards[i], cards[j]] = [cards[j], cards[i]]\n        }\n    }\n\n    function onRevealCard() {\n        if(hasWon) return\n\n        let spadeOfAce = cards[spadeCardIndex]\n        const revealCard = {\n            card: spadeOfAce?.card,\n            isSelected: true\n        }\n\n        const _cards = [...cards]\n        _cards[spadeCardIndex] = revealCard\n        setCards(_cards)\n    }\n\n    function card(suit, rank) {\n        return {\n            suit,\n            rank\n        }\n    }\n\n    return (\n        <>\n            <Header />\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Chase The Ace\" />\n                    <div className={classes._card_game_content_top}>\n                            <CardsSvg style={{display: 'flex', height: 'auto'}} />\n                        <p className={classes.__card_game_card_counter}>Chase The Ace Round</p>\n                        <p className={classes.__card_game_info}> Select one card and if it's the Ace of Spades, you win $2000 CAD! </p>\n                    </div>\n\n                    <div className={`${classes.__card_game_content_body}`}>\n                        {\n                            hasCardSelected &&\n                            <div className={`${classes.__card_game_content_game_end} ${hasWon ? classes.__card_game_content_game_end_success : classes.__card_game_content_game_end_failed}`}\n                                onClick={onRevealCard}\n                            >\n                                    <Alert danger={!hasWon} success={hasWon} renderMsg={() => (\n                                        <p style={{ fontWeight: 'bold', fontSize: '18px' }}>\n                                            {hasWon ? `Congratulations! You are a winner!` : `Sorry, you did not find the Ace of Spade. Try again tomorrow at 8:00PM ET.`}\n                                        </p>)\n                                }   />\n                                </div>\n                        }\n                        <Card>\n                            <p>\n                                Ace of Spade Located At Number: {spadeCardIndex + 1}\n                                <br /> Note: For testing purpose only\n                            </p>\n                            {\n                                // hasCardSelected &&\n                                // <div className={`${classes.__card_game_timer_wrapper} ${classes.dashed_repeating_gradient}`}>\n                                //     <ProgressBar\n                                //         progress={timer}\n                                //         maxProgress={5}\n                                //         size={62}\n                                //         strokeWidth={4}\n                                //         circleOneStroke='grey'\n                                //         circleTwoStroke='#fff'\n                                //     />\n                                //     <p>\n                                //         Want another chance? \n                                //     </p>\n                                //     <button className={`${'__btn __style-3 __large-btn'} ${classes.__card_game_card_top_btn}`}>\n                                //         <span>$5.00</span> Activate Pick +\n                                //     </button>\n                                //     <strong>\n                                //         Activate for Free\n                                //     </strong>\n                                // </div>\n                            }\n                            <div className={classes.__card_game_content_cards}>\n                                {\n                                    cards.map(\n                                        (card, index) => {\n                                            const { card: selectedCard = {}, isSelected: isCardSelected = false } = card || {}\n                                            return (\n                                                <GameCard\n                                                    key={card + index.toString()}\n                                                    isSelected\n                                                    card={selectedCard}\n                                                    image={!isCardSelected ? CardBack : null}\n                                                    onClick={() => onCardClick(card, index)}\n                                                    styles={{\n                                                        width: '76px',\n                                                        height: '104px',\n                                                        margin: '5px 3.5px'\n                                                    }}\n                                                    width={76}\n                                                    height={104}\n                                                    hoverShadow={!isCardSelected}\n                                                />\n                                            )\n                                        }\n                                    )\n                                }\n                            </div>\n                            {\n                                hasCardSelected && !hasWon &&\n                                <div className={classes.card_footer}>\n                                    <button className={`${'__btn'}`} onClick={() => {\n                                        return redirectTo(props, {\n                                            path: '/card-game'\n                                        })\n                                    }}>\n                                        Try again\n                                    </button>\n                                </div>\n                            }\n                        </Card>\n                    </div>                \n                </div>  \n            </div>\n            <Footer isBlack />\n        </>\n    )\n}\n\nexport default ChaseACard\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/shared.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ButtonDropdown/index.js",["709"],"import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport classes from './index.module.scss'\n\nfunction ButtonDropdown(props) {\n    const [isVisible, setVisibleState] = useState(false)\n    const [_selected, setSelected] = useState({})\n    const { elements = [], selected = {}, onChange = () => { }, isActive = false, styles = {} } = props || {}\n\n    useEffect(() => {\n        if(!selected && elements.length)\n            onSelectListItem(elements[0])\n        else \n            onSelectListItem(selected)\n    }, [selected])\n\n    const toggleList = () => {\n        setVisibleState(!isVisible)\n    }\n\n    const onSelectListItem = (item) => {\n        setSelected(item)\n        setVisibleState(false)\n    }\n\n\n    return (\n        <div className={`${classes.select_container_1} ${isActive && classes.selected}`} style={styles}>\n            <div className={classes.select_header}>\n                <button onClick={toggleList}>\n                    <span>NCCA</span> <br /> {_selected?.title}\n                </button>\n            </div>\n\n        {\n            isVisible &&\n                <div className={classes.select_body}>\n                    {\n                        elements.length && elements.map((itm, index) => <button\n                            key={itm.title + index.toString()}\n                            className={`${index !== elements.length - 1 && classes.divider} ${index === 0 && classes.borderRadiusTop} \n                            ${index === elements.length - 1 && classes.borderRadiusBottom}`} onClick={() => {\n                                onSelectListItem(itm)\n                                onChange(itm)\n                            }}>\n                            {itm.title}</button>)\n                    }\n                </div>\n\n        }\n        </div>\n    )\n}\n\nButtonDropdown.propTypes = {\n    elements: PropTypes.array,\n    selected: PropTypes.object,\n    isActive: PropTypes.bool,\n    onChange: PropTypes.func,\n    styles: PropTypes.object\n}\n\nexport default ButtonDropdown\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Clock2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Calendar2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Stadium2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Pinnacle.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Cell/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellHigh.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellMedium.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellLow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/CellVeryLow.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Button/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AngleIcon.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Input/Input.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Eye.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/NoPick.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/GetUserInfoPage/GetUserInfoPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/Select/Select.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/ui/CheckBox/CheckBox.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/utility/constants.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Replace.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/PlusAndMinus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Plus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Minus.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPickInfoCard/Games.js",["710","711"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useMediaQuery } from 'react-responsive'\nimport { useHistory } from 'react-router-dom'\n\nimport NoPick from '../NoPick'\nimport Cell from '../Cell'\nimport Button from '../Button'\nimport NoPickIcon from '../../icons/NoPick'\nimport { redirectTo } from '../../utility/shared'\nimport { Redirect } from 'react-router-dom'\n\nfunction Games(props) {\n    const {\n        isNoPick = false,\n        cellTitle = '',\n        isPowerUp = false,\n        isCell = false,\n        mediumCell = false,\n        highCell = false,\n        lowCell = false,\n        veryLowCell = false,\n        onPowerUp = () => { }\n    } = props || {}\n    const isTableOrMobile = useMediaQuery({ query: '(max-width: 1224px)' })\n    const history = useHistory()\n    return (\n        <>\n            {\n                isNoPick &&\n                    <NoPick icon={<NoPickIcon style={{height: 'auto'}} size={isTableOrMobile && 33} />} />\n            }\n            \n            {\n                isCell &&\n                    <Cell high={highCell} medium={mediumCell} low={lowCell} veryLow={veryLowCell} text={cellTitle} size={isTableOrMobile && 33} />\n            }\n\n            {\n                isPowerUp &&\n                <Button title=\"POWER UP!\" onClick={() => {\n                    onPowerUp()\n                    history.push(\"/power-up\")\n                }} styles={{ width: '100px', fontSize: '13px' }} />\n            }\n        </>\n    )\n}\n\nGames.propTypes = {\n    isNoPick: PropTypes.bool,\n    isCell: PropTypes.bool,\n    isPowerUp: PropTypes.bool,\n    cellTitle: PropTypes.string,\n    mediumCell: PropTypes.bool,\n    highCell: PropTypes.bool,\n    lowCell: PropTypes.bool,\n    veryLowCell: PropTypes.bool,\n    onPowerUp: PropTypes.func\n}\n\nexport default Games","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeIconNumbers.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/SpadeQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerUpPage/PowerUpPage.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/TimerClock/TimerClock.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/FAQ/index.js",["712"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from \"../../components/Header/Header\";\nimport PageHeader from \"../../components/PageHeader\";\nimport Footer from \"../../components/Footer/Footer\";\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass FAQ extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=3\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          result = result.records;\n          this.setState({\n            content: result[2].content,\n          });\n        },\n        (error) => {\n          this.setState({\n            hasError: true,\n            error: error,\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>FAQ</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(FAQ);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Privacy/index.js",["713"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\n\nclass ResponsibleGaming extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=2\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[1].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n       <Header />\n\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>Privacy Policy</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div className=\"_faq_cont\"\n                dangerouslySetInnerHTML={{ __html: this.state.content }} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ResponsibleGaming);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TrustAndSafety/index.js",["714"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass TrustAndSafety extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=4\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[3].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>TRUST AND SAFETY</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TrustAndSafety);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountSecurity/index.js",["715"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass AccountSecurity extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=5\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[4].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>ACCOUNT SECURITY</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurity);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/TermsOfUse/index.js",["716"],"import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport Footer from '../../components/Footer/Footer'\nimport \"./index.css\";\nimport * as Constants from \"../../global/constants.js\";\nclass TermsOfUse extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://\" + Constants.URL + \"/api/website_footer/getone.php?id=1\")\n      .then(res => res.json())\n      .then(\n        result => {\n          result = result.records;\n          this.setState({\n            content: result[0].content\n          });\n        },\n        error => {\n          this.setState({\n            hasError: true,\n            error: error\n          });\n        }\n      );\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid _faq_wrap\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1>Terms Of Use</h1>\n              </div>\n              <div className=\"col-md-12\">\n                <div\n                  className=\"_faq_cont\"\n                  dangerouslySetInnerHTML={{ __html: this.state.content }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(TermsOfUse);\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/global/constants.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/NoPick/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/Hearts.js",["717"],"import React from 'react';\n\nimport { HeartsIcons } from './HeartsIcons'\nimport HeartJack from './HeartJack'\nimport HeartKing from './HeartKing';\nimport HeartQueen from './HeartQueen';\nimport HeartAce from './HeartAce';\n\nconst Hearts = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return HeartsIcons.twos()\n            \n            case \"3\":\n                return HeartsIcons.threes()\n            \n            case \"4\":\n                return HeartsIcons.fours()\n            \n            case \"5\":\n                return HeartsIcons.fives()\n            \n            case \"6\":\n                return HeartsIcons.sixs()\n            \n            case \"7\":\n                return HeartsIcons.sevens()\n            \n            case \"8\":\n                return HeartsIcons.eights()\n            \n            case \"9\":\n                return HeartsIcons.nines()\n            \n            case \"10\":\n                return HeartsIcons.tens()\n            \n            case \"J\":\n                return <HeartJack />\n            \n            case \"K\":\n                return <HeartKing />\n            \n            case \"A\":\n                return <HeartAce />\n            \n            case \"Q\":\n                return <HeartQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"15\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-90\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Hearts;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartsIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Spade/Spades.js",["718"],"import React from 'react';\n\nimport { SpadeNumbers } from './SpadeIconNumbers'\nimport SpadeKing from './SpadeKing';\nimport SpadeJack from './SpadeJack';\nimport SpadeQueen from './SpadeQueen';\nimport SpadeAce from './SpadeAce';\n\nconst Spades = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return SpadeNumbers.twos()\n            \n            case \"3\":\n                return SpadeNumbers.threes()\n            \n            case \"4\":\n                return SpadeNumbers.fours()\n            \n            case \"5\":\n                return SpadeNumbers.fives()\n            \n            case \"6\":\n                return SpadeNumbers.sixs()\n            \n            case \"7\":\n                return SpadeNumbers.sevens()\n            \n            case \"8\":\n                return SpadeNumbers.eights()\n            \n            case \"9\":\n                return SpadeNumbers.nines()\n            \n            case \"10\":\n                return SpadeNumbers.tens()\n            \n            case \"J\":\n                return <SpadeJack />\n            \n            case \"K\":\n                return <SpadeKing />\n            \n            case \"A\":\n                return <SpadeAce />\n            \n            case \"Q\":\n                return <SpadeQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Spades;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Hearts/HeartAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/Diamonds.js",["719"],"import React from 'react';\nimport DiamondAce from './DiamondAce';\n\nimport { DiamondIcons } from './DiamondIcons'\nimport DiamondJack from './DiamondJack';\nimport DiamondKing from './DiamondKing'\nimport DiamondQueen from './DiamondQueen';\n\nconst Diamonds = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return DiamondIcons.twos()\n            \n            case \"3\":\n                return DiamondIcons.threes()\n            \n            case \"4\":\n                return DiamondIcons.fours()\n            \n            case \"5\":\n                return DiamondIcons.fives()\n            \n            case \"6\":\n                return DiamondIcons.sixs()\n            \n            case \"7\":\n                return DiamondIcons.sevens()\n            \n            case \"8\":\n                return DiamondIcons.eights()\n            \n            case \"9\":\n                return DiamondIcons.nines()\n            \n            case \"10\":\n                return DiamondIcons.tens()\n            \n            case \"J\":\n                return <DiamondJack />\n            \n            case \"K\":\n                return <DiamondKing />\n            \n            case \"A\":\n                return <DiamondAce />\n            \n            case \"Q\":\n                return <DiamondQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#DF3439\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Diamonds;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Diamond/DiamondAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/Clubs.js",["720"],"import React from 'react';\nimport ClubAce from './ClubAce';\n\nimport { ClubIcons } from './ClubIcons'\nimport ClubJack from './ClubJack';\nimport ClubKing from './ClubKing';\nimport ClubQueen from './ClubQueen';\n\nconst Clubs = props => {\n    const renderCards = (value) => {\n        let _value = value.toString();\n        switch(_value) {\n            case \"2\":\n                return ClubIcons.twos()\n            \n            case \"3\":\n                return ClubIcons.threes()\n            \n            case \"4\":\n                return ClubIcons.fours()\n            \n            case \"5\":\n                return ClubIcons.fives()\n            \n            case \"6\":\n                return ClubIcons.sixs()\n            \n            case \"7\":\n                return ClubIcons.sevens()\n            \n            case \"8\":\n                return ClubIcons.eights()\n            \n            case \"9\":\n                return ClubIcons.nines()\n            \n            case \"10\":\n                return ClubIcons.tens()\n            \n            case \"J\":\n                return <ClubJack />\n            \n            case \"K\":\n                return <ClubKing />\n            \n            case \"A\":\n                return <ClubAce />\n            \n            case \"Q\":\n                return <ClubQueen />\n                \n        }\n    }\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props?.width || \"73\"} height={props?.height || \"104\"} viewBox=\"0 0 73 104\" {...props}>\n            <g fill=\"none\" fillRule=\"evenodd\" transform=\"translate(0 1)\">\n                <rect width=\"72.432\" height=\"101.162\" x=\".211\" y=\".211\" fill=\"#F9F9F8\" fillRule=\"nonzero\" stroke=\"#1D1D1B\" strokeWidth=\".25\" rx=\"3.54\" />\n                {\n                    renderCards(props?.value)\n                }\n            </g>\n            {\n                props?.value !== \"A\" && props?.value !== \"Q\" && props?.value !== \"K\" && props?.value !== \"J\" &&\n                <>\n                    <text x={props?.value?.length === 1 ? \"1.5\" : \"0\"} y=\"17\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif' }}>\n                        {props?.value}\n                    </text>\n\n                    <text x={props?.value?.length === 1 ? \"-70\" : \"-72.5\"} y=\"-88\" fill=\"#010000\" style={{ fontSize: '12px', fontFamily: 'arial, sans-serif', transform: 'rotate(180deg)' }}>\n                        {props?.value}\n                    </text>\n                </>\n            }\n        </svg>\n    )\n}\n\nexport default Clubs;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubIcons.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubJack.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubKing.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubQueen.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/Club/ClubAce.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Cards/index.js",["721"],"import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CONSTANTS } from '../../utility/constants'\nimport Clubs from './Club/Clubs';\nimport Spade from './Spade/Spades';\nimport Hearts from './Hearts/Hearts';\nimport Diamonds from './Diamond/Diamonds';\n\nfunction Cards(props) {\n    const { card: { suit = 0, rank = 0 } = {} } = props || {}\n    \n    const renderCard = (suit, rank) => {\n        let _rank = CONSTANTS.CARD_RANKS[rank]\n        switch (suit) {\n            case CONSTANTS.CARD_SUITS.DIAMOND:\n                return <Diamonds style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.CLUB:\n                return <Clubs style={{height: 'auto', margin: '0', padding: '0'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.HEART:\n                return <Hearts style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n\n            case CONSTANTS.CARD_SUITS.SPADE:\n                return <Spade style={{height: 'auto'}} width={130} height={195} value={`${_rank}`} />\n        }\n    }\n\n    return (\n        <>\n          {renderCard(suit, rank)}  \n        </>\n    )\n}\n\nCards.propTypes = {\n    card: PropTypes.object\n}\n\nexport default Cards\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ReverseTimer/ReverseTimer.js",["722"],"import React, { useEffect, useState } from 'react';\nimport './ReverseTimer.scss';\n\nconst ReverseTimer = props => {\n    const { maxSec = 5, className } = props;\n    const [currentSec, setCurrentSec] = useState(maxSec);\n    useEffect(() => {\n        let initialTimer = maxSec;\n        const timer = setInterval(() => {\n            if (initialTimer <= 0) return clearInterval(timer);\n            setCurrentSec(--initialTimer);\n        }, 1000);\n        return () => clearInterval(currentSec);\n    }, [])\n    return (\n        <div className={`base-timer __relative ${className}`}>\n            <svg viewBox=\"0 0 100 100\" className='__primary-color'>\n                <g className=\"base-timer__circle\">\n                    <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\n                    <path\n                        strokeDasharray={`${(maxSec - currentSec) / maxSec * 283} 283`}\n                        className=\"base-timer__path-remaining\"\n                        d=\"\n                        M 50, 50\n                        m -45, 0\n                        a 45,45 0 1,0 90,0\n                        a 45,45 0 1,0 -90,0\n                    \"\n                    ></path>\n                </g>\n            </svg>\n            <div className='__absolute __time-left __center'>\n                <span className='__h5 __bold'>{currentSec}</span>\n                <div className='__smaller'>Sec</div>\n            </div>\n        </div >\n    )\n}\n\nexport default ReverseTimer;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGameBall/BingoGameBall.js",["723"],"import React, { useState } from 'react';\nimport './BingoGameBall.scss';\nimport ShuffleIcon from '../../assets/ShuffleIcon.png';\nimport ReplaceAllIcon from '../../assets/ReplaceAllIcon.png';\nimport PowerMatchIcon from '../../assets/PowerMatchIcon.png';\nimport IncreaseIcon from '../../assets/IncreaseIcon.png';\nimport DecreaseIcon from '../../assets/DecreaseIcon.png';\n\nconst BingoGameBall = props => {\n    const [isActive, setActive] = useState(props.active || false)\n    return (\n        <div className={`__BingoGameBall __relative __flex __flex-center ${isActive ? 'active' : ''}`} onClick={() => setActive(old => !old)}>\n            <div className='__ball-number __flex __flex-center __absolute'>{props.children}</div>\n            <div className='__absolute __ball-actions-wrapper __primary-color'>\n                <div className='__triangle __absolute'></div>\n                <div className='__flex __ball-actions'>\n                    <img alt='' src={ShuffleIcon} />\n                    <img src={ReplaceAllIcon} alt='' />\n                    <img src={PowerMatchIcon} alt='' />\n                    <img src={IncreaseIcon} alt='' />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BingoGameBall;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/BingoInProgressGame/BingoInProgressGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/PowerPlays/PowerPlays.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame/BingoGame.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BingoGame2/BingoGame2.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/store.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducer.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/cardGameReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/cardGameAction.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/Login/index.js",["724"],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Input/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/RoyalGame/index.js",["725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\n\nimport {flushList, getIndexOfArrayElement, hasPowerRoyalsCard, isPowerRoyalCard, royalFlush, redirectTo} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport { getRandomCard } from '../../utility/shared'\nimport {\n    setPowerCardState,\n    resetPowerRoyalsCardState,\n    powerRoyalsGameInventory\n} from '../../actions/powerRoyalsActions'\nimport { differenceWith, isEmpty, isEqual } from 'lodash'\nimport classes from './cardGamePage.module.scss'\n\nconst INITIAL_STATE = {\n    collectedCards: [{}, {}, {}, {}, {}],\n    activeCard: {}\n}\nconst TOTAL_ROUNDS = 2;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = [{}, {}, {}, {}, {}]\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction PowerRoyalsGame(props) {\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\n    const [isDroppable, setIsDroppable] = useState(false)\n    const [isRoundCompleted, setIsRounCompleted] = useState(false)\n    const [isGameCompleted, setGameCompleted] = useState(false)\n\n    const dispatch = useDispatch();\n    const { collectedCards = [],\n        inventory = {}\n    } = useSelector(state => state.powerRoyals)\n\n    const {\n        replace = 0, replaceAll = 0, newHands = 0,\n        powerMatch = 0, increaseOrDecrease = 0\n    } = inventory || {}\n    \n    useEffect(() => { \n        dispatch(resetPowerRoyalsCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n        \n        return function clearnup() {\n            return clearInterval(timeOut)\n        }\n    }, [currentCard, currentRound, selectedRoundCard, isRoundCompleted])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if (!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            hasRoundCompleted()\n            timeOut = setInterval(() => {\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n\n                    if (!isDroppable && _currentCard >= 4) {\n                        setIsDroppable(true)\n                    } \n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else if (isRoundCompleted) {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetGameState = () => {\n        for (let i = 0; i < 5; i++) {\n            cardsArr[i] = {}\n        }\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState(INITIAL_STATE)\n        setCurrentCard(_currentCard)\n        setIsDroppable(false)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setIsReplaceAllState(false)\n        setSelectedRoundCard(null)\n        dispatch(setPowerCardState([]))\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n        \n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\n            setSelectedRoundCard(card)\n        }\n        \n        \n        if (hasCardAlreadyExistInArray(card)) {\n            return updateCardState()\n        }\n        // cardsArr.push(card)\n        \n        if (!isEmpty(cardsArr[currentCard])) {\n            //find and empty index and place the card at that index\n            let emptyIndex = cardsArr?.findIndex((c) => Object.keys(c)?.length === 0)\n            cardsArr[emptyIndex] = card;\n        } else {\n            cardsArr[currentCard] = card;\n        }\n\n        onCardCompleted(card)\n\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: card})\n    }\n\n    const _redirectTo = (path = '/') => {\n        redirectTo(props, {path})\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\n                _inventory.newHands = inventoryValue\n                break;\n        }\n\n        dispatch(powerRoyalsGameInventory(_inventory))\n    }\n\n    const onReplaceAll = () => {\n        let _newHands = newHands\n        if (_newHands <= 0) return\n\n        _newHands -= 1\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n        \n        _increaseOrDecrease -= 1;\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            _rank += 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            newCard.rank = newCard?.rank + 1;\n        }\n        cardsArr[cardIndex] = newCard\n        // otherPowerCardMatch(newCard, cardIndex)\n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n        hasRoundCompleted()\n    }\n\n    const onDecrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n\n        _increaseOrDecrease -= 1\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            _rank -= 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        if (hasCardAlreadyExistInArray(newCard) && CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            newCard.rank = newCard?.rank - 1;\n        }\n        cardsArr[cardIndex] = newCard\n        // otherPowerCardMatch(newCard, cardIndex)\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n        hasRoundCompleted()\n    }\n\n    const onPowerMatch = (card, cardIndex) => {\n        let _powerMatch = powerMatch\n        if (powerMatch <= 0) {\n            return\n        }\n\n        _powerMatch -= 1;\n        \n        const powerRyalCards = royalFlush(selectedRoundCard?.suit)\n        \n        cardsArr[cardIndex] = powerRyalCards[cardIndex]\n        \n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: powerRyalCards[cardIndex] })\n        updateInventory(_powerMatch, CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH)\n        hasRoundCompleted()\n    }\n\n    const onReplace = (card, cardIndex) => {\n        let _replace = replace\n        if (replace <= 0) {\n            return\n        }\n\n        _replace -= 1\n\n        let newCard = getRandomCard();\n        if (isEqual(newCard, card) || hasCardAlreadyExistInArray(newCard)) {\n            newCard = getRandomCard();\n        }\n\n        if (currentCard === 1 && card === cardsState?.activeCard) {\n            setSelectedRoundCard(newCard)\n        }\n        otherPowerCardMatch(newCard, cardIndex)\n        \n\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n        hasRoundCompleted()\n    }\n\n    const onCardCompleted = (card) => {\n        const { rank = 0, suit = 0 } = card || {}\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : suit);\n\n        const [foundCard] = isPowerRoyalCard(suit, rank, powerCardsList);\n\n        if (!foundCard) return;\n\n        setMatchCard(foundCard, currentCard, powerCardsList)\n    }\n\n    const otherPowerCardMatch = (card, cardIndex) => {\n        const powerCardsList = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : card?.suit);\n        const [foundCard] = isPowerRoyalCard(card?.suit, card?.rank, powerCardsList);\n\n        if (foundCard) {\n            setMatchCard(foundCard, cardIndex, powerCardsList)\n        } else {\n            cardsArr[cardIndex] = card;\n        }\n    }\n\n    const setMatchCard = (card, index, list) => {\n        let indexOfCard = getIndexOfArrayElement(card, list)\n        cardsArr[index] = cardsArr[indexOfCard]\n        cardsArr[indexOfCard] = card\n    }\n\n    const hasCardAlreadyExistInArray = (card) => {\n        const [alreadyExistsCard] = cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\n        return alreadyExistsCard;\n    }\n    \n    const isCompleted = (index) => isEqual(royalFlush(selectedRoundCard?.suit)[index], cardsState?.collectedCards?.[index])\n\n    const getTargetSuit = () => {\n        switch (selectedRoundCard?.suit) {\n            case CONSTANTS.CARD_SUITS.CLUB: \n                return 'CLUBS'\n            \n            case CONSTANTS.CARD_SUITS.DIAMOND:\n                return 'DIAMONDS'\n            \n            case CONSTANTS.CARD_SUITS.HEART:\n                return 'HEARTS'\n            \n            case CONSTANTS.CARD_SUITS.SPADE:\n                return 'SPADES'\n        }\n    }\n\n    const hasRoundCompleted = () => {\n        if (currentRound === 1 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\n            setTimeout(() => { \n                resetGameState()\n                setCurrentRound(2)\n            }, 3000)\n            \n            return setIsRounCompleted(true)\n        } else if (currentRound === 2 && isEqual(cardsArr, royalFlush(selectedRoundCard?.suit))) {\n            return setGameCompleted(true)\n        }\n\n        setGameCompleted(false)\n        return setIsRounCompleted(false)\n    }\n\n    const text = (value) => (`Try for a ${value} card here`)\n\n    const renderCardText = (index) => {\n        switch (index) {\n            case 0: \n                return text(10)\n            \n            case 1:\n                return text('Jack')\n            \n            case 2:\n                return text('Queen')\n            \n            case 3:\n                return text('King')\n            \n            case 4:\n                return 'Try for an Ace card here'\n        }\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Power Royals\" seconds={6}/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Power Royals!</span> If you can get a red card royal flush followed by a black card royal flush, you win!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\n                        </p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={`${classes.__card_game_content_cards}`}>\n                                {cardsState?.collectedCards?.map((c, index) => (\n                                    isEmpty(c) ?\n                                        <GameCard key={index + ''}\n                                            isCompleted={false}\n                                            showCardPopu={false}\n                                            isSelected={false}\n                                            activeCard={null}\n                                            showCardPopup={false}\n                                            time={0}\n                                            text={renderCardText(index)}\n                                            showIncrementOrDecrementPower={false}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={false}\n                                            onDecrease={() => { }}\n                                            onReplace={() => { }}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => { }}\n                                        />\n                                        :\n                                        <GameCard\n                                            key={index + ''}\n                                            showCardPopup={!isReplaceAll && true}\n                                            isCompleted={isCompleted(index)}\n                                            card={cardsState?.collectedCards?.[index]}\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\n                                            activeCard={cardsState?.activeCard}\n                                            time={time}\n                                            inventory={inventory}\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                            showPowerMatchPower={powerMatch > 0}\n                                            showReplacePower={replace > 0}\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\n                                            onPowerMatch={() => onPowerMatch(cardsState?.collectedCards?.[index], index)}\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\n                                        /> \n                                    ))}\n                            </div> \n                        </Card>\n                        {\n                            currentCard === 0 && time > 0 &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n\n                        {\n                            selectedRoundCard && !isRoundCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Your target suit is <strong>{ getTargetSuit() }</strong></p>} primary />\n                                </>\n                        }\n\n                        {\n                            isRoundCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Royal Flush! moving on to Round 2.</p>} success />\n                                </>\n                        }\n\n                        {\n                            isGameCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>You won the game!</p>} success />\n                                </>\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        <SidebarButton\n                            success={newHands > 0 ? true : false}\n                            primary={newHands <= 0 ? true : false}\n                            title=\"Power Hand\"\n                            toolText={`${newHands} left`}\n                            icon={<div\n                                className={classes.__sidebar_reload_btn}>\n                                <Reload bgColor={\"#0ff\"} style={{height: 'auto'}}/>\n                            </div>}\n                        />\n\n                        <SidebarButton\n                            success={powerMatch > 0 ? true : false}\n                            primary={powerMatch <= 0 ? true : false}\n                            title=\"Power Match\"\n                            toolText={`${powerMatch} left`}\n                            icon={<img src={BoltIcon} width={53} height={53} alt={''}/>}\n                        />\n\n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Up/Down\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nexport default withRouter(PowerRoyalsGame)","/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerRoyalsGameReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerRoyalsActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/PowerPoker/index.js",["742","743","744","745","746","747","748","749","750","751"],"import React, {useState, useEffect} from 'react'\nimport { withRouter } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {getRandomCard, getCardsRankPairs, royalFlush} from '../../utility/shared'\nimport Card from '../../components/Card'\nimport GameCard from '../../components/GameCard'\nimport Header from '../../components/Header/Header'\nimport PageHeader from '../../components/PageHeader'\nimport ProgressBar from '../../components/Progress'\nimport Footer from '../../components/Footer/Footer'\nimport Alert from '../../components/Alert'\nimport Reload from '../../icons/Reload'\nimport BoltIcon from '../../assets/bolt.png'\nimport CardsSvg from '../../icons/Cards'\nimport Sidebar from '../../components/Sidebar'\nimport SidebarButton from '../../components/SidebarButton'\nimport Replace from '../../icons/Replace'\nimport PlusMinus from '../../icons/PlusAndMinus'\nimport { CONSTANTS } from '../../utility/constants'\nimport {\n    resetPowerPokersCardState,\n    powerPokersGameInventory\n} from '../../actions/powerPokerActions'\nimport { isEmpty, isEqual } from 'lodash'\nimport classes from './pokerHands.module.scss'\n\nconst INITIAL_STATE = {\n    collectedCards: [{}, {}, {}, {}, {}],\n    activeCard: {}\n}\nconst TOTAL_ROUNDS = 3;\nconst TOTAL_CARDS = 5;\nconst MAX_ROUND_TIME = 5;\nconst MAX_RESET_BTN_COUNT_DOWN = 0;\nconst REPLACE_ALL_SPEED_TIME = 1;\nlet _round = 1;\nlet _currentCard = 0;\nconst cardsArr = [{}, {}, {}, {}, {}]\nlet time = MAX_ROUND_TIME;\nlet resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN;\n\nfunction PowerRoyalsGame(props) {\n    const [cardsState, setCardsState] = useState(INITIAL_STATE)\n    const [count, setCount] = useState(MAX_ROUND_TIME)\n    const [completedChallengeText, setCompletedChallengeText] = useState()\n    const [currentRound, setCurrentRound] = useState(_round)\n    const [currentCard, setCurrentCard] = useState(_currentCard)\n    const [resetBtnCountDown, setResetBtnCountDown] = useState(MAX_RESET_BTN_COUNT_DOWN)\n    const [showResetTimer, setResetTimerState] = useState(false)\n    const [isReplaceAll, setIsReplaceAllState] = useState(false)\n    const [isGameCompleted, setGameCompleted] = useState(false)\n    const [selectedRoundCard, setSelectedRoundCard] = useState()\n    const [isCurrentFailed, setIsCurrentRoundFailed] = useState(false)\n\n    const dispatch = useDispatch();\n    const {inventory = {}} = useSelector(state => state.powerPoker)\n\n    const {\n        replace = 0, replaceAll = 0, newHands = 0,\n        powerMatch = 0, increaseOrDecrease = 0\n    } = inventory || {}\n    \n    useEffect(() => {\n        dispatch(resetPowerPokersCardState())\n        resetGameState()\n\n        return () => resetGameState()\n    }, [])\n\n    useEffect(() => {\n        let timeOut = gameStart();\n\n        if(isGameCompleted) clearInterval(timeOut)\n        \n        return function cleanup() {\n            return clearInterval(timeOut && timeOut)\n        }\n    }, [currentCard, currentRound, completedChallengeText, isCurrentFailed])\n\n    const gameStart = () => {\n        let timeOut = null\n        if (_currentCard < TOTAL_CARDS) {\n            if (!isReplaceAll)\n                time = MAX_ROUND_TIME;\n            else\n                time = REPLACE_ALL_SPEED_TIME\n            setResetTimerState(false)\n            timeOut = setInterval(() => {\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (!isReplaceAll)\n                        time = MAX_ROUND_TIME;\n                    else\n                        time = REPLACE_ALL_SPEED_TIME\n                    setCount(time)\n\n                    _currentCard += 1;\n                    setCurrentCard(_currentCard)\n                    updateCardState()\n\n                    if (currentCard >= TOTAL_CARDS) setIsReplaceAllState(false)\n                }\n            }, 1000)\n        } else {\n            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n            timeOut = setInterval(() => {\n                setIsReplaceAllState(false)\n                if (time !== 0) {\n                    time--;\n                    setCount(time)\n                } else {\n                    if (currentRound < TOTAL_ROUNDS) {\n                        setResetTimerState(true)\n                        if (resetAllBtnTime !== 0) {\n                            resetAllBtnTime--;\n                            setResetBtnCountDown(resetAllBtnTime)\n                        } else {\n                            _round += 1;\n                            setCurrentRound(_round)\n                            setCurrentCard(0)\n                            resetGameState()\n                            resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n                            setResetBtnCountDown(resetAllBtnTime)\n                            setResetTimerState(false)\n                        }\n                    } else {\n                        setResetTimerState(false)\n                        setIsReplaceAllState(false)\n                        clearInterval(timeOut)\n                    }\n                }\n            }, 1000)\n        }\n\n        return timeOut\n    }\n\n    const resetGameState = () => {\n        for (let i = 0; i < 5; i++) {\n            cardsArr[i] = {}\n        }\n\n        resetAllBtnTime = MAX_RESET_BTN_COUNT_DOWN\n        _currentCard = 0;\n        setCardsState(INITIAL_STATE)\n        setCompletedChallengeText(null)\n        setIsCurrentRoundFailed(false)\n        setCurrentCard(_currentCard)\n        setCount(MAX_ROUND_TIME)\n        setResetBtnCountDown(MAX_RESET_BTN_COUNT_DOWN)\n        setResetTimerState(false)\n        setSelectedRoundCard(null)\n        setIsReplaceAllState(false)\n    }\n\n    const updateCardState = () => {\n        let card = getRandomCard()\n\n        if (isEmpty(selectedRoundCard) && _currentCard === 1) {\n            setSelectedRoundCard(card)\n        }\n\n        cardsArr[currentCard] = card\n\n        if (hasCardAlreadyExists(card)?.length > 1) {\n            return updateCardState()\n        }\n\n        challengeCompleted()\n\n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: card })\n    }\n\n    //if the card of same rank and suit is already exists then get any other random card\n    const hasCardAlreadyExists = (card) => cardsArr?.filter(c => c?.rank === card?.rank && c?.suit === card?.suit);\n\n    const challengeCompleted = () => {\n        //Note: This poker hand is from Highiest to lowest, and the sequence must be below sequence\n        \n        if (_currentCard !== cardsArr?.length) { return null }\n\n        if (hasRoyalFlush()) {\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Royal Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasStraightFlushSameSuit()) {\n            //Straight Completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Straight Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFoureOfAKindFlush()) {\n            //4 of a kind completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Four Of A Kind! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFullHouseFlush()) {\n            //Full House Completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Full House! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasFlush()) {\n            //fluch completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Flush! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasStraightFlushDiffSuit()) {\n            //straight flush diff suit completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Straight! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasThreeOfAKindFlush()) {\n            //three of a kind compeleted\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Three Of A Kind! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasTwoPairFlush()) {\n            //two pair compeleted\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>Two Pair! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n        else if (hasPairFlush()) {\n            //Pair completed\n            setIsCurrentRoundFailed(false)\n            setCompletedChallengeText(<p>1 Pair! challenge completed</p>)\n\n            return setGameCompleted(currentRound === TOTAL_ROUNDS ? true : false)\n        }\n\n        setIsCurrentRoundFailed(true)\n        setCompletedChallengeText(<p>Sorry, you did not win on this hand.</p>)\n\n        return setGameCompleted(false)\n    }\n\n    const updateInventory = (inventoryValue, actionType) => {\n        const _inventory = inventory;\n\n        switch (actionType) {\n            case CONSTANTS.CARD_POP_ACTIONS.INCREASE:\n                _inventory.increaseOrDecrease = inventoryValue\n                break\n            \n            case CONSTANTS.CARD_POP_ACTIONS.POWER_MATCH:\n                _inventory.powerMatch = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.REPLACE:\n                _inventory.replace = inventoryValue\n                break;\n            \n            case CONSTANTS.CARD_POP_ACTIONS.NEW_HAND:\n                _inventory.newHands = inventoryValue\n                break;\n        }\n\n        dispatch(powerPokersGameInventory(_inventory))\n    }\n\n    const onReplaceAll = () => {\n        let _newHands = newHands\n        if (_newHands <= 0) return\n\n        _newHands -= 1\n        updateInventory(_newHands, CONSTANTS.CARD_POP_ACTIONS.NEW_HAND)\n        resetGameState()\n        setIsReplaceAllState(true)\n        setCount(REPLACE_ALL_SPEED_TIME)\n        time = REPLACE_ALL_SPEED_TIME\n    }\n\n    const onIncrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n        \n        _increaseOrDecrease -= 1;\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"A\") {\n            _rank += 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        cardsArr[cardIndex] = newCard\n\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\n            newCard.rank += 1;\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onDecrease = (card, cardIndex) => {\n        const { rank = 0, suit = 0 } = card || {}\n        let _increaseOrDecrease = increaseOrDecrease\n\n        if (increaseOrDecrease <= 0) {\n            return\n        }\n\n        _increaseOrDecrease -= 1\n\n        let _rank = rank\n        if(CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n            _rank -= 1;\n        }\n        \n        const newCard = {\n            suit: suit,\n            rank: _rank\n        }\n        cardsArr[cardIndex] = newCard\n\n        if (hasCardAlreadyExists(newCard)?.length > 1) {\n            if (CONSTANTS.CARD_RANKS[_rank] !== \"2\") {\n                newCard.rank -= 1;\n            }\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({...cardsState, collectedCards: cardsArr, activeCard: newCard})\n        updateInventory(_increaseOrDecrease, CONSTANTS.CARD_POP_ACTIONS.INCREASE)\n    }\n\n    const onReplace = (card, cardIndex) => {\n        let _replace = replace\n        if (replace <= 0) {\n            return\n        }\n\n        _replace -= 1\n\n        let newCard = getRandomCard();\n        \n        if (currentCard === 1 && card === cardsState?.activeCard) {\n            setSelectedRoundCard(newCard)\n        }\n        \n        cardsArr[cardIndex] = newCard\n        \n        if (hasCardAlreadyExists(newCard)?.length > 1) { \n            newCard = getRandomCard()\n            cardsArr[cardIndex] = newCard\n        }\n\n        challengeCompleted()\n        \n        setCardsState({ ...cardsState, collectedCards: cardsArr, activeCard: newCard })\n        updateInventory(_replace, CONSTANTS.CARD_POP_ACTIONS.REPLACE)\n    }\n\n    const hasStraightFlushDiffSuit = () => {\n        //Five cards in a sequence, but not of the same suit.\n        let hasFlush = cardsArr?.every((c, i, ar) => {\n            return !i || ar[i - 1]?.rank > c?.rank\n        })\n\n        return hasFlush\n    }\n\n    const hasFullHouseFlush = () => {\n        //Three of a kind with a pair.\n        let hasFlush = false;\n        const threeOfAKind = getCardsRankPairs(cardsArr)\n        Object.entries(threeOfAKind).forEach(([key, val]) => {\n            if (val % 2 === 0 && val % 3 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasFlush = () => {\n        //Any five cards of the same suit, but not in a sequence.\n        const cards = cardsArr?.filter(c => c?.suit === cardsArr[0]?.suit);\n        if (cards?.length === 5) {\n            return true;\n        }\n\n        return false;\n    }\n\n    const hasStraightFlushSameSuit = () => {\n        //Five cards in a sequence, all in the same suit.\n        const flushCards = cardsArr?.filter(c => c?.suit === selectedRoundCard?.suit)\n        let hasFlush = false;\n        if (flushCards?.length >= 5) {\n            //all same suit cards\n            hasFlush = cardsArr?.every((c, i, ar) => {\n                if(ar[0]?.rank > ar[1]?.rank)\n                    return !i || ar[i - 1]?.rank > c?.rank //highest to lowest\n                \n                return !i || ar[i - 1]?.rank < c?.rank //lowest to highest\n            })\n        }\n\n        return hasFlush\n    }\n\n    const hasThreeOfAKindFlush = () => {\n        //Three cards of the same rank.\n        let hasFlush = false;\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 3 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasTwoPairFlush = () => {\n        //two pairs\n        let pairsCount = 0;\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 2 === 0) {\n                pairsCount ++\n            }\n        })\n\n        return pairsCount === 2 ? true : false\n    }\n\n    const hasPairFlush = () => {\n        //Two cards of the same rank.\n        let hasFlush = false\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if (val % 2 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasFoureOfAKindFlush = () => {\n        //foure cards of same rank\n        let hasFlush = false\n        const counts = getCardsRankPairs(cardsArr)\n        Object.entries(counts).forEach(([key, val]) => {\n            if(val % 4 === 0) {\n                hasFlush = true\n            }\n        })\n\n        return hasFlush\n    }\n\n    const hasRoyalFlush = () => {\n        //A, K, Q, J, 10, all the same suit.\n        const _royalFlush = royalFlush(selectedRoundCard ? selectedRoundCard?.suit : cardsArr[0]?.suit)\n        if (isEqual(cardsArr, _royalFlush)) {\n            return true;\n        }\n        return false\n    }\n\n    return (\n        <>\n            <Header/>\n            <div className={classes.__card_game_content}>\n                <div className={classes.__card_game_content_left}>\n                    <PageHeader title=\"Power Poker\" seconds={6}/>\n                    <div className={classes._card_game_content_top}>\n                        <div className={classes._card_game_content_header_text}>\n                            <p>\n                                Welcome to <span>Power Poker!</span> Use Powers to make winning hands! Can you get a Royal Flush? You have the Power!\n                            </p>\n                        </div>\n                        <CardsSvg style={{display: 'flex', height: 'auto'}}/>\n                        <p className={classes.__card_game_card_counter}>\n                            Card <span>{currentCard}</span> of {TOTAL_CARDS}\n                        </p>\n                        <p className={classes.__card_game_round_counter}>\n                            Hand <span>{currentRound}</span> of {TOTAL_ROUNDS}\n                        </p>\n                        <span className={classes.__card_divider} />\n                        <p className={classes.__card_game_Next_card_drawn_in}>Next card drawn in</p>\n                        <ProgressBar\n                            progress={count}\n                            maxProgress={5}\n                            size={62}\n                            strokeWidth={4}\n                            circleOneStroke='grey'\n                            circleTwoStroke='#fff'/>\n                    </div>\n\n                    <div className={classes.__card_game_content_body}>\n                        <Card>\n                            <div className={`${classes.__card_game_content_cards}`}>\n                                {cardsState?.collectedCards?.map((c, index) => (\n                                    isEmpty(c) ?\n                                        <GameCard key={index + ''}\n                                            isCompleted={false}\n                                            showCardPopu={false}\n                                            isSelected={false}\n                                            activeCard={null}\n                                            showCardPopup={false}\n                                            time={0}\n                                            showIncrementOrDecrementPower={false}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={false}\n                                            onDecrease={() => { }}\n                                            onReplace={() => { }}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => { }}\n                                        />\n                                        :\n                                        <GameCard\n                                            key={index + ''}\n                                            showCardPopup={!isReplaceAll && true}\n                                            isCompleted={false}\n                                            card={cardsState?.collectedCards?.[index]}\n                                            isSelected={cardsState?.collectedCards?.[index] && true}\n                                            activeCard={cardsState?.activeCard}\n                                            time={time}\n                                            inventory={inventory}\n                                            showIncrementOrDecrementPower={increaseOrDecrease > 0}\n                                            showPowerMatchPower={false}\n                                            showReplacePower={replace > 0}\n                                            onDecrease={() => onDecrease(cardsState?.collectedCards?.[index], index)}\n                                            onReplace={() => onReplace(cardsState?.collectedCards?.[index], index)}\n                                            onPowerMatch={() => { }}\n                                            onIncrease={() => onIncrease(cardsState?.collectedCards?.[index], index)}\n                                        /> \n                                    ))}\n                            </div> \n                        </Card>\n\n                        {\n                            currentRound === 1 && currentCard === 0 && time > 0 &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>Get Ready! Your game is about start.</p>} primary />\n                                </>\n                        }\n                        \n                        {\n                            completedChallengeText &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => completedChallengeText} success={!isCurrentFailed} danger={isCurrentFailed} />\n                                </>\n                        }\n\n                        {\n                            isGameCompleted &&\n                                <>\n                                    <br />\n                                    <Alert renderMsg={() => <p>You have won the game!</p>} success />\n                                </>\n                        }\n                    </div>\n                </div>\n\n                <Sidebar>\n                    <div className={classes.__sidebar_header}>\n                        <span className={classes.__sidebar_header_title}>My Powers</span>\n                    </div>\n\n                    <div className={classes.__sidebar_button_wrapper}>\n                        <SidebarButton\n                            success={replace > 0 ? true : false}\n                            primary={replace <= 0 ? true : false}\n                            title=\"Power Card\"\n                            toolText={`${replace} left`}\n                            icon={<Replace style={{ height: 'auto' }} />}\n                        />\n\n                        \n                        <SidebarButton\n                            success={increaseOrDecrease > 0 ? true : false}\n                            primary={increaseOrDecrease <= 0 ? true : false}\n                            title=\"Power Up/Down\"\n                            toolText={`${increaseOrDecrease} left`}\n                            icon={<PlusMinus style={{height: 'auto'}}/>}\n                        />\n                    </div>\n                </Sidebar>\n            </div>\n            <Footer isBlack/>\n        </>\n    )\n}\n\nexport default withRouter(PowerRoyalsGame)","/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/powerPokerActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/powerPokerReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/HomePageContentHeader/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/LandingPage/index.js",["752"],"import { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport classes from './index.module.scss';\nimport Header from '../../components/Header/Header';\nimport Footer from '../../components/Footer/Footer';\nimport HomePageContentHeader from '../../components/HomePageContentHeader';\nimport PowerPickCard from '../../components/PowerpickCard';\nimport AmericanFootballTicket from '../../icons/AmericanFootballTicket';\nimport ShapeIcon from '../../icons/Shape';\nimport AmericanFootballCup from '../../icons/AmericanFootballCup';\nimport MegaPhone from '../../icons/MegaPhone';\nimport powerplayLargeicon from '../../assets/powerPlayIcon2.png'\nimport Modal from '../../components/Modal';\n\nconst LandingPage = props => {\n    const [showModal, setModalState] = useState(false)\n    const isMobileOrTablet = useMediaQuery({\n        query: '(max-width: 540px)'\n    })\n\n    let scrollRef = useRef();\n\n    useEffect(() => { \n        // const scrollBody = ReactDOM.findDOMNode(scrollRef.current);\n        // scrollBody.addEventListener('scroll', onScroll);\n\n        // return function cleanUp() {\n        //     scrollBody.removeEventListener('scroll')\n        // }\n    }, [])\n    \n    useEffect(() => { \n        // if (showModal) {\n        //     const scrollY = window.scrollY\n        //     document.body.style.position = 'fixed';\n        //     document.body.style.top = `-${window.scrollY}px`;\n        //     console.log(scrollY)\n        // } else if(!showModal) {\n        //     // const scrollY = document.body.style.top;\n        //     document.body.style.position = 'unset'\n        //     // window.scrollTo(0, parseInt(scrollY || 0) * -1)\n        // }\n    }, [showModal])\n\n    const onFormSubmit = (e) => {\n        e.preventDefault();\n\n        setModalState(false)\n    }\n\n    const onScroll = () => {\n        console.log('aa',window.scrollY, scrollRef)\n    }\n\n\n    return (\n        <div className={classes.wrapper} onScroll={onScroll} ref={scrollRef}>\n            <Header hasMenu={false} />\n            <HomePageContentHeader\n                buttonTitle=\"Notify me of launch!\"\n                footerTitle={<>Sign up to be notified and <span>receive 100 Power Tokens!</span></>}\n                onButtonClick={() => setModalState(true)}\n                showBtnBg\n\n            />\n\n            <div className={classes.landing_page_body}>\n                <h2 className={classes.landing_page_body_title}>\n                    Live-Play Promotional Contests\n                </h2>\n                <div className={classes.landing_page_content}>\n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\n                        <div className={classes.landing_page_cards}>\n                            <AmericanFootballTicket size={132} />\n                            <p>\n                                Our live-play sponsored contests are not only exciting, but also <span>free to play.</span>\n                            </p>\n                        </div>\n                    </PowerPickCard>\n                \n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\n                        <div className={classes.landing_page_cards}>\n                            <ShapeIcon />\n                            <p className={classes.p_60}>\n                                We have <span>a wide variety</span> of contests to choose from including sports based promotional contests.\n                        </p>\n                        </div>\n                    </PowerPickCard>\n                \n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\n                        <div className={classes.landing_page_cards}>\n                            <AmericanFootballCup />\n                            <p className={classes.p_40}>\n                                Enter for your chance to <span>win great prizes</span> from our sponsors.\n                        </p>\n                        </div>\n                    </PowerPickCard>\n                \n                    <PowerPickCard styles={isMobileOrTablet ? { marginTop: '10px', backgroundColor: 'transparent', border: 'none'} : { margin: '20px'}}>\n                        <div className={classes.landing_page_cards}>\n                            <MegaPhone />\n                            <p>\n                                Register to <span>be notified</span> and be among the first to play when we launch!\n                        </p>\n                        </div>\n                    </PowerPickCard>\n                </div>\n\n                <Link to=\"#\" onClick={() => setModalState(true)} className={classes.landing_page_btn}>\n                            Notify me of launch!\n                    </Link>\n\n                <div className={classes.landing_page_footer}>\n                    <h2 className={classes.landing_page_footer_title}>Earn Power Tokens!</h2>\n                    <div className={classes.landing_page_footer_bottom}>\n                        <div className={classes.landing_page_footer_left}>\n                            <p>\n                                By entering our contests, you can earn and win Power Tokens!\n                            </p>\n                            <h2>\n                                What is the Power Token?\n                            </h2>\n                            <p className={classes.p1}>\n                                The Power token (PWRS) is a registered crypt-currency coin on the Ethereum Network.  <span>We will be holding some contests where you can win Powers. <br /> It’s like we are giving you super powers!</span>\n                            </p>    \n\n                            <h3>\n                                We are giving Power to the People! Sign-up today and  <span>get 100 tokens!</span>\n                            </h3>\n                        </div>\n                        {\n                            !isMobileOrTablet &&\n                                <img src={powerplayLargeicon} alt=\"power-games\" width=\"397\" height=\"397\" className={classes.landing_page_footer_right} />\n\n                        }\n                    </div>\n\n                    <Link to=\"#\" onClick={() => setModalState(true)} className={classes.landing_page_btn}>\n                        Notify me of launch!\n                    </Link>\n                </div>\n            </div>\n            <Footer isBlack logoOnly={true} />\n            <Modal visible={showModal}>\n                <div className={classes.modal_body}>\n                    <form className={classes.news_alert_form} onSubmit={onFormSubmit}>\n                        <label>\n                            I want in! Notify me!\n                        </label>\n                        <div className={classes.news_alert_form_input}>\n                            <input type=\"email\" placeholder=\"Your e-mail\" required />\n                            <button type=\"submit\">NOTIFY ME</button>\n                        </div>\n                    </form>\n\n                    <button className={classes.modal_close} onClick={() => setModalState(false)} />\n                </div>\n            </Modal>\n        </div>\n    )\n}\n\nexport default LandingPage;","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballTicket.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Shape.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/AmericanFootballCup.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/MegaPhone.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Modal/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/pages/AccountPage/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/AccountInfoComponent/index.js",["753"],"import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport classes from './index.module.scss';\n\nfunction AccountInfo(props) {\n    const renderItem = (title, value, buttonTitle) => {\n        const onButtonClick = () => {\n            console.log('button clicked')\n        }\n        return (\n            <div className={classes.list_item}>\n                <span>{title}</span>\n                <span>\n                    <span>{value}</span>\n                    <button onClick={onButtonClick}>{ buttonTitle ? buttonTitle : 'Edit' }</button>\n                </span>\n            </div>\n        )\n    }\n    return (\n        <div className={classes.list_container}>\n            {\n                renderItem('Full Name', 'My Full Name')\n            }\n\n            {\n                renderItem('Display Name', 'My Full Name')\n            }\n\n            {\n                renderItem('Email', 'abc@email.com')\n            }\n            {\n                renderItem('Date of Birth', 'January 1, 1990')\n            }\n\n            {\n                renderItem('Country', 'Pakistan')\n            }\n\n            {\n                renderItem('Province/State/Territory', 'Islamabad')\n            }\n\n            {\n                renderItem('Change Password', '', 'Change')\n            }\n        </div>\n    )\n}\n\nAccountInfo.propTypes = {\n\n}\n\nexport default AccountInfo\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/index.js",["754","755","756","757"],"import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\n\nimport classes from './index.module.scss';\nimport Button from '../Button';\nimport Ticket from '../../icons/Ticket';\nimport Token from '../../assets/token.png';\nimport Money from '../../icons/Money';\nimport ListItem from './ListItem';\n\nconst ListTitle = (Icon, isSvg, title) => (\n    <span className={classes.list_left_side_1}>\n        {\n            Icon && isSvg ?\n                <Icon />\n                :\n                Icon && !isSvg &&\n                <img src={Icon} width={34} height={34} />\n        }\n        <span>{ title }</span>\n    </span>\n)\n\nconst ListHeader = (title, balance, btnTitle, Icon, isSvg) => {\n    return (\n        <div className={classes.list_container}>\n            <div className={classes.list_left_side}>\n                {ListTitle(Icon, isSvg, title)}\n                <span className={classes.span}>\n                    {balance}\n                </span>\n            </div>\n\n            <div className={classes.list_right_side}>\n                <Button title={btnTitle} />\n                <span>Min. Amount: $100</span>\n            </div>\n        </div>\n    )\n}\n\nfunction BalanceInfoComponent(props) {\n    \n\n    return (\n        <>\n            <div className={classes.list_header_wrapper}>\n                {ListHeader('My Cash Balance', '$1,750', 'Redeem', Money, true)}\n                {ListHeader('My Token Balance', '1,750', 'Transfer to Wallet', Token, false)}\n            </div>\n            <div className={classes.list_body}>\n                {ListTitle(Ticket, true, 'My non-cash prizes')}                \n                <ListItem title='3 nights stay at Fairmont Banff Springs' />\n                <ListItem title='10 free meals at Macdonald’s' claimed={false} />\n                <ListItem title=\"3 nights stay at Fairmont Banff Springs\" />\n            </div>\n        </>\n    )\n}\n\nBalanceInfoComponent.propTypes = {\n\n}\n\nexport default BalanceInfoComponent\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Ticket.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/icons/Money.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/BalanceInfoComponent/ListItem.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ResultsInfoComponent/index.js",["758"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport Accordian from '../Accordian'\n\nfunction ResultsInforComponent(props) {\n    return (\n        <div>\n            <Accordian title=\"Cash Prizes\" cashTitle={\"Total: \"} cash={'$4500'} />\n            <Accordian title=\"Cash Prizes\" cashTitle={\"Total: \"} cash={'$4500'} />\n        </div>\n    )\n}\n\nResultsInforComponent.propTypes = {\n\n}\n\nexport default ResultsInforComponent\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/index.js",["759","760","761"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './index.module.scss';\nimport ResultCard from './ResultCard';\n\nfunction Accordian(props) {\n    const { title = '', visible = true, cash = '', cashTitle = '', Icon = '', isSvg = false } = props || {}\n\n    const [isVisible, setVisibleState] = useState(visible);\n    useEffect(() => { }, [visible])\n    \n    return (\n        <div className={classes.wrapper}>\n            <div className={classes.accoridan_bar}>\n                <span>{title}</span>\n                <span className={classes.accoridan_bar_right}>\n                    <span>\n                        <span>{cashTitle}</span>\n                        <span className={classes.amount}>{cash}</span>\n                    </span>\n                    {\n                        Icon && isSvg ?\n                            <Icon />\n                            :\n                            Icon &&\n                            <img src={Icon} />\n                    }\n                    <i className={`${classes.arrow} ${classes.down}`} />\n                </span>\n            </div>\n\n            {\n                visible &&\n                <ResultCard />\n            }\n        </div>\n    )\n}\n\nAccordian.propTypes = {\n    title: PropTypes.string,\n    visible: PropTypes.bool,\n    cash: PropTypes.any,\n    cashTitle: PropTypes.string,\n    Icon: PropTypes.any,\n    isSvg: PropTypes.bool,\n}\n\nexport default Accordian\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/Accordian/ResultCard.js",["762"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './index.module.scss';\n\nfunction ResultCard(props) {\n    return (\n        <div className={classes.table_wrapper}>\n            <table>\n                <thead>\n                    <th>Date</th>\n                    <th>Date</th>\n                    <th>Date</th>\n                    <th>Date</th>\n                    <th>Date</th>\n                    <th>Date</th>\n                    <th>Date</th>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                        <td>15 June</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nResultCard.propTypes = {\n\n}\n\nexport default ResultCard\n\n","/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/server_connection.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/config/environment.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/reducers/authReducer/index.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/actions/authActions.js",[],"/home/sulaiman/Desktop/workspace/PowerplayGames/src/components/ProtectedRoute/index.js",[],{"ruleId":"763","replacedBy":"764"},{"ruleId":"765","replacedBy":"766"},{"ruleId":"767","severity":1,"message":"768","line":1,"column":27,"nodeType":"769","messageId":"770","endLine":1,"endColumn":36},{"ruleId":"767","severity":1,"message":"771","line":1,"column":8,"nodeType":"769","messageId":"770","endLine":1,"endColumn":13},{"ruleId":"767","severity":1,"message":"772","line":2,"column":23,"nodeType":"769","messageId":"770","endLine":2,"endColumn":33},{"ruleId":"767","severity":1,"message":"773","line":13,"column":8,"nodeType":"769","messageId":"770","endLine":13,"endColumn":14},{"ruleId":"767","severity":1,"message":"774","line":42,"column":12,"nodeType":"769","messageId":"770","endLine":42,"endColumn":29},{"ruleId":"767","severity":1,"message":"775","line":43,"column":12,"nodeType":"769","messageId":"770","endLine":43,"endColumn":26},{"ruleId":"776","severity":1,"message":"777","line":58,"column":8,"nodeType":"778","endLine":58,"endColumn":10,"suggestions":"779"},{"ruleId":"776","severity":1,"message":"780","line":67,"column":8,"nodeType":"778","endLine":67,"endColumn":35,"suggestions":"781"},{"ruleId":"782","severity":1,"message":"783","line":246,"column":9,"nodeType":"784","messageId":"785","endLine":262,"endColumn":10},{"ruleId":"767","severity":1,"message":"786","line":268,"column":11,"nodeType":"769","messageId":"770","endLine":268,"endColumn":23},{"ruleId":"763","replacedBy":"787"},{"ruleId":"765","replacedBy":"788"},{"ruleId":"767","severity":1,"message":"789","line":25,"column":22,"nodeType":"769","messageId":"770","endLine":25,"endColumn":29},{"ruleId":"767","severity":1,"message":"790","line":25,"column":35,"nodeType":"769","messageId":"770","endLine":25,"endColumn":45},{"ruleId":"767","severity":1,"message":"791","line":25,"column":51,"nodeType":"769","messageId":"770","endLine":25,"endColumn":69},{"ruleId":"792","severity":1,"message":"793","line":78,"column":37,"nodeType":"794","endLine":78,"endColumn":95},{"ruleId":"792","severity":1,"message":"793","line":120,"column":57,"nodeType":"794","endLine":120,"endColumn":101},{"ruleId":"776","severity":1,"message":"795","line":26,"column":8,"nodeType":"778","endLine":26,"endColumn":52,"suggestions":"796"},{"ruleId":"763","replacedBy":"797"},{"ruleId":"765","replacedBy":"798"},{"ruleId":"763","replacedBy":"799"},{"ruleId":"765","replacedBy":"800"},{"ruleId":"763","replacedBy":"801"},{"ruleId":"765","replacedBy":"802"},{"ruleId":"767","severity":1,"message":"803","line":22,"column":12,"nodeType":"769","messageId":"770","endLine":22,"endColumn":20},{"ruleId":"804","severity":1,"message":"805","line":97,"column":37,"nodeType":"806","messageId":"807","endLine":97,"endColumn":43},{"ruleId":"804","severity":1,"message":"805","line":105,"column":37,"nodeType":"806","messageId":"807","endLine":105,"endColumn":43},{"ruleId":"804","severity":1,"message":"805","line":113,"column":37,"nodeType":"806","messageId":"807","endLine":113,"endColumn":43},{"ruleId":"804","severity":1,"message":"805","line":121,"column":37,"nodeType":"806","messageId":"807","endLine":121,"endColumn":43},{"ruleId":"792","severity":1,"message":"793","line":223,"column":37,"nodeType":"794","endLine":223,"endColumn":87},{"ruleId":"767","severity":1,"message":"808","line":10,"column":8,"nodeType":"769","messageId":"770","endLine":10,"endColumn":19},{"ruleId":"776","severity":1,"message":"809","line":28,"column":8,"nodeType":"778","endLine":28,"endColumn":10,"suggestions":"810"},{"ruleId":"776","severity":1,"message":"811","line":16,"column":8,"nodeType":"778","endLine":16,"endColumn":18,"suggestions":"812"},{"ruleId":"767","severity":1,"message":"813","line":10,"column":10,"nodeType":"769","messageId":"770","endLine":10,"endColumn":20},{"ruleId":"767","severity":1,"message":"814","line":11,"column":10,"nodeType":"769","messageId":"770","endLine":11,"endColumn":18},{"ruleId":"767","severity":1,"message":"815","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":18},{"ruleId":"767","severity":1,"message":"815","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":18},{"ruleId":"767","severity":1,"message":"815","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":18},{"ruleId":"767","severity":1,"message":"815","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":18},{"ruleId":"767","severity":1,"message":"815","line":4,"column":8,"nodeType":"769","messageId":"770","endLine":4,"endColumn":18},{"ruleId":"782","severity":1,"message":"783","line":12,"column":9,"nodeType":"784","messageId":"785","endLine":52,"endColumn":10},{"ruleId":"782","severity":1,"message":"783","line":12,"column":9,"nodeType":"784","messageId":"785","endLine":52,"endColumn":10},{"ruleId":"782","severity":1,"message":"783","line":12,"column":9,"nodeType":"784","messageId":"785","endLine":52,"endColumn":10},{"ruleId":"782","severity":1,"message":"783","line":12,"column":9,"nodeType":"784","messageId":"785","endLine":52,"endColumn":10},{"ruleId":"782","severity":1,"message":"783","line":19,"column":9,"nodeType":"784","messageId":"785","endLine":31,"endColumn":10},{"ruleId":"776","severity":1,"message":"816","line":14,"column":8,"nodeType":"778","endLine":14,"endColumn":10,"suggestions":"817"},{"ruleId":"767","severity":1,"message":"818","line":7,"column":8,"nodeType":"769","messageId":"770","endLine":7,"endColumn":20},{"ruleId":"767","severity":1,"message":"819","line":41,"column":33,"nodeType":"769","messageId":"770","endLine":41,"endColumn":40},{"ruleId":"767","severity":1,"message":"820","line":4,"column":10,"nodeType":"769","messageId":"770","endLine":4,"endColumn":25},{"ruleId":"767","severity":1,"message":"821","line":4,"column":27,"nodeType":"769","messageId":"770","endLine":4,"endColumn":36},{"ruleId":"767","severity":1,"message":"822","line":4,"column":38,"nodeType":"769","messageId":"770","endLine":4,"endColumn":47},{"ruleId":"767","severity":1,"message":"823","line":6,"column":9,"nodeType":"769","messageId":"770","endLine":6,"endColumn":18},{"ruleId":"767","severity":1,"message":"824","line":6,"column":44,"nodeType":"769","messageId":"770","endLine":6,"endColumn":62},{"ruleId":"767","severity":1,"message":"825","line":28,"column":10,"nodeType":"769","messageId":"770","endLine":28,"endColumn":24},{"ruleId":"767","severity":1,"message":"774","line":51,"column":12,"nodeType":"769","messageId":"770","endLine":51,"endColumn":29},{"ruleId":"767","severity":1,"message":"775","line":52,"column":12,"nodeType":"769","messageId":"770","endLine":52,"endColumn":26},{"ruleId":"767","severity":1,"message":"826","line":60,"column":13,"nodeType":"769","messageId":"770","endLine":60,"endColumn":27},{"ruleId":"767","severity":1,"message":"827","line":65,"column":22,"nodeType":"769","messageId":"770","endLine":65,"endColumn":32},{"ruleId":"776","severity":1,"message":"777","line":74,"column":8,"nodeType":"778","endLine":74,"endColumn":10,"suggestions":"828"},{"ruleId":"776","severity":1,"message":"829","line":82,"column":8,"nodeType":"778","endLine":82,"endColumn":72,"suggestions":"830"},{"ruleId":"767","severity":1,"message":"831","line":192,"column":11,"nodeType":"769","messageId":"770","endLine":192,"endColumn":22},{"ruleId":"782","severity":1,"message":"783","line":199,"column":9,"nodeType":"784","messageId":"785","endLine":215,"endColumn":10},{"ruleId":"767","severity":1,"message":"786","line":220,"column":11,"nodeType":"769","messageId":"770","endLine":220,"endColumn":23},{"ruleId":"782","severity":1,"message":"783","line":368,"column":9,"nodeType":"784","messageId":"785","endLine":380,"endColumn":10},{"ruleId":"782","severity":1,"message":"783","line":402,"column":9,"nodeType":"784","messageId":"785","endLine":417,"endColumn":10},{"ruleId":"767","severity":1,"message":"773","line":13,"column":8,"nodeType":"769","messageId":"770","endLine":13,"endColumn":14},{"ruleId":"767","severity":1,"message":"832","line":14,"column":8,"nodeType":"769","messageId":"770","endLine":14,"endColumn":16},{"ruleId":"767","severity":1,"message":"774","line":49,"column":12,"nodeType":"769","messageId":"770","endLine":49,"endColumn":29},{"ruleId":"767","severity":1,"message":"775","line":50,"column":12,"nodeType":"769","messageId":"770","endLine":50,"endColumn":26},{"ruleId":"767","severity":1,"message":"827","line":60,"column":22,"nodeType":"769","messageId":"770","endLine":60,"endColumn":32},{"ruleId":"767","severity":1,"message":"790","line":61,"column":9,"nodeType":"769","messageId":"770","endLine":61,"endColumn":19},{"ruleId":"776","severity":1,"message":"833","line":69,"column":8,"nodeType":"778","endLine":69,"endColumn":10,"suggestions":"834"},{"ruleId":"776","severity":1,"message":"835","line":79,"column":8,"nodeType":"778","endLine":79,"endColumn":76,"suggestions":"836"},{"ruleId":"782","severity":1,"message":"783","line":257,"column":9,"nodeType":"784","messageId":"785","endLine":273,"endColumn":10},{"ruleId":"767","severity":1,"message":"786","line":278,"column":11,"nodeType":"769","messageId":"770","endLine":278,"endColumn":23},{"ruleId":"767","severity":1,"message":"837","line":2,"column":8,"nodeType":"769","messageId":"770","endLine":2,"endColumn":16},{"ruleId":"767","severity":1,"message":"838","line":2,"column":8,"nodeType":"769","messageId":"770","endLine":2,"endColumn":17},{"ruleId":"767","severity":1,"message":"768","line":1,"column":17,"nodeType":"769","messageId":"770","endLine":1,"endColumn":26},{"ruleId":"767","severity":1,"message":"839","line":1,"column":28,"nodeType":"769","messageId":"770","endLine":1,"endColumn":36},{"ruleId":"767","severity":1,"message":"838","line":2,"column":8,"nodeType":"769","messageId":"770","endLine":2,"endColumn":17},{"ruleId":"792","severity":1,"message":"793","line":18,"column":17,"nodeType":"794","endLine":18,"endColumn":58},{"ruleId":"767","severity":1,"message":"838","line":2,"column":8,"nodeType":"769","messageId":"770","endLine":2,"endColumn":17},{"ruleId":"767","severity":1,"message":"840","line":10,"column":12,"nodeType":"769","messageId":"770","endLine":10,"endColumn":21},{"ruleId":"767","severity":1,"message":"841","line":10,"column":23,"nodeType":"769","messageId":"770","endLine":10,"endColumn":38},{"ruleId":"792","severity":1,"message":"793","line":27,"column":29,"nodeType":"794","endLine":27,"endColumn":47},{"ruleId":"767","severity":1,"message":"838","line":2,"column":8,"nodeType":"769","messageId":"770","endLine":2,"endColumn":17},"no-native-reassign",["842"],"no-negated-in-lhs",["843"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'useHistory' is defined but never used.","'Reload' is defined but never used.","'resetBtnCountDown' is assigned a value but never used.","'showResetTimer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'resetGameState'. Either include them or remove the dependency array.","ArrayExpression",["844"],"React Hook useEffect has missing dependencies: 'gameCompleted' and 'gameStart'. Either include them or remove the dependency array.",["845"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'onReplaceAll' is assigned a value but never used.",["842"],["843"],"'replace' is assigned a value but never used.","'powerMatch' is assigned a value but never used.","'increaseOrDecrease' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'maxProgress'. Either include it or remove the dependency array.",["846"],["842"],["843"],["842"],["843"],["842"],["843"],"'selected' is assigned a value but never used.","no-dupe-keys","Duplicate key 'margin'.","ObjectExpression","unexpected","'ProgressBar' is defined but never used.","React Hook useEffect has a missing dependency: 'generateCards'. Either include it or remove the dependency array.",["847"],"React Hook useEffect has a missing dependency: 'elements'. Either include it or remove the dependency array.",["848"],"'redirectTo' is defined but never used.","'Redirect' is defined but never used.","'PageHeader' is defined but never used.","React Hook useEffect has missing dependencies: 'currentSec' and 'maxSec'. Either include them or remove the dependency array.",["849"],"'DecreaseIcon' is defined but never used.","'message' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Draggable' is defined but never used.","'Droppable' is defined but never used.","'flushList' is defined but never used.","'hasPowerRoyalsCard' is defined but never used.","'differenceWith' is defined but never used.","'collectedCards' is assigned a value but never used.","'replaceAll' is assigned a value but never used.",["850"],"React Hook useEffect has a missing dependency: 'gameStart'. Either include it or remove the dependency array.",["851"],"'_redirectTo' is assigned a value but never used.","'BoltIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["852"],"React Hook useEffect has missing dependencies: 'gameStart' and 'isGameCompleted'. Either include them or remove the dependency array.",["853"],"'ReactDOM' is defined but never used.","'PropTypes' is defined but never used.","'useState' is defined but never used.","'isVisible' is assigned a value but never used.","'setVisibleState' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"854","fix":"855"},{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"854","fix":"866"},{"desc":"867","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},"Update the dependencies array to be: [dispatch, resetGameState]",{"range":"873","text":"874"},"Update the dependencies array to be: [currentCard, currentRound, gameCompleted, gameStart]",{"range":"875","text":"876"},"Update the dependencies array to be: [setOffset, circumference, progress, offset, maxProgress]",{"range":"877","text":"878"},"Update the dependencies array to be: [generateCards]",{"range":"879","text":"880"},"Update the dependencies array to be: [elements, selected]",{"range":"881","text":"882"},"Update the dependencies array to be: [currentSec, maxSec]",{"range":"883","text":"884"},{"range":"885","text":"874"},"Update the dependencies array to be: [currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",{"range":"886","text":"887"},"Update the dependencies array to be: [dispatch]",{"range":"888","text":"889"},"Update the dependencies array to be: [currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]",{"range":"890","text":"891"},[2314,2316],"[dispatch, resetGameState]",[2513,2540],"[currentCard, currentRound, gameCompleted, gameStart]",[805,849],"[setOffset, circumference, progress, offset, maxProgress]",[1045,1047],"[generateCards]",[546,556],"[elements, selected]",[497,499],"[currentSec, maxSec]",[2927,2929],[3094,3158],"[currentCard, currentRound, selectedRoundCard, isRoundCompleted, gameStart]",[2689,2691],"[dispatch]",[2918,2986],"[currentCard, currentRound, completedChallengeText, isCurrentFailed, gameStart, isGameCompleted]"]